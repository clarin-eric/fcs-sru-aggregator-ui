{"version":3,"file":"fcs-sru-aggregator-ui-querybuilder.js","sources":["../../src/hooks/useDebouncedState.ts","../../src/parsers/FCSParser.ts","../../src/components/QueryBuilder/utils.ts","../../src/components/QueryBuilder/fcs/constants.ts","../../src/components/QueryBuilder/fcs/FCSParserLexerContext.tsx","../../src/components/QueryBuilder/fcs/FCSQueryBuilderConfigContext.tsx","../../src/components/QueryBuilder/fcs/FCSQueryUpdaterContext.tsx","../../src/components/QueryBuilder/fcs/FCSResourceLayerInfoContext.tsx","../../src/parsers/FCSLexer.ts","../../src/parsers/FCSParserVisitor.ts","../../src/components/QueryBuilder/fcs/utils.ts","../../src/components/QueryBuilder/fcs/FCSQueryBuilder.tsx","../../src/parsers/LexParser.ts","../../src/components/QueryBuilder/lex/constants.ts","../../src/components/QueryBuilder/lex/LexCQLParserLexerContext.tsx","../../src/components/QueryBuilder/lex/LexCQLQueryBuilderConfigContext.tsx","../../src/components/QueryBuilder/lex/LexCQLQueryUpdaterContext.tsx","../../src/components/QueryBuilder/lex/LexCQLResourceFieldInfoContext.tsx","../../src/parsers/LexLexer.ts","../../src/parsers/LexParserVisitor.ts","../../src/components/QueryBuilder/lex/utils.ts","../../src/components/QueryBuilder/lex/LexCQLQueryBuilder.tsx","../../src/components/QueryBuilder/QueryBuilderModal.tsx","../../src/components/QueryBuilder/index.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react'\n\nexport default function useDebouncedState<T>(\n  initialValue: (() => T) | T,\n  delay: number\n): [T, (valueLater: T) => void, (valueNow: T) => void] {\n  const [value, setValue] = useState(initialValue)\n  const timeoutId = useRef<NodeJS.Timeout | undefined>(undefined)\n\n  const setValueDebounced = useCallback(\n    (value: T) => {\n      clearTimeout(timeoutId.current)\n      timeoutId.current = setTimeout(() => {\n        setValue(value)\n      }, delay)\n    },\n    [setValue, delay]\n  )\n\n  // value, setValue, setValueImmediate\n  return [value, setValueDebounced, setValue] as const\n}\n","import {\n  ATN,\n  ATNDeserializer,\n  DecisionState,\n  DFA,\n  FailedPredicateException,\n  NoViableAltException,\n  Parser,\n  ParserATNSimulator,\n  ParserRuleContext,\n  PredictionContextCache,\n  RecognitionException,\n  TerminalNode,\n  TokenStream,\n  Vocabulary,\n} from 'antlr4ng'\n\nimport { FCSParserListener } from './FCSParserListener.js'\nimport { FCSParserVisitor } from './FCSParserVisitor.js'\n\nexport class FCSParser extends Parser {\n  public static readonly L_PAREN = 1\n  public static readonly R_PAREN = 2\n  public static readonly L_SQUARE_BRACKET = 3\n  public static readonly R_SQUARE_BRACKET = 4\n  public static readonly OR = 5\n  public static readonly AND = 6\n  public static readonly NOT = 7\n  public static readonly FWD_SLASH = 8\n  public static readonly L_CURLY_BRACKET = 9\n  public static readonly R_CURLY_BRACKET = 10\n  public static readonly Q_ONE_OR_MORE = 11\n  public static readonly Q_ZERO_OR_MORE = 12\n  public static readonly Q_ZERO_OR_ONE = 13\n  public static readonly Q_COMMA = 14\n  public static readonly OPERATOR_EQ = 15\n  public static readonly OPERATOR_NE = 16\n  public static readonly COLON = 17\n  public static readonly WITHIN = 18\n  public static readonly SIMPLE_WITHIN_SCOPE = 19\n  public static readonly REGEXP_FLAGS = 20\n  public static readonly IDENTIFIER = 21\n  public static readonly INTEGER = 22\n  public static readonly REGEXP = 23\n  public static readonly QUOTED_STRING = 24\n  public static readonly Space = 25\n  public static readonly RULE_query = 0\n  public static readonly RULE_main_query = 1\n  public static readonly RULE_query_disjunction = 2\n  public static readonly RULE_query_sequence = 3\n  public static readonly RULE_query_group = 4\n  public static readonly RULE_query_simple = 5\n  public static readonly RULE_quantifier = 6\n  public static readonly RULE_query_implicit = 7\n  public static readonly RULE_query_segment = 8\n  public static readonly RULE_within_part = 9\n  public static readonly RULE_within_part_simple = 10\n  public static readonly RULE_expression = 11\n  public static readonly RULE_expression_or = 12\n  public static readonly RULE_expression_and = 13\n  public static readonly RULE_expression_group = 14\n  public static readonly RULE_expression_not = 15\n  public static readonly RULE_expression_basic = 16\n  public static readonly RULE_attribute = 17\n  public static readonly RULE_qualifier = 18\n  public static readonly RULE_identifier = 19\n  public static readonly RULE_regexp = 20\n  public static readonly RULE_regexp_pattern = 21\n  public static readonly RULE_regexp_flag = 22\n\n  public static readonly literalNames = [\n    null,\n    \"'('\",\n    \"')'\",\n    \"'['\",\n    \"']'\",\n    \"'|'\",\n    \"'&'\",\n    \"'!'\",\n    \"'/'\",\n    \"'{'\",\n    \"'}'\",\n    \"'+'\",\n    \"'*'\",\n    \"'?'\",\n    \"','\",\n    \"'='\",\n    \"'!='\",\n    \"':'\",\n    \"'within'\",\n  ]\n\n  public static readonly symbolicNames = [\n    null,\n    'L_PAREN',\n    'R_PAREN',\n    'L_SQUARE_BRACKET',\n    'R_SQUARE_BRACKET',\n    'OR',\n    'AND',\n    'NOT',\n    'FWD_SLASH',\n    'L_CURLY_BRACKET',\n    'R_CURLY_BRACKET',\n    'Q_ONE_OR_MORE',\n    'Q_ZERO_OR_MORE',\n    'Q_ZERO_OR_ONE',\n    'Q_COMMA',\n    'OPERATOR_EQ',\n    'OPERATOR_NE',\n    'COLON',\n    'WITHIN',\n    'SIMPLE_WITHIN_SCOPE',\n    'REGEXP_FLAGS',\n    'IDENTIFIER',\n    'INTEGER',\n    'REGEXP',\n    'QUOTED_STRING',\n    'Space',\n  ]\n  public static readonly ruleNames = [\n    'query',\n    'main_query',\n    'query_disjunction',\n    'query_sequence',\n    'query_group',\n    'query_simple',\n    'quantifier',\n    'query_implicit',\n    'query_segment',\n    'within_part',\n    'within_part_simple',\n    'expression',\n    'expression_or',\n    'expression_and',\n    'expression_group',\n    'expression_not',\n    'expression_basic',\n    'attribute',\n    'qualifier',\n    'identifier',\n    'regexp',\n    'regexp_pattern',\n    'regexp_flag',\n  ]\n\n  public get grammarFileName(): string {\n    return 'FCSParser.g4'\n  }\n  public get literalNames(): (string | null)[] {\n    return FCSParser.literalNames\n  }\n  public get symbolicNames(): (string | null)[] {\n    return FCSParser.symbolicNames\n  }\n  public get ruleNames(): string[] {\n    return FCSParser.ruleNames\n  }\n  public get serializedATN(): number[] {\n    return FCSParser._serializedATN\n  }\n\n  protected createFailedPredicateException(\n    predicate?: string,\n    message?: string\n  ): FailedPredicateException {\n    return new FailedPredicateException(this, predicate, message)\n  }\n\n  public constructor(input: TokenStream) {\n    super(input)\n    this.interpreter = new ParserATNSimulator(\n      this,\n      FCSParser._ATN,\n      FCSParser.decisionsToDFA,\n      new PredictionContextCache()\n    )\n  }\n  public query(): QueryContext {\n    const localContext = new QueryContext(this.context, this.state)\n    this.enterRule(localContext, 0, FCSParser.RULE_query)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 46\n        this.main_query()\n        this.state = 49\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if (_la === 18) {\n          {\n            this.state = 47\n            this.match(FCSParser.WITHIN)\n            this.state = 48\n            this.within_part()\n          }\n        }\n\n        this.state = 51\n        this.match(FCSParser.EOF)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public main_query(): Main_queryContext {\n    const localContext = new Main_queryContext(this.context, this.state)\n    this.enterRule(localContext, 2, FCSParser.RULE_main_query)\n    try {\n      this.state = 57\n      this.errorHandler.sync(this)\n      switch (this.interpreter.adaptivePredict(this.tokenStream, 1, this.context)) {\n        case 1:\n          this.enterOuterAlt(localContext, 1)\n          {\n            this.state = 53\n            this.query_simple()\n          }\n          break\n        case 2:\n          this.enterOuterAlt(localContext, 2)\n          {\n            this.state = 54\n            this.query_group()\n          }\n          break\n        case 3:\n          this.enterOuterAlt(localContext, 3)\n          {\n            this.state = 55\n            this.query_sequence()\n          }\n          break\n        case 4:\n          this.enterOuterAlt(localContext, 4)\n          {\n            this.state = 56\n            this.query_disjunction()\n          }\n          break\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public query_disjunction(): Query_disjunctionContext {\n    const localContext = new Query_disjunctionContext(this.context, this.state)\n    this.enterRule(localContext, 4, FCSParser.RULE_query_disjunction)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 62\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context)) {\n          case 1:\n            {\n              this.state = 59\n              this.query_simple()\n            }\n            break\n          case 2:\n            {\n              this.state = 60\n              this.query_sequence()\n            }\n            break\n          case 3:\n            {\n              this.state = 61\n              this.query_group()\n            }\n            break\n        }\n        this.state = 70\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        do {\n          {\n            {\n              this.state = 64\n              this.match(FCSParser.OR)\n              this.state = 68\n              this.errorHandler.sync(this)\n              switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context)) {\n                case 1:\n                  {\n                    this.state = 65\n                    this.query_simple()\n                  }\n                  break\n                case 2:\n                  {\n                    this.state = 66\n                    this.query_sequence()\n                  }\n                  break\n                case 3:\n                  {\n                    this.state = 67\n                    this.query_group()\n                  }\n                  break\n              }\n            }\n          }\n          this.state = 72\n          this.errorHandler.sync(this)\n          _la = this.tokenStream.LA(1)\n        } while (_la === 5)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public query_sequence(): Query_sequenceContext {\n    const localContext = new Query_sequenceContext(this.context, this.state)\n    this.enterRule(localContext, 6, FCSParser.RULE_query_sequence)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 76\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        do {\n          {\n            this.state = 76\n            this.errorHandler.sync(this)\n            switch (this.tokenStream.LA(1)) {\n              case FCSParser.L_SQUARE_BRACKET:\n              case FCSParser.REGEXP:\n                {\n                  this.state = 74\n                  this.query_simple()\n                }\n                break\n              case FCSParser.L_PAREN:\n                {\n                  this.state = 75\n                  this.query_group()\n                }\n                break\n              default:\n                throw new NoViableAltException(this)\n            }\n          }\n          this.state = 78\n          this.errorHandler.sync(this)\n          _la = this.tokenStream.LA(1)\n        } while ((_la & ~0x1f) === 0 && ((1 << _la) & 8388618) !== 0)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public query_group(): Query_groupContext {\n    const localContext = new Query_groupContext(this.context, this.state)\n    this.enterRule(localContext, 8, FCSParser.RULE_query_group)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 80\n        this.match(FCSParser.L_PAREN)\n        this.state = 83\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context)) {\n          case 1:\n            {\n              this.state = 81\n              this.query_disjunction()\n            }\n            break\n          case 2:\n            {\n              this.state = 82\n              this.query_sequence()\n            }\n            break\n        }\n        this.state = 85\n        this.match(FCSParser.R_PAREN)\n        this.state = 87\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if ((_la & ~0x1f) === 0 && ((1 << _la) & 14848) !== 0) {\n          {\n            this.state = 86\n            this.quantifier()\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public query_simple(): Query_simpleContext {\n    const localContext = new Query_simpleContext(this.context, this.state)\n    this.enterRule(localContext, 10, FCSParser.RULE_query_simple)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 91\n        this.errorHandler.sync(this)\n        switch (this.tokenStream.LA(1)) {\n          case FCSParser.REGEXP:\n            {\n              this.state = 89\n              this.query_implicit()\n            }\n            break\n          case FCSParser.L_SQUARE_BRACKET:\n            {\n              this.state = 90\n              this.query_segment()\n            }\n            break\n          default:\n            throw new NoViableAltException(this)\n        }\n        this.state = 94\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if ((_la & ~0x1f) === 0 && ((1 << _la) & 14848) !== 0) {\n          {\n            this.state = 93\n            this.quantifier()\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public quantifier(): QuantifierContext {\n    const localContext = new QuantifierContext(this.context, this.state)\n    this.enterRule(localContext, 12, FCSParser.RULE_quantifier)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 114\n        this.errorHandler.sync(this)\n        switch (this.tokenStream.LA(1)) {\n          case FCSParser.Q_ONE_OR_MORE:\n            {\n              this.state = 96\n              this.match(FCSParser.Q_ONE_OR_MORE)\n            }\n            break\n          case FCSParser.Q_ZERO_OR_MORE:\n            {\n              this.state = 97\n              this.match(FCSParser.Q_ZERO_OR_MORE)\n            }\n            break\n          case FCSParser.Q_ZERO_OR_ONE:\n            {\n              this.state = 98\n              this.match(FCSParser.Q_ZERO_OR_ONE)\n            }\n            break\n          case FCSParser.L_CURLY_BRACKET:\n            {\n              {\n                this.state = 99\n                this.match(FCSParser.L_CURLY_BRACKET)\n                this.state = 111\n                this.errorHandler.sync(this)\n                switch (this.interpreter.adaptivePredict(this.tokenStream, 13, this.context)) {\n                  case 1:\n                    {\n                      this.state = 100\n                      this.match(FCSParser.INTEGER)\n                    }\n                    break\n                  case 2:\n                    {\n                      this.state = 102\n                      this.errorHandler.sync(this)\n                      _la = this.tokenStream.LA(1)\n                      if (_la === 22) {\n                        {\n                          this.state = 101\n                          this.match(FCSParser.INTEGER)\n                        }\n                      }\n\n                      this.state = 104\n                      this.match(FCSParser.Q_COMMA)\n                      this.state = 105\n                      this.match(FCSParser.INTEGER)\n                    }\n                    break\n                  case 3:\n                    {\n                      this.state = 106\n                      this.match(FCSParser.INTEGER)\n                      this.state = 107\n                      this.match(FCSParser.Q_COMMA)\n                      this.state = 109\n                      this.errorHandler.sync(this)\n                      _la = this.tokenStream.LA(1)\n                      if (_la === 22) {\n                        {\n                          this.state = 108\n                          this.match(FCSParser.INTEGER)\n                        }\n                      }\n                    }\n                    break\n                }\n                this.state = 113\n                this.match(FCSParser.R_CURLY_BRACKET)\n              }\n            }\n            break\n          default:\n            throw new NoViableAltException(this)\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public query_implicit(): Query_implicitContext {\n    const localContext = new Query_implicitContext(this.context, this.state)\n    this.enterRule(localContext, 14, FCSParser.RULE_query_implicit)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 116\n        this.regexp()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public query_segment(): Query_segmentContext {\n    const localContext = new Query_segmentContext(this.context, this.state)\n    this.enterRule(localContext, 16, FCSParser.RULE_query_segment)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 118\n        this.match(FCSParser.L_SQUARE_BRACKET)\n        this.state = 120\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if ((_la & ~0x1f) === 0 && ((1 << _la) & 3932290) !== 0) {\n          {\n            this.state = 119\n            this.expression()\n          }\n        }\n\n        this.state = 122\n        this.match(FCSParser.R_SQUARE_BRACKET)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public within_part(): Within_partContext {\n    const localContext = new Within_partContext(this.context, this.state)\n    this.enterRule(localContext, 18, FCSParser.RULE_within_part)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 124\n        this.within_part_simple()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public within_part_simple(): Within_part_simpleContext {\n    const localContext = new Within_part_simpleContext(this.context, this.state)\n    this.enterRule(localContext, 20, FCSParser.RULE_within_part_simple)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 126\n        this.match(FCSParser.SIMPLE_WITHIN_SCOPE)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public expression(): ExpressionContext {\n    const localContext = new ExpressionContext(this.context, this.state)\n    this.enterRule(localContext, 22, FCSParser.RULE_expression)\n    try {\n      this.state = 133\n      this.errorHandler.sync(this)\n      switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context)) {\n        case 1:\n          this.enterOuterAlt(localContext, 1)\n          {\n            this.state = 128\n            this.expression_basic()\n          }\n          break\n        case 2:\n          this.enterOuterAlt(localContext, 2)\n          {\n            this.state = 129\n            this.expression_group()\n          }\n          break\n        case 3:\n          this.enterOuterAlt(localContext, 3)\n          {\n            this.state = 130\n            this.expression_or()\n          }\n          break\n        case 4:\n          this.enterOuterAlt(localContext, 4)\n          {\n            this.state = 131\n            this.expression_and()\n          }\n          break\n        case 5:\n          this.enterOuterAlt(localContext, 5)\n          {\n            this.state = 132\n            this.expression_not()\n          }\n          break\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public expression_or(): Expression_orContext {\n    const localContext = new Expression_orContext(this.context, this.state)\n    this.enterRule(localContext, 24, FCSParser.RULE_expression_or)\n    try {\n      let alternative: number\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 139\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context)) {\n          case 1:\n            {\n              this.state = 135\n              this.expression_basic()\n            }\n            break\n          case 2:\n            {\n              this.state = 136\n              this.expression_group()\n            }\n            break\n          case 3:\n            {\n              this.state = 137\n              this.expression_and()\n            }\n            break\n          case 4:\n            {\n              this.state = 138\n              this.expression_not()\n            }\n            break\n        }\n        this.state = 148\n        this.errorHandler.sync(this)\n        alternative = 1\n        do {\n          switch (alternative) {\n            case 1:\n              {\n                {\n                  this.state = 141\n                  this.match(FCSParser.OR)\n                  this.state = 146\n                  this.errorHandler.sync(this)\n                  switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context)) {\n                    case 1:\n                      {\n                        this.state = 142\n                        this.expression_basic()\n                      }\n                      break\n                    case 2:\n                      {\n                        this.state = 143\n                        this.expression_group()\n                      }\n                      break\n                    case 3:\n                      {\n                        this.state = 144\n                        this.expression_and()\n                      }\n                      break\n                    case 4:\n                      {\n                        this.state = 145\n                        this.expression_not()\n                      }\n                      break\n                  }\n                }\n              }\n              break\n            default:\n              throw new NoViableAltException(this)\n          }\n          this.state = 150\n          this.errorHandler.sync(this)\n          alternative = this.interpreter.adaptivePredict(this.tokenStream, 19, this.context)\n        } while (alternative !== 2 && alternative !== ATN.INVALID_ALT_NUMBER)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public expression_and(): Expression_andContext {\n    const localContext = new Expression_andContext(this.context, this.state)\n    this.enterRule(localContext, 26, FCSParser.RULE_expression_and)\n    try {\n      let alternative: number\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 155\n        this.errorHandler.sync(this)\n        switch (this.tokenStream.LA(1)) {\n          case FCSParser.WITHIN:\n          case FCSParser.SIMPLE_WITHIN_SCOPE:\n          case FCSParser.REGEXP_FLAGS:\n          case FCSParser.IDENTIFIER:\n            {\n              this.state = 152\n              this.expression_basic()\n            }\n            break\n          case FCSParser.L_PAREN:\n            {\n              this.state = 153\n              this.expression_group()\n            }\n            break\n          case FCSParser.NOT:\n            {\n              this.state = 154\n              this.expression_not()\n            }\n            break\n          default:\n            throw new NoViableAltException(this)\n        }\n        this.state = 164\n        this.errorHandler.sync(this)\n        alternative = 1\n        do {\n          switch (alternative) {\n            case 1:\n              {\n                {\n                  this.state = 157\n                  this.match(FCSParser.AND)\n                  this.state = 162\n                  this.errorHandler.sync(this)\n                  switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context)) {\n                    case 1:\n                      {\n                        this.state = 158\n                        this.expression_basic()\n                      }\n                      break\n                    case 2:\n                      {\n                        this.state = 159\n                        this.expression_group()\n                      }\n                      break\n                    case 3:\n                      {\n                        this.state = 160\n                        this.expression_or()\n                      }\n                      break\n                    case 4:\n                      {\n                        this.state = 161\n                        this.expression_not()\n                      }\n                      break\n                  }\n                }\n              }\n              break\n            default:\n              throw new NoViableAltException(this)\n          }\n          this.state = 166\n          this.errorHandler.sync(this)\n          alternative = this.interpreter.adaptivePredict(this.tokenStream, 22, this.context)\n        } while (alternative !== 2 && alternative !== ATN.INVALID_ALT_NUMBER)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public expression_group(): Expression_groupContext {\n    const localContext = new Expression_groupContext(this.context, this.state)\n    this.enterRule(localContext, 28, FCSParser.RULE_expression_group)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 168\n        this.match(FCSParser.L_PAREN)\n        this.state = 174\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context)) {\n          case 1:\n            {\n              this.state = 169\n              this.expression_basic()\n            }\n            break\n          case 2:\n            {\n              this.state = 170\n              this.expression_group()\n            }\n            break\n          case 3:\n            {\n              this.state = 171\n              this.expression_or()\n            }\n            break\n          case 4:\n            {\n              this.state = 172\n              this.expression_and()\n            }\n            break\n          case 5:\n            {\n              this.state = 173\n              this.expression_not()\n            }\n            break\n        }\n        this.state = 176\n        this.match(FCSParser.R_PAREN)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public expression_not(): Expression_notContext {\n    const localContext = new Expression_notContext(this.context, this.state)\n    this.enterRule(localContext, 30, FCSParser.RULE_expression_not)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 178\n        this.match(FCSParser.NOT)\n        this.state = 184\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context)) {\n          case 1:\n            {\n              this.state = 179\n              this.expression_basic()\n            }\n            break\n          case 2:\n            {\n              this.state = 180\n              this.expression_group()\n            }\n            break\n          case 3:\n            {\n              this.state = 181\n              this.expression_not()\n            }\n            break\n          case 4:\n            {\n              this.state = 182\n              this.expression_or()\n            }\n            break\n          case 5:\n            {\n              this.state = 183\n              this.expression_and()\n            }\n            break\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public expression_basic(): Expression_basicContext {\n    const localContext = new Expression_basicContext(this.context, this.state)\n    this.enterRule(localContext, 32, FCSParser.RULE_expression_basic)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 186\n        this.attribute()\n        this.state = 187\n        _la = this.tokenStream.LA(1)\n        if (!(_la === 15 || _la === 16)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n        this.state = 188\n        this.regexp()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public attribute(): AttributeContext {\n    const localContext = new AttributeContext(this.context, this.state)\n    this.enterRule(localContext, 34, FCSParser.RULE_attribute)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 193\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context)) {\n          case 1:\n            {\n              this.state = 190\n              this.qualifier()\n              this.state = 191\n              this.match(FCSParser.COLON)\n            }\n            break\n        }\n        this.state = 195\n        this.identifier()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public qualifier(): QualifierContext {\n    const localContext = new QualifierContext(this.context, this.state)\n    this.enterRule(localContext, 36, FCSParser.RULE_qualifier)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 197\n        _la = this.tokenStream.LA(1)\n        if (!((_la & ~0x1f) === 0 && ((1 << _la) & 3932160) !== 0)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public identifier(): IdentifierContext {\n    const localContext = new IdentifierContext(this.context, this.state)\n    this.enterRule(localContext, 38, FCSParser.RULE_identifier)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 199\n        _la = this.tokenStream.LA(1)\n        if (!((_la & ~0x1f) === 0 && ((1 << _la) & 3932160) !== 0)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public regexp(): RegexpContext {\n    const localContext = new RegexpContext(this.context, this.state)\n    this.enterRule(localContext, 40, FCSParser.RULE_regexp)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 201\n        this.regexp_pattern()\n        this.state = 204\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if (_la === 8) {\n          {\n            this.state = 202\n            this.match(FCSParser.FWD_SLASH)\n            this.state = 203\n            this.regexp_flag()\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public regexp_pattern(): Regexp_patternContext {\n    const localContext = new Regexp_patternContext(this.context, this.state)\n    this.enterRule(localContext, 42, FCSParser.RULE_regexp_pattern)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 206\n        this.match(FCSParser.REGEXP)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public regexp_flag(): Regexp_flagContext {\n    const localContext = new Regexp_flagContext(this.context, this.state)\n    this.enterRule(localContext, 44, FCSParser.RULE_regexp_flag)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 208\n        this.match(FCSParser.REGEXP_FLAGS)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n\n  public static readonly _serializedATN: number[] = [\n    4, 1, 25, 211, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7,\n    6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13,\n    2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,\n    20, 2, 21, 7, 21, 2, 22, 7, 22, 1, 0, 1, 0, 1, 0, 3, 0, 50, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n    1, 1, 3, 1, 58, 8, 1, 1, 2, 1, 2, 1, 2, 3, 2, 63, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 69, 8, 2,\n    4, 2, 71, 8, 2, 11, 2, 12, 2, 72, 1, 3, 1, 3, 4, 3, 77, 8, 3, 11, 3, 12, 3, 78, 1, 4, 1, 4, 1,\n    4, 3, 4, 84, 8, 4, 1, 4, 1, 4, 3, 4, 88, 8, 4, 1, 5, 1, 5, 3, 5, 92, 8, 5, 1, 5, 3, 5, 95, 8, 5,\n    1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 103, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 110, 8,\n    6, 3, 6, 112, 8, 6, 1, 6, 3, 6, 115, 8, 6, 1, 7, 1, 7, 1, 8, 1, 8, 3, 8, 121, 8, 8, 1, 8, 1, 8,\n    1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 134, 8, 11, 1, 12, 1, 12, 1,\n    12, 1, 12, 3, 12, 140, 8, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 147, 8, 12, 4, 12, 149,\n    8, 12, 11, 12, 12, 12, 150, 1, 13, 1, 13, 1, 13, 3, 13, 156, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13,\n    1, 13, 3, 13, 163, 8, 13, 4, 13, 165, 8, 13, 11, 13, 12, 13, 166, 1, 14, 1, 14, 1, 14, 1, 14, 1,\n    14, 1, 14, 3, 14, 175, 8, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15,\n    185, 8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 194, 8, 17, 1, 17, 1, 17, 1,\n    18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 3, 20, 205, 8, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1,\n    22, 0, 0, 23, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,\n    44, 0, 2, 1, 0, 15, 16, 1, 0, 18, 21, 237, 0, 46, 1, 0, 0, 0, 2, 57, 1, 0, 0, 0, 4, 62, 1, 0, 0,\n    0, 6, 76, 1, 0, 0, 0, 8, 80, 1, 0, 0, 0, 10, 91, 1, 0, 0, 0, 12, 114, 1, 0, 0, 0, 14, 116, 1, 0,\n    0, 0, 16, 118, 1, 0, 0, 0, 18, 124, 1, 0, 0, 0, 20, 126, 1, 0, 0, 0, 22, 133, 1, 0, 0, 0, 24,\n    139, 1, 0, 0, 0, 26, 155, 1, 0, 0, 0, 28, 168, 1, 0, 0, 0, 30, 178, 1, 0, 0, 0, 32, 186, 1, 0,\n    0, 0, 34, 193, 1, 0, 0, 0, 36, 197, 1, 0, 0, 0, 38, 199, 1, 0, 0, 0, 40, 201, 1, 0, 0, 0, 42,\n    206, 1, 0, 0, 0, 44, 208, 1, 0, 0, 0, 46, 49, 3, 2, 1, 0, 47, 48, 5, 18, 0, 0, 48, 50, 3, 18, 9,\n    0, 49, 47, 1, 0, 0, 0, 49, 50, 1, 0, 0, 0, 50, 51, 1, 0, 0, 0, 51, 52, 5, 0, 0, 1, 52, 1, 1, 0,\n    0, 0, 53, 58, 3, 10, 5, 0, 54, 58, 3, 8, 4, 0, 55, 58, 3, 6, 3, 0, 56, 58, 3, 4, 2, 0, 57, 53,\n    1, 0, 0, 0, 57, 54, 1, 0, 0, 0, 57, 55, 1, 0, 0, 0, 57, 56, 1, 0, 0, 0, 58, 3, 1, 0, 0, 0, 59,\n    63, 3, 10, 5, 0, 60, 63, 3, 6, 3, 0, 61, 63, 3, 8, 4, 0, 62, 59, 1, 0, 0, 0, 62, 60, 1, 0, 0, 0,\n    62, 61, 1, 0, 0, 0, 63, 70, 1, 0, 0, 0, 64, 68, 5, 5, 0, 0, 65, 69, 3, 10, 5, 0, 66, 69, 3, 6,\n    3, 0, 67, 69, 3, 8, 4, 0, 68, 65, 1, 0, 0, 0, 68, 66, 1, 0, 0, 0, 68, 67, 1, 0, 0, 0, 69, 71, 1,\n    0, 0, 0, 70, 64, 1, 0, 0, 0, 71, 72, 1, 0, 0, 0, 72, 70, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 5,\n    1, 0, 0, 0, 74, 77, 3, 10, 5, 0, 75, 77, 3, 8, 4, 0, 76, 74, 1, 0, 0, 0, 76, 75, 1, 0, 0, 0, 77,\n    78, 1, 0, 0, 0, 78, 76, 1, 0, 0, 0, 78, 79, 1, 0, 0, 0, 79, 7, 1, 0, 0, 0, 80, 83, 5, 1, 0, 0,\n    81, 84, 3, 4, 2, 0, 82, 84, 3, 6, 3, 0, 83, 81, 1, 0, 0, 0, 83, 82, 1, 0, 0, 0, 84, 85, 1, 0, 0,\n    0, 85, 87, 5, 2, 0, 0, 86, 88, 3, 12, 6, 0, 87, 86, 1, 0, 0, 0, 87, 88, 1, 0, 0, 0, 88, 9, 1, 0,\n    0, 0, 89, 92, 3, 14, 7, 0, 90, 92, 3, 16, 8, 0, 91, 89, 1, 0, 0, 0, 91, 90, 1, 0, 0, 0, 92, 94,\n    1, 0, 0, 0, 93, 95, 3, 12, 6, 0, 94, 93, 1, 0, 0, 0, 94, 95, 1, 0, 0, 0, 95, 11, 1, 0, 0, 0, 96,\n    115, 5, 11, 0, 0, 97, 115, 5, 12, 0, 0, 98, 115, 5, 13, 0, 0, 99, 111, 5, 9, 0, 0, 100, 112, 5,\n    22, 0, 0, 101, 103, 5, 22, 0, 0, 102, 101, 1, 0, 0, 0, 102, 103, 1, 0, 0, 0, 103, 104, 1, 0, 0,\n    0, 104, 105, 5, 14, 0, 0, 105, 112, 5, 22, 0, 0, 106, 107, 5, 22, 0, 0, 107, 109, 5, 14, 0, 0,\n    108, 110, 5, 22, 0, 0, 109, 108, 1, 0, 0, 0, 109, 110, 1, 0, 0, 0, 110, 112, 1, 0, 0, 0, 111,\n    100, 1, 0, 0, 0, 111, 102, 1, 0, 0, 0, 111, 106, 1, 0, 0, 0, 112, 113, 1, 0, 0, 0, 113, 115, 5,\n    10, 0, 0, 114, 96, 1, 0, 0, 0, 114, 97, 1, 0, 0, 0, 114, 98, 1, 0, 0, 0, 114, 99, 1, 0, 0, 0,\n    115, 13, 1, 0, 0, 0, 116, 117, 3, 40, 20, 0, 117, 15, 1, 0, 0, 0, 118, 120, 5, 3, 0, 0, 119,\n    121, 3, 22, 11, 0, 120, 119, 1, 0, 0, 0, 120, 121, 1, 0, 0, 0, 121, 122, 1, 0, 0, 0, 122, 123,\n    5, 4, 0, 0, 123, 17, 1, 0, 0, 0, 124, 125, 3, 20, 10, 0, 125, 19, 1, 0, 0, 0, 126, 127, 5, 19,\n    0, 0, 127, 21, 1, 0, 0, 0, 128, 134, 3, 32, 16, 0, 129, 134, 3, 28, 14, 0, 130, 134, 3, 24, 12,\n    0, 131, 134, 3, 26, 13, 0, 132, 134, 3, 30, 15, 0, 133, 128, 1, 0, 0, 0, 133, 129, 1, 0, 0, 0,\n    133, 130, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 133, 132, 1, 0, 0, 0, 134, 23, 1, 0, 0, 0, 135, 140,\n    3, 32, 16, 0, 136, 140, 3, 28, 14, 0, 137, 140, 3, 26, 13, 0, 138, 140, 3, 30, 15, 0, 139, 135,\n    1, 0, 0, 0, 139, 136, 1, 0, 0, 0, 139, 137, 1, 0, 0, 0, 139, 138, 1, 0, 0, 0, 140, 148, 1, 0, 0,\n    0, 141, 146, 5, 5, 0, 0, 142, 147, 3, 32, 16, 0, 143, 147, 3, 28, 14, 0, 144, 147, 3, 26, 13, 0,\n    145, 147, 3, 30, 15, 0, 146, 142, 1, 0, 0, 0, 146, 143, 1, 0, 0, 0, 146, 144, 1, 0, 0, 0, 146,\n    145, 1, 0, 0, 0, 147, 149, 1, 0, 0, 0, 148, 141, 1, 0, 0, 0, 149, 150, 1, 0, 0, 0, 150, 148, 1,\n    0, 0, 0, 150, 151, 1, 0, 0, 0, 151, 25, 1, 0, 0, 0, 152, 156, 3, 32, 16, 0, 153, 156, 3, 28, 14,\n    0, 154, 156, 3, 30, 15, 0, 155, 152, 1, 0, 0, 0, 155, 153, 1, 0, 0, 0, 155, 154, 1, 0, 0, 0,\n    156, 164, 1, 0, 0, 0, 157, 162, 5, 6, 0, 0, 158, 163, 3, 32, 16, 0, 159, 163, 3, 28, 14, 0, 160,\n    163, 3, 24, 12, 0, 161, 163, 3, 30, 15, 0, 162, 158, 1, 0, 0, 0, 162, 159, 1, 0, 0, 0, 162, 160,\n    1, 0, 0, 0, 162, 161, 1, 0, 0, 0, 163, 165, 1, 0, 0, 0, 164, 157, 1, 0, 0, 0, 165, 166, 1, 0, 0,\n    0, 166, 164, 1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167, 27, 1, 0, 0, 0, 168, 174, 5, 1, 0, 0, 169,\n    175, 3, 32, 16, 0, 170, 175, 3, 28, 14, 0, 171, 175, 3, 24, 12, 0, 172, 175, 3, 26, 13, 0, 173,\n    175, 3, 30, 15, 0, 174, 169, 1, 0, 0, 0, 174, 170, 1, 0, 0, 0, 174, 171, 1, 0, 0, 0, 174, 172,\n    1, 0, 0, 0, 174, 173, 1, 0, 0, 0, 175, 176, 1, 0, 0, 0, 176, 177, 5, 2, 0, 0, 177, 29, 1, 0, 0,\n    0, 178, 184, 5, 7, 0, 0, 179, 185, 3, 32, 16, 0, 180, 185, 3, 28, 14, 0, 181, 185, 3, 30, 15, 0,\n    182, 185, 3, 24, 12, 0, 183, 185, 3, 26, 13, 0, 184, 179, 1, 0, 0, 0, 184, 180, 1, 0, 0, 0, 184,\n    181, 1, 0, 0, 0, 184, 182, 1, 0, 0, 0, 184, 183, 1, 0, 0, 0, 185, 31, 1, 0, 0, 0, 186, 187, 3,\n    34, 17, 0, 187, 188, 7, 0, 0, 0, 188, 189, 3, 40, 20, 0, 189, 33, 1, 0, 0, 0, 190, 191, 3, 36,\n    18, 0, 191, 192, 5, 17, 0, 0, 192, 194, 1, 0, 0, 0, 193, 190, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0,\n    194, 195, 1, 0, 0, 0, 195, 196, 3, 38, 19, 0, 196, 35, 1, 0, 0, 0, 197, 198, 7, 1, 0, 0, 198,\n    37, 1, 0, 0, 0, 199, 200, 7, 1, 0, 0, 200, 39, 1, 0, 0, 0, 201, 204, 3, 42, 21, 0, 202, 203, 5,\n    8, 0, 0, 203, 205, 3, 44, 22, 0, 204, 202, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 41, 1, 0, 0,\n    0, 206, 207, 5, 23, 0, 0, 207, 43, 1, 0, 0, 0, 208, 209, 5, 20, 0, 0, 209, 45, 1, 0, 0, 0, 27,\n    49, 57, 62, 68, 72, 76, 78, 83, 87, 91, 94, 102, 109, 111, 114, 120, 133, 139, 146, 150, 155,\n    162, 166, 174, 184, 193, 204,\n  ]\n\n  private static __ATN: ATN\n  public static get _ATN(): ATN {\n    if (!FCSParser.__ATN) {\n      FCSParser.__ATN = new ATNDeserializer().deserialize(FCSParser._serializedATN)\n    }\n\n    return FCSParser.__ATN\n  }\n\n  private static readonly vocabulary = new Vocabulary(\n    FCSParser.literalNames,\n    FCSParser.symbolicNames,\n    []\n  )\n\n  public override get vocabulary(): Vocabulary {\n    return FCSParser.vocabulary\n  }\n\n  private static readonly decisionsToDFA = FCSParser._ATN.decisionToState.map(\n    (ds: DecisionState, index: number) => new DFA(ds, index)\n  )\n}\n\nexport class QueryContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public main_query(): Main_queryContext {\n    return this.getRuleContext(0, Main_queryContext)!\n  }\n  public EOF(): TerminalNode {\n    return this.getToken(FCSParser.EOF, 0)!\n  }\n  public WITHIN(): TerminalNode | null {\n    return this.getToken(FCSParser.WITHIN, 0)\n  }\n  public within_part(): Within_partContext | null {\n    return this.getRuleContext(0, Within_partContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery) {\n      listener.enterQuery(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery) {\n      listener.exitQuery(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery) {\n      return visitor.visitQuery(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Main_queryContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public query_simple(): Query_simpleContext | null {\n    return this.getRuleContext(0, Query_simpleContext)\n  }\n  public query_group(): Query_groupContext | null {\n    return this.getRuleContext(0, Query_groupContext)\n  }\n  public query_sequence(): Query_sequenceContext | null {\n    return this.getRuleContext(0, Query_sequenceContext)\n  }\n  public query_disjunction(): Query_disjunctionContext | null {\n    return this.getRuleContext(0, Query_disjunctionContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_main_query\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterMain_query) {\n      listener.enterMain_query(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitMain_query) {\n      listener.exitMain_query(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitMain_query) {\n      return visitor.visitMain_query(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Query_disjunctionContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public query_simple(): Query_simpleContext[]\n  public query_simple(i: number): Query_simpleContext | null\n  public query_simple(i?: number): Query_simpleContext[] | Query_simpleContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Query_simpleContext)\n    }\n\n    return this.getRuleContext(i, Query_simpleContext)\n  }\n  public query_sequence(): Query_sequenceContext[]\n  public query_sequence(i: number): Query_sequenceContext | null\n  public query_sequence(i?: number): Query_sequenceContext[] | Query_sequenceContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Query_sequenceContext)\n    }\n\n    return this.getRuleContext(i, Query_sequenceContext)\n  }\n  public query_group(): Query_groupContext[]\n  public query_group(i: number): Query_groupContext | null\n  public query_group(i?: number): Query_groupContext[] | Query_groupContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Query_groupContext)\n    }\n\n    return this.getRuleContext(i, Query_groupContext)\n  }\n  public OR(): TerminalNode[]\n  public OR(i: number): TerminalNode | null\n  public OR(i?: number): TerminalNode | null | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(FCSParser.OR)\n    } else {\n      return this.getToken(FCSParser.OR, i)\n    }\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query_disjunction\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery_disjunction) {\n      listener.enterQuery_disjunction(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery_disjunction) {\n      listener.exitQuery_disjunction(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery_disjunction) {\n      return visitor.visitQuery_disjunction(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Query_sequenceContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public query_simple(): Query_simpleContext[]\n  public query_simple(i: number): Query_simpleContext | null\n  public query_simple(i?: number): Query_simpleContext[] | Query_simpleContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Query_simpleContext)\n    }\n\n    return this.getRuleContext(i, Query_simpleContext)\n  }\n  public query_group(): Query_groupContext[]\n  public query_group(i: number): Query_groupContext | null\n  public query_group(i?: number): Query_groupContext[] | Query_groupContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Query_groupContext)\n    }\n\n    return this.getRuleContext(i, Query_groupContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query_sequence\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery_sequence) {\n      listener.enterQuery_sequence(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery_sequence) {\n      listener.exitQuery_sequence(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery_sequence) {\n      return visitor.visitQuery_sequence(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Query_groupContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public L_PAREN(): TerminalNode {\n    return this.getToken(FCSParser.L_PAREN, 0)!\n  }\n  public R_PAREN(): TerminalNode {\n    return this.getToken(FCSParser.R_PAREN, 0)!\n  }\n  public query_disjunction(): Query_disjunctionContext | null {\n    return this.getRuleContext(0, Query_disjunctionContext)\n  }\n  public query_sequence(): Query_sequenceContext | null {\n    return this.getRuleContext(0, Query_sequenceContext)\n  }\n  public quantifier(): QuantifierContext | null {\n    return this.getRuleContext(0, QuantifierContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query_group\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery_group) {\n      listener.enterQuery_group(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery_group) {\n      listener.exitQuery_group(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery_group) {\n      return visitor.visitQuery_group(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Query_simpleContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public query_implicit(): Query_implicitContext | null {\n    return this.getRuleContext(0, Query_implicitContext)\n  }\n  public query_segment(): Query_segmentContext | null {\n    return this.getRuleContext(0, Query_segmentContext)\n  }\n  public quantifier(): QuantifierContext | null {\n    return this.getRuleContext(0, QuantifierContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query_simple\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery_simple) {\n      listener.enterQuery_simple(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery_simple) {\n      listener.exitQuery_simple(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery_simple) {\n      return visitor.visitQuery_simple(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class QuantifierContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public Q_ONE_OR_MORE(): TerminalNode | null {\n    return this.getToken(FCSParser.Q_ONE_OR_MORE, 0)\n  }\n  public Q_ZERO_OR_MORE(): TerminalNode | null {\n    return this.getToken(FCSParser.Q_ZERO_OR_MORE, 0)\n  }\n  public Q_ZERO_OR_ONE(): TerminalNode | null {\n    return this.getToken(FCSParser.Q_ZERO_OR_ONE, 0)\n  }\n  public L_CURLY_BRACKET(): TerminalNode | null {\n    return this.getToken(FCSParser.L_CURLY_BRACKET, 0)\n  }\n  public R_CURLY_BRACKET(): TerminalNode | null {\n    return this.getToken(FCSParser.R_CURLY_BRACKET, 0)\n  }\n  public INTEGER(): TerminalNode[]\n  public INTEGER(i: number): TerminalNode | null\n  public INTEGER(i?: number): TerminalNode | null | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(FCSParser.INTEGER)\n    } else {\n      return this.getToken(FCSParser.INTEGER, i)\n    }\n  }\n  public Q_COMMA(): TerminalNode | null {\n    return this.getToken(FCSParser.Q_COMMA, 0)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_quantifier\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuantifier) {\n      listener.enterQuantifier(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuantifier) {\n      listener.exitQuantifier(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuantifier) {\n      return visitor.visitQuantifier(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Query_implicitContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public regexp(): RegexpContext {\n    return this.getRuleContext(0, RegexpContext)!\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query_implicit\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery_implicit) {\n      listener.enterQuery_implicit(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery_implicit) {\n      listener.exitQuery_implicit(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery_implicit) {\n      return visitor.visitQuery_implicit(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Query_segmentContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public L_SQUARE_BRACKET(): TerminalNode {\n    return this.getToken(FCSParser.L_SQUARE_BRACKET, 0)!\n  }\n  public R_SQUARE_BRACKET(): TerminalNode {\n    return this.getToken(FCSParser.R_SQUARE_BRACKET, 0)!\n  }\n  public expression(): ExpressionContext | null {\n    return this.getRuleContext(0, ExpressionContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_query_segment\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQuery_segment) {\n      listener.enterQuery_segment(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQuery_segment) {\n      listener.exitQuery_segment(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery_segment) {\n      return visitor.visitQuery_segment(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Within_partContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public within_part_simple(): Within_part_simpleContext {\n    return this.getRuleContext(0, Within_part_simpleContext)!\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_within_part\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterWithin_part) {\n      listener.enterWithin_part(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitWithin_part) {\n      listener.exitWithin_part(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitWithin_part) {\n      return visitor.visitWithin_part(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Within_part_simpleContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public SIMPLE_WITHIN_SCOPE(): TerminalNode {\n    return this.getToken(FCSParser.SIMPLE_WITHIN_SCOPE, 0)!\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_within_part_simple\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterWithin_part_simple) {\n      listener.enterWithin_part_simple(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitWithin_part_simple) {\n      listener.exitWithin_part_simple(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitWithin_part_simple) {\n      return visitor.visitWithin_part_simple(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class ExpressionContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public expression_basic(): Expression_basicContext | null {\n    return this.getRuleContext(0, Expression_basicContext)\n  }\n  public expression_group(): Expression_groupContext | null {\n    return this.getRuleContext(0, Expression_groupContext)\n  }\n  public expression_or(): Expression_orContext | null {\n    return this.getRuleContext(0, Expression_orContext)\n  }\n  public expression_and(): Expression_andContext | null {\n    return this.getRuleContext(0, Expression_andContext)\n  }\n  public expression_not(): Expression_notContext | null {\n    return this.getRuleContext(0, Expression_notContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_expression\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterExpression) {\n      listener.enterExpression(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitExpression) {\n      listener.exitExpression(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitExpression) {\n      return visitor.visitExpression(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Expression_orContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public expression_basic(): Expression_basicContext[]\n  public expression_basic(i: number): Expression_basicContext | null\n  public expression_basic(i?: number): Expression_basicContext[] | Expression_basicContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_basicContext)\n    }\n\n    return this.getRuleContext(i, Expression_basicContext)\n  }\n  public expression_group(): Expression_groupContext[]\n  public expression_group(i: number): Expression_groupContext | null\n  public expression_group(i?: number): Expression_groupContext[] | Expression_groupContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_groupContext)\n    }\n\n    return this.getRuleContext(i, Expression_groupContext)\n  }\n  public expression_and(): Expression_andContext[]\n  public expression_and(i: number): Expression_andContext | null\n  public expression_and(i?: number): Expression_andContext[] | Expression_andContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_andContext)\n    }\n\n    return this.getRuleContext(i, Expression_andContext)\n  }\n  public expression_not(): Expression_notContext[]\n  public expression_not(i: number): Expression_notContext | null\n  public expression_not(i?: number): Expression_notContext[] | Expression_notContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_notContext)\n    }\n\n    return this.getRuleContext(i, Expression_notContext)\n  }\n  public OR(): TerminalNode[]\n  public OR(i: number): TerminalNode | null\n  public OR(i?: number): TerminalNode | null | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(FCSParser.OR)\n    } else {\n      return this.getToken(FCSParser.OR, i)\n    }\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_expression_or\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterExpression_or) {\n      listener.enterExpression_or(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitExpression_or) {\n      listener.exitExpression_or(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitExpression_or) {\n      return visitor.visitExpression_or(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Expression_andContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public expression_basic(): Expression_basicContext[]\n  public expression_basic(i: number): Expression_basicContext | null\n  public expression_basic(i?: number): Expression_basicContext[] | Expression_basicContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_basicContext)\n    }\n\n    return this.getRuleContext(i, Expression_basicContext)\n  }\n  public expression_group(): Expression_groupContext[]\n  public expression_group(i: number): Expression_groupContext | null\n  public expression_group(i?: number): Expression_groupContext[] | Expression_groupContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_groupContext)\n    }\n\n    return this.getRuleContext(i, Expression_groupContext)\n  }\n  public expression_not(): Expression_notContext[]\n  public expression_not(i: number): Expression_notContext | null\n  public expression_not(i?: number): Expression_notContext[] | Expression_notContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_notContext)\n    }\n\n    return this.getRuleContext(i, Expression_notContext)\n  }\n  public AND(): TerminalNode[]\n  public AND(i: number): TerminalNode | null\n  public AND(i?: number): TerminalNode | null | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(FCSParser.AND)\n    } else {\n      return this.getToken(FCSParser.AND, i)\n    }\n  }\n  public expression_or(): Expression_orContext[]\n  public expression_or(i: number): Expression_orContext | null\n  public expression_or(i?: number): Expression_orContext[] | Expression_orContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Expression_orContext)\n    }\n\n    return this.getRuleContext(i, Expression_orContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_expression_and\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterExpression_and) {\n      listener.enterExpression_and(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitExpression_and) {\n      listener.exitExpression_and(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitExpression_and) {\n      return visitor.visitExpression_and(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Expression_groupContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public L_PAREN(): TerminalNode {\n    return this.getToken(FCSParser.L_PAREN, 0)!\n  }\n  public R_PAREN(): TerminalNode {\n    return this.getToken(FCSParser.R_PAREN, 0)!\n  }\n  public expression_basic(): Expression_basicContext | null {\n    return this.getRuleContext(0, Expression_basicContext)\n  }\n  public expression_group(): Expression_groupContext | null {\n    return this.getRuleContext(0, Expression_groupContext)\n  }\n  public expression_or(): Expression_orContext | null {\n    return this.getRuleContext(0, Expression_orContext)\n  }\n  public expression_and(): Expression_andContext | null {\n    return this.getRuleContext(0, Expression_andContext)\n  }\n  public expression_not(): Expression_notContext | null {\n    return this.getRuleContext(0, Expression_notContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_expression_group\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterExpression_group) {\n      listener.enterExpression_group(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitExpression_group) {\n      listener.exitExpression_group(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitExpression_group) {\n      return visitor.visitExpression_group(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Expression_notContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public NOT(): TerminalNode {\n    return this.getToken(FCSParser.NOT, 0)!\n  }\n  public expression_basic(): Expression_basicContext | null {\n    return this.getRuleContext(0, Expression_basicContext)\n  }\n  public expression_group(): Expression_groupContext | null {\n    return this.getRuleContext(0, Expression_groupContext)\n  }\n  public expression_not(): Expression_notContext | null {\n    return this.getRuleContext(0, Expression_notContext)\n  }\n  public expression_or(): Expression_orContext | null {\n    return this.getRuleContext(0, Expression_orContext)\n  }\n  public expression_and(): Expression_andContext | null {\n    return this.getRuleContext(0, Expression_andContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_expression_not\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterExpression_not) {\n      listener.enterExpression_not(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitExpression_not) {\n      listener.exitExpression_not(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitExpression_not) {\n      return visitor.visitExpression_not(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Expression_basicContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public attribute(): AttributeContext {\n    return this.getRuleContext(0, AttributeContext)!\n  }\n  public regexp(): RegexpContext {\n    return this.getRuleContext(0, RegexpContext)!\n  }\n  public OPERATOR_EQ(): TerminalNode | null {\n    return this.getToken(FCSParser.OPERATOR_EQ, 0)\n  }\n  public OPERATOR_NE(): TerminalNode | null {\n    return this.getToken(FCSParser.OPERATOR_NE, 0)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_expression_basic\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterExpression_basic) {\n      listener.enterExpression_basic(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitExpression_basic) {\n      listener.exitExpression_basic(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitExpression_basic) {\n      return visitor.visitExpression_basic(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class AttributeContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public identifier(): IdentifierContext {\n    return this.getRuleContext(0, IdentifierContext)!\n  }\n  public qualifier(): QualifierContext | null {\n    return this.getRuleContext(0, QualifierContext)\n  }\n  public COLON(): TerminalNode | null {\n    return this.getToken(FCSParser.COLON, 0)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_attribute\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterAttribute) {\n      listener.enterAttribute(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitAttribute) {\n      listener.exitAttribute(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitAttribute) {\n      return visitor.visitAttribute(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class QualifierContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public IDENTIFIER(): TerminalNode | null {\n    return this.getToken(FCSParser.IDENTIFIER, 0)\n  }\n  public WITHIN(): TerminalNode | null {\n    return this.getToken(FCSParser.WITHIN, 0)\n  }\n  public SIMPLE_WITHIN_SCOPE(): TerminalNode | null {\n    return this.getToken(FCSParser.SIMPLE_WITHIN_SCOPE, 0)\n  }\n  public REGEXP_FLAGS(): TerminalNode | null {\n    return this.getToken(FCSParser.REGEXP_FLAGS, 0)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_qualifier\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterQualifier) {\n      listener.enterQualifier(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitQualifier) {\n      listener.exitQualifier(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitQualifier) {\n      return visitor.visitQualifier(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class IdentifierContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public IDENTIFIER(): TerminalNode | null {\n    return this.getToken(FCSParser.IDENTIFIER, 0)\n  }\n  public WITHIN(): TerminalNode | null {\n    return this.getToken(FCSParser.WITHIN, 0)\n  }\n  public SIMPLE_WITHIN_SCOPE(): TerminalNode | null {\n    return this.getToken(FCSParser.SIMPLE_WITHIN_SCOPE, 0)\n  }\n  public REGEXP_FLAGS(): TerminalNode | null {\n    return this.getToken(FCSParser.REGEXP_FLAGS, 0)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_identifier\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterIdentifier) {\n      listener.enterIdentifier(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitIdentifier) {\n      listener.exitIdentifier(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitIdentifier) {\n      return visitor.visitIdentifier(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class RegexpContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public regexp_pattern(): Regexp_patternContext {\n    return this.getRuleContext(0, Regexp_patternContext)!\n  }\n  public FWD_SLASH(): TerminalNode | null {\n    return this.getToken(FCSParser.FWD_SLASH, 0)\n  }\n  public regexp_flag(): Regexp_flagContext | null {\n    return this.getRuleContext(0, Regexp_flagContext)\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_regexp\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterRegexp) {\n      listener.enterRegexp(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitRegexp) {\n      listener.exitRegexp(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitRegexp) {\n      return visitor.visitRegexp(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Regexp_patternContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public REGEXP(): TerminalNode {\n    return this.getToken(FCSParser.REGEXP, 0)!\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_regexp_pattern\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterRegexp_pattern) {\n      listener.enterRegexp_pattern(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitRegexp_pattern) {\n      listener.exitRegexp_pattern(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitRegexp_pattern) {\n      return visitor.visitRegexp_pattern(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Regexp_flagContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public REGEXP_FLAGS(): TerminalNode {\n    return this.getToken(FCSParser.REGEXP_FLAGS, 0)!\n  }\n  public override get ruleIndex(): number {\n    return FCSParser.RULE_regexp_flag\n  }\n  public override enterRule(listener: FCSParserListener): void {\n    if (listener.enterRegexp_flag) {\n      listener.enterRegexp_flag(this)\n    }\n  }\n  public override exitRule(listener: FCSParserListener): void {\n    if (listener.exitRegexp_flag) {\n      listener.exitRegexp_flag(this)\n    }\n  }\n  public override accept<Result>(visitor: FCSParserVisitor<Result>): Result | null {\n    if (visitor.visitRegexp_flag) {\n      return visitor.visitRegexp_flag(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n","import {\n  ATNSimulator,\n  BaseErrorListener,\n  CommonTokenStream,\n  ErrorNode,\n  Lexer,\n  Parser,\n  ParserRuleContext,\n  ParseTree,\n  RecognitionException,\n  Recognizer,\n  TerminalNode,\n  Token,\n} from 'antlr4ng'\n\n// --------------------------------------------------------------------------\n\nexport class QuerySyntaxErrorListener extends BaseErrorListener {\n  public errors: string[] = []\n\n  public override syntaxError<S extends Token, T extends ATNSimulator>(\n    _recognizer: Recognizer<T>,\n    _offendingSymbol: S | null,\n    _line: number,\n    charPositionInLine: number,\n    msg: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _e: RecognitionException | null\n  ): void {\n    // console.debug('syntaxError', offendingSymbol, msg)\n    this.errors.push(`Syntax error: ${msg} at position ${charPositionInLine}`)\n  }\n}\n\n// --------------------------------------------------------------------------\n\nexport function isCursorOnContext(\n  ctx: ParseTree | null,\n  cursorPos: [number, number] | number | undefined\n) {\n  if (!ctx) return false\n  if (cursorPos === undefined) return false\n\n  const cursorStart = Array.isArray(cursorPos) ? cursorPos[0] : cursorPos\n  const cursorEnd = Array.isArray(cursorPos) ? cursorPos[1] : cursorPos\n\n  if (ctx instanceof ParserRuleContext && ctx.start !== null && ctx.stop !== null) {\n    const ctxStart = ctx.start.start\n    const ctxEnd = ctx.stop.stop + 1\n\n    // cursor if inside\n    if (ctxStart < cursorStart && cursorStart < ctxEnd) return true\n    if (ctxStart < cursorEnd && cursorEnd < ctxEnd) return true\n    // single cursor, hit if directly besides; for ranges only if overlap (above condition)\n    if (cursorStart === cursorEnd && (ctxStart === cursorEnd || cursorEnd === ctxEnd)) return true\n    // if cursor range across\n    if (cursorStart <= ctxStart && ctxEnd <= cursorEnd) return true\n  }\n\n  return false\n}\n\n// --------------------------------------------------------------------------\n// debugging stuff\n\ninterface _TreeItem {\n  depth: number\n  index: number\n  type: 'ParserRuleContext' | 'ErrorNode' | 'TerminalNode'\n  name: string\n  content: string\n  start: Token | null\n  end: Token | null\n}\n\nexport function _getTreeItems(\n  tree: ParseTree,\n  parser: Parser,\n  lexer: Lexer,\n  depth: number = 0,\n  childNr: number = 0\n) {\n  const items: _TreeItem[] = []\n\n  if (tree instanceof ParserRuleContext) {\n    const ruleName = parser.ruleNames[tree.ruleIndex]\n    items.push({\n      depth: depth, // tree.depth()?\n      index: childNr,\n      type: 'ParserRuleContext',\n      name: ruleName,\n      content: parser.inputStream.getTextFromContext(tree), //,lexer.inputStream.getTextFromInterval(tree.getSourceInterval()),\n      start: tree.start,\n      end: tree.stop,\n    })\n\n    for (let i = 0; i < tree.getChildCount(); i++) {\n      const child = tree.getChild(i)\n      if (!child) continue\n      const childItems = _getTreeItems(child, parser, lexer, depth + 1, i)\n      items.push(...childItems)\n    }\n  } else if (tree instanceof ErrorNode) {\n    items.push({\n      depth: depth,\n      index: childNr,\n      type: 'ErrorNode',\n      name: 'error',\n      content: tree.toString(),\n      start: tree.symbol,\n      end: tree.symbol,\n    })\n  } else if (tree instanceof TerminalNode && tree.symbol.type !== -1) {\n    items.push({\n      depth: depth,\n      index: childNr,\n      type: 'TerminalNode',\n      name: lexer.vocabulary.getSymbolicName(tree.symbol.type) ?? '',\n      content: tree.symbol.text ?? '',\n      start: tree.symbol,\n      end: tree.symbol,\n    })\n  }\n\n  return items\n}\n\nexport function _formatTreeItems(items: _TreeItem[]) {\n  const maxDepth = Math.max(...items.map((item) => item.depth))\n  const maxLenName = Math.max(...items.map((item) => item.name.length))\n  const maxIndex = Math.max(...items.map((item) => item.end?.stop ?? 0))\n\n  // NOTE: sort for easier structure, but harder to read dependency\n  // items.sort((a, b) => a.depth - b.depth)\n\n  const tree: string[] = []\n  for (const item of items) {\n    // skip terminals and errors\n    // if (item.type === 'TerminalNode') continue\n    // if (item.type === 'ErrorNode') continue\n    // filter out fine grained rules\n    // if (['???'].includes(item.name)) continue\n\n    // fcs\n    // if (['identifier', 'qualifier', 'regexp_pattern', 'regexp_flag'].includes(item.name)) continue\n    // if (['regexp', 'attribute', 'within_part_simple'].includes(item.name)) continue\n    // lex\n    // if (['simple_name', 'relation_symbol', 'relation'].includes(item.name)) continue\n    // if (['index', 'search_term', 'relation_modified'].includes(item.name)) continue\n\n    // NOTE: indexes are inclusive\n    const ruleTree = `${' '.repeat(item.depth)}(${item.depth\n      .toString()\n      .padStart(Math.floor(Math.log10(maxDepth)) + 1, ' ')})#${item.index\n      .toString()\n      .padEnd(2, ' ')} ${item.name.padEnd(maxLenName, ' ')}${' '.repeat(maxDepth - item.depth)}`\n    const indexes = `T[${item.start?.tokenIndex\n      .toString()\n      .padStart(Math.floor(Math.log10(maxIndex)) + 1, ' ')}:${item.end?.tokenIndex\n      .toString()\n      .padStart(Math.floor(Math.log10(maxIndex)) + 1, ' ')}] C[${item.start?.start\n      .toString()\n      .padStart(Math.floor(Math.log10(maxIndex)) + 1, ' ')}:${item.end?.stop\n      .toString()\n      .padStart(Math.floor(Math.log10(maxIndex)) + 1, ' ')}]`\n    const content = `${' '.repeat(Math.max(0, item.start?.start ?? 0))}${item.content}`\n    tree.push(`${ruleTree} ${indexes} # ${content}`)\n  }\n  return tree.join('\\n')\n}\n\n// Antlr4ng code generator will add additional properties\ntype ConcreteLexer = Lexer & {\n  channelNames: ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'][]\n  symbolicNames: (null | string)[]\n}\n\nexport function _dumpTokenStream(tokenStream: CommonTokenStream, lexer: ConcreteLexer) {\n  tokenStream\n    .getTokens()\n    .map((token) =>\n      console.debug(\n        'Token: [%i:%i]#%s %s %O',\n        token.start,\n        token.stop,\n        token.channel !== 0 ? lexer.channelNames[token.channel] : '',\n        lexer.symbolicNames[token.type],\n        token.text\n      )\n    )\n}\n\n// --------------------------------------------------------------------------\n","import {\n  Expression_andContext,\n  Expression_basicContext,\n  Expression_groupContext,\n  Expression_notContext,\n  Expression_orContext,\n} from '@/parsers/FCSParser'\nimport { type Resource } from '@/utils/api'\n\n// --------------------------------------------------------------------------\n\nexport type ExpressionListChild =\n  | Expression_notContext\n  | Expression_groupContext\n  | Expression_orContext\n  | Expression_andContext\nexport type ExpressionChild = ExpressionListChild | Expression_basicContext\n\nexport type QuantifierChoicesType = (typeof QUANTIFIER_CHOICES)[number]['id']\nexport type LayerValueOptionsType = (typeof LAYER_VALUE_OPTIONS)[number]['id']\nexport type ExpressionOperatorsType = (typeof EXPRESSION_OPERATORS)[number]['id']\n\nexport type AdvancedLayerType = (typeof ADVANCED_LAYERS)[number]['id']\nexport type NewQuerySegmentType = (typeof NEW_QUERY_SEGMENTS)[number]['id']\nexport type NewExpressionType = (typeof NEW_EXPRESSIONS)[number]['id']\nexport type ChangeToExpressionListType = (typeof CHANGE_TO_EXPRESSION_LIST)[number]['id']\nexport type WrapExpressionType = (typeof WRAP_EXPRESSION)[number]['id']\n\nexport interface ResourceLayerIDInfo {\n  resultIDs: string[]\n  qualifiers: string[]\n}\nexport interface ResourcesWithLayerIDInfo {\n  resource: Resource\n  layerIDs: ResourceLayerIDInfo\n}\nexport interface LayerInfo {\n  resources: ResourcesWithLayerIDInfo[]\n  qualifiers: Map<string, Resource[]>\n}\n\n// --------------------------------------------------------------------------\n\nexport const ADVANCED_LAYERS = [\n  { id: 'text', label: 'textual representation' },\n  { id: 'lemma', label: 'lemmatization of tokens' },\n  { id: 'pos', label: 'part-of-speech UD v2.0 tagset' },\n  { id: 'orth', label: 'orthographic transcription' },\n  { id: 'norm', label: 'orthographic normalization' },\n  { id: 'phonetic', label: 'phonetic transcription SAMPA' },\n] as const\nexport const ADVANCED_LAYERS_MAP = Object.fromEntries(\n  ADVANCED_LAYERS.map((item) => [item.id, item])\n)\n\nexport const LAYER_VALUE_OPTIONS = [\n  {\n    id: 'pos',\n    operators: ['is', 'is-not'],\n    options: [\n      { value: 'ADJ', label: 'Adjective' },\n      { value: 'ADV', label: 'Adverb' },\n      { value: 'INTJ', label: 'Interjection' },\n      { value: 'NOUN', label: 'Noun' },\n      { value: 'PROPN', label: 'Proper noun' },\n      { value: 'VERB', label: 'Verb' },\n      { value: 'ADP', label: 'Adposition' },\n      { value: 'AUX', label: 'Auxiliary' },\n      { value: 'CCONJ', label: 'Coordinating conjunction' },\n      { value: 'DET', label: 'Determiner' },\n      { value: 'NUM', label: 'Numeral' },\n      { value: 'PART', label: 'Particle' },\n      { value: 'PRON', label: 'Pronoun' },\n      { value: 'SCONJ', label: 'Subordinating conjunction' },\n      { value: 'PUNCT', label: 'Punctuation' },\n      { value: 'SYM', label: 'Symbol' },\n      { value: 'X', label: 'Other' },\n    ],\n  },\n] as const\nexport const LAYER_VALUE_OPTIONS_MAP = Object.fromEntries(\n  LAYER_VALUE_OPTIONS.map((item) => [item.id, item])\n)\n\nexport const EXPRESSION_OPERATORS = [\n  {\n    id: 'is',\n    label: 'is',\n    operator: '=',\n    valueAfter: null,\n    valueBefore: null,\n    escape: true,\n  },\n  {\n    id: 'is-not',\n    label: 'is not',\n    operator: '!=',\n    valueAfter: null,\n    valueBefore: null,\n    escape: true,\n  },\n  {\n    id: 'contains',\n    label: 'contains',\n    operator: '=',\n    valueAfter: '.*',\n    valueBefore: '.*',\n    escape: true,\n  },\n  {\n    id: 'starts-with',\n    label: 'starts with',\n    operator: '=',\n    valueAfter: '.*',\n    valueBefore: null,\n    escape: true,\n  },\n  {\n    id: 'ends-with',\n    label: 'ends with',\n    operator: '=',\n    valueAfter: null,\n    valueBefore: '.*',\n    escape: true,\n  },\n  {\n    id: 'regex',\n    label: 'regex',\n    operator: '=',\n    valueAfter: null,\n    valueBefore: null,\n    escape: false,\n  },\n  {\n    id: 'not-regex',\n    label: 'not regex',\n    operator: '!=',\n    valueAfter: null,\n    valueBefore: null,\n    escape: false,\n  },\n] as const\nexport const EXPRESSION_OPERATORS_MAP = Object.fromEntries(\n  EXPRESSION_OPERATORS.map((item) => [item.id, item])\n)\n\n// --------------------------------------------------------------------------\n\nexport const DEFAULT_NEW_QUANTIFIER = '?'\nexport const DEFAULT_NEW_EXPRESSION = 'text = \"\"'\nexport const DEFAULT_EXPRESSION_OPERATOR = '='\n\n// --------------------------------------------------------------------------\n\n// TODO: restructure with labels? (hide short forms?)\nexport const WITHIN_CHOICES = [\n  'sentence',\n  's',\n  'utterance',\n  'u',\n  'paragraph',\n  'p',\n  'turn',\n  't',\n  'text',\n  'session',\n] as const\n\nexport const QUANTIFIER_CHOICES = [\n  { id: '*', label: 'Zero or More', type: 'symbol', new: '*' },\n  { id: '+', label: 'One or More', type: 'symbol', new: '+' },\n  { id: '?', label: 'Zero or One', type: 'symbol', new: '?' },\n  { id: 'n-n', label: 'Exactly N', type: 'range', new: '{1}' },\n  { id: 'n-m', label: 'N to M', type: 'range', new: '{0,1}' },\n  { id: 'n-', label: 'At least N', type: 'range', new: '{0,}' },\n  { id: '-m', label: 'At most M', type: 'range', new: '{,1}' },\n] as const\nexport const QUANTIFIER_CHOICES_MAP = Object.fromEntries(\n  QUANTIFIER_CHOICES.map((item) => [item.id, item])\n)\n\nexport const NEW_QUERY_SEGMENTS = [\n  { id: 'token', label: 'Normal Token', new: `[ ${DEFAULT_NEW_EXPRESSION} ]` },\n  { id: 'unspecific-token', label: 'Unspecific Token', new: '[]' },\n  { id: 'string', label: 'Plain String', new: '\"\"' },\n] as const\nexport const NEW_QUERY_SEGMENTS_MAP = Object.fromEntries(\n  NEW_QUERY_SEGMENTS.map((item) => [item.id, item])\n)\n\nexport const NEW_EXPRESSIONS = [\n  { id: 'basic', label: 'Expression', new: `${DEFAULT_NEW_EXPRESSION}` },\n  { id: 'or', label: 'OR', new: `${DEFAULT_NEW_EXPRESSION} | ${DEFAULT_NEW_EXPRESSION}` },\n  { id: 'and', label: 'AND', new: `${DEFAULT_NEW_EXPRESSION} & ${DEFAULT_NEW_EXPRESSION}` },\n] as const\nexport const NEW_EXPRESSIONS_MAP = Object.fromEntries(\n  NEW_EXPRESSIONS.map((item) => [item.id, item])\n)\n\nexport const CHANGE_TO_EXPRESSION_LIST = [\n  {\n    id: 'or',\n    label: 'OR',\n    newBefore: `${DEFAULT_NEW_EXPRESSION} |`,\n    newAfter: `| ${DEFAULT_NEW_EXPRESSION}`,\n  },\n  {\n    id: 'and',\n    label: 'AND',\n    newBefore: `${DEFAULT_NEW_EXPRESSION} &`,\n    newAfter: `& ${DEFAULT_NEW_EXPRESSION}`,\n  },\n] as const\nexport const CHANGE_TO_EXPRESSION_LIST_MAP = Object.fromEntries(\n  CHANGE_TO_EXPRESSION_LIST.map((item) => [item.id, item])\n)\n\nexport const WRAP_EXPRESSION = [\n  { id: 'group', label: 'Group', newBefore: '(', newAfter: ')' },\n  { id: 'not', label: 'Negation', newBefore: '!', newAfter: null },\n] as const\nexport const WRAP_EXPRESSION_MAP = Object.fromEntries(\n  WRAP_EXPRESSION.map((item) => [item.id, item])\n)\n\n// --------------------------------------------------------------------------\n","import { createContext, type ReactNode, useContext } from 'react'\n\nimport { FCSParser } from '@/parsers/FCSParser'\nimport { FCSLexer } from '@/parsers/FCSLexer'\n\n// --------------------------------------------------------------------------\n\ninterface FCSParserLexer {\n  parser: FCSParser\n  lexer: FCSLexer\n  cursorPos?: [number, number] | number\n}\n\ntype FCSParserLexerProviderProps = FCSParserLexer & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst FCSParserLexerContext = createContext<FCSParserLexer | undefined>(undefined)\nFCSParserLexerContext.displayName = 'FCSParserLexerContext'\n\n// --------------------------------------------------------------------------\n\nfunction FCSParserLexerProvider({\n  parser,\n  lexer,\n  cursorPos,\n  children,\n}: FCSParserLexerProviderProps) {\n  const data = { parser, lexer, cursorPos }\n  return <FCSParserLexerContext.Provider value={data}>{children}</FCSParserLexerContext.Provider>\n}\n\n// --------------------------------------------------------------------------\n\nfunction useFCSParserLexer() {\n  const data = useContext(FCSParserLexerContext)\n\n  if (!data) throw new Error('No parser and lexer \"data\" set, use FCSParserLexerProvider to set')\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { FCSParserLexerContext, FCSParserLexerProvider, useFCSParserLexer }\n","import { createContext, type ReactNode, useContext } from 'react'\n\n// --------------------------------------------------------------------------\n\nexport interface FCSQueryBuilderConfig {\n  enableWithin: boolean\n  enableWrapGroup: boolean\n  enableWrapNegation: boolean\n  enableImplicitQuery: boolean\n  enableMultipleQuerySegments: boolean\n  enableQuantifiers: boolean\n  enableRegexpFlags: boolean\n  showBasicLayer: boolean\n  showAllAdvancedLayers: boolean\n  showCustomLayers: boolean\n  showLayerQualifiers: boolean\n  showResourceCountForLayer: boolean\n}\n\ntype FCSQueryBuilderConfigProviderProps = Partial<FCSQueryBuilderConfig> & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst FCSQueryBuilderConfigContext = createContext<FCSQueryBuilderConfig | undefined>(undefined)\nFCSQueryBuilderConfigContext.displayName = 'FCSQueryBuilderConfigContext'\n\n// --------------------------------------------------------------------------\n\nfunction FCSQueryBuilderConfigProvider({\n  enableWithin = true,\n  enableWrapGroup = true,\n  enableWrapNegation = true,\n  enableImplicitQuery = true,\n  enableMultipleQuerySegments = true,\n  enableQuantifiers = true,\n  enableRegexpFlags = true,\n  showBasicLayer = true,\n  showAllAdvancedLayers = true,\n  showCustomLayers = true,\n  showLayerQualifiers = true,\n  showResourceCountForLayer = true,\n  children,\n}: FCSQueryBuilderConfigProviderProps) {\n  const data = {\n    enableWithin,\n    enableWrapGroup,\n    enableWrapNegation,\n    enableImplicitQuery,\n    enableMultipleQuerySegments,\n    enableQuantifiers,\n    enableRegexpFlags,\n    showBasicLayer,\n    showAllAdvancedLayers,\n    showCustomLayers,\n    showLayerQualifiers,\n    showResourceCountForLayer,\n  }\n\n  return (\n    <FCSQueryBuilderConfigContext.Provider value={data}>\n      {children}\n    </FCSQueryBuilderConfigContext.Provider>\n  )\n}\n\n// --------------------------------------------------------------------------\n\nfunction useFCSQueryBuilderConfig() {\n  const data = useContext(FCSQueryBuilderConfigContext)\n\n  // or create defaults?\n  if (!data) throw new Error('No flags \"data\" set, use FCSQueryBuilderConfigProvider to set')\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { FCSQueryBuilderConfigContext, FCSQueryBuilderConfigProvider, useFCSQueryBuilderConfig }\n","import { TokenStreamRewriter } from 'antlr4ng'\nimport { createContext, type ReactNode, useContext } from 'react'\n\n// --------------------------------------------------------------------------\n\ninterface FCSQueryUpdater {\n  rewriter: TokenStreamRewriter\n}\n\ntype FCSQueryUpdaterProviderProps = FCSQueryUpdater & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst FCSQueryUpdaterContext = createContext<FCSQueryUpdater | undefined>(undefined)\nFCSQueryUpdaterContext.displayName = 'FCSQueryUpdaterContext'\n\n// --------------------------------------------------------------------------\n\nfunction FCSQueryUpdaterProvider({ rewriter, children }: FCSQueryUpdaterProviderProps) {\n  const data = { rewriter }\n  return <FCSQueryUpdaterContext.Provider value={data}>{children}</FCSQueryUpdaterContext.Provider>\n}\n\n// --------------------------------------------------------------------------\n\nfunction useFCSQueryUpdater() {\n  const data = useContext(FCSQueryUpdaterContext)\n\n  if (!data) throw new Error('No rewriter \"data\" set, use FCSQueryUpdaterProvider to set')\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { FCSQueryUpdaterContext, FCSQueryUpdaterProvider, useFCSQueryUpdater }\n","import { createContext, type ReactNode, useContext } from 'react'\n\nimport { type Resource } from '@/utils/api'\nimport { type LayerInfo } from './constants'\n\n// --------------------------------------------------------------------------\n\ninterface FCSResourceLayerInfo {\n  resources: Resource[]\n  layerInfo: Map<string, LayerInfo>\n}\n\ntype FCSResourceLayerInfoProviderProps = FCSResourceLayerInfo & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst FCSResourceLayerInfoContext = createContext<FCSResourceLayerInfo | undefined>(undefined)\nFCSResourceLayerInfoContext.displayName = 'FCSResourceLayerInfoContext'\n\n// --------------------------------------------------------------------------\n\nfunction FCSResourceLayerInfoProvider({\n  resources,\n  layerInfo,\n  children,\n}: FCSResourceLayerInfoProviderProps) {\n  const data = { resources, layerInfo }\n  return (\n    <FCSResourceLayerInfoContext.Provider value={data}>\n      {children}\n    </FCSResourceLayerInfoContext.Provider>\n  )\n}\n\n// --------------------------------------------------------------------------\n\nfunction useFCSResourceLayerInfo() {\n  const data = useContext(FCSResourceLayerInfoContext)\n\n  if (!data)\n    throw new Error(\n      'No resources and layer info \"data\" set, use FCSResourceLayerInfoProvider to set'\n    )\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { FCSResourceLayerInfoContext, FCSResourceLayerInfoProvider, useFCSResourceLayerInfo }\n","import {\n  ATN,\n  ATNDeserializer,\n  CharStream,\n  DecisionState,\n  DFA,\n  Lexer,\n  LexerATNSimulator,\n  PredictionContextCache,\n  Vocabulary,\n} from 'antlr4ng'\n\nexport class FCSLexer extends Lexer {\n  public static readonly L_PAREN = 1\n  public static readonly R_PAREN = 2\n  public static readonly L_SQUARE_BRACKET = 3\n  public static readonly R_SQUARE_BRACKET = 4\n  public static readonly OR = 5\n  public static readonly AND = 6\n  public static readonly NOT = 7\n  public static readonly FWD_SLASH = 8\n  public static readonly L_CURLY_BRACKET = 9\n  public static readonly R_CURLY_BRACKET = 10\n  public static readonly Q_ONE_OR_MORE = 11\n  public static readonly Q_ZERO_OR_MORE = 12\n  public static readonly Q_ZERO_OR_ONE = 13\n  public static readonly Q_COMMA = 14\n  public static readonly OPERATOR_EQ = 15\n  public static readonly OPERATOR_NE = 16\n  public static readonly COLON = 17\n  public static readonly WITHIN = 18\n  public static readonly SIMPLE_WITHIN_SCOPE = 19\n  public static readonly REGEXP_FLAGS = 20\n  public static readonly IDENTIFIER = 21\n  public static readonly INTEGER = 22\n  public static readonly REGEXP = 23\n  public static readonly QUOTED_STRING = 24\n  public static readonly Space = 25\n\n  public static readonly channelNames = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']\n\n  public static readonly literalNames = [\n    null,\n    \"'('\",\n    \"')'\",\n    \"'['\",\n    \"']'\",\n    \"'|'\",\n    \"'&'\",\n    \"'!'\",\n    \"'/'\",\n    \"'{'\",\n    \"'}'\",\n    \"'+'\",\n    \"'*'\",\n    \"'?'\",\n    \"','\",\n    \"'='\",\n    \"'!='\",\n    \"':'\",\n    \"'within'\",\n  ]\n\n  public static readonly symbolicNames = [\n    null,\n    'L_PAREN',\n    'R_PAREN',\n    'L_SQUARE_BRACKET',\n    'R_SQUARE_BRACKET',\n    'OR',\n    'AND',\n    'NOT',\n    'FWD_SLASH',\n    'L_CURLY_BRACKET',\n    'R_CURLY_BRACKET',\n    'Q_ONE_OR_MORE',\n    'Q_ZERO_OR_MORE',\n    'Q_ZERO_OR_ONE',\n    'Q_COMMA',\n    'OPERATOR_EQ',\n    'OPERATOR_NE',\n    'COLON',\n    'WITHIN',\n    'SIMPLE_WITHIN_SCOPE',\n    'REGEXP_FLAGS',\n    'IDENTIFIER',\n    'INTEGER',\n    'REGEXP',\n    'QUOTED_STRING',\n    'Space',\n  ]\n\n  public static readonly modeNames = ['DEFAULT_MODE']\n\n  public static readonly ruleNames = [\n    'L_PAREN',\n    'R_PAREN',\n    'L_SQUARE_BRACKET',\n    'R_SQUARE_BRACKET',\n    'OR',\n    'AND',\n    'NOT',\n    'FWD_SLASH',\n    'L_CURLY_BRACKET',\n    'R_CURLY_BRACKET',\n    'Q_ONE_OR_MORE',\n    'Q_ZERO_OR_MORE',\n    'Q_ZERO_OR_ONE',\n    'Q_COMMA',\n    'OPERATOR_EQ',\n    'OPERATOR_NE',\n    'COLON',\n    'WITHIN',\n    'SIMPLE_WITHIN_SCOPE',\n    'REGEXP_FLAGS',\n    'IDENTIFIER_FIRST_CHAR',\n    'IDENTIFIER_LAST_CHAR',\n    'IDENTIFIER_CHAR',\n    'IDENTIFIER',\n    'INTEGER',\n    'REGEXP',\n    'QUOTED_STRING',\n    'CHAR',\n    'WS',\n    'ESCAPED_CHAR',\n    'HEX',\n    'Space',\n  ]\n\n  public constructor(input: CharStream) {\n    super(input)\n    this.interpreter = new LexerATNSimulator(\n      this,\n      FCSLexer._ATN,\n      FCSLexer.decisionsToDFA,\n      new PredictionContextCache()\n    )\n  }\n\n  public get grammarFileName(): string {\n    return 'FCSLexer.g4'\n  }\n\n  public get literalNames(): (string | null)[] {\n    return FCSLexer.literalNames\n  }\n  public get symbolicNames(): (string | null)[] {\n    return FCSLexer.symbolicNames\n  }\n  public get ruleNames(): string[] {\n    return FCSLexer.ruleNames\n  }\n\n  public get serializedATN(): number[] {\n    return FCSLexer._serializedATN\n  }\n\n  public get channelNames(): string[] {\n    return FCSLexer.channelNames\n  }\n\n  public get modeNames(): string[] {\n    return FCSLexer.modeNames\n  }\n\n  public static readonly _serializedATN: number[] = [\n    4, 0, 25, 238, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2,\n    6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7,\n    13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20,\n    7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2,\n    27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2,\n    1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10,\n    1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1,\n    16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,\n    1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1,\n    18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,\n    1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 153,\n    8, 18, 1, 19, 4, 19, 156, 8, 19, 11, 19, 12, 19, 157, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22,\n    1, 23, 1, 23, 5, 23, 168, 8, 23, 10, 23, 12, 23, 171, 9, 23, 1, 23, 3, 23, 174, 8, 23, 1, 24, 4,\n    24, 177, 8, 24, 11, 24, 12, 24, 178, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 5, 26, 186, 8, 26, 10,\n    26, 12, 26, 189, 9, 26, 1, 26, 1, 26, 1, 26, 1, 26, 5, 26, 195, 8, 26, 10, 26, 12, 26, 198, 9,\n    26, 1, 26, 3, 26, 201, 8, 26, 1, 27, 1, 27, 3, 27, 205, 8, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1,\n    29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,\n    1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 231, 8, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31,\n    1, 31, 0, 0, 32, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23,\n    12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 0, 43, 0, 45, 0, 47, 21,\n    49, 22, 51, 23, 53, 24, 55, 0, 57, 0, 59, 0, 61, 0, 63, 25, 1, 0, 10, 5, 0, 67, 67, 73, 73, 99,\n    100, 105, 105, 108, 108, 2, 0, 65, 90, 97, 122, 3, 0, 48, 57, 65, 90, 97, 122, 4, 0, 45, 45, 48,\n    57, 65, 90, 97, 122, 1, 0, 48, 57, 2, 0, 39, 39, 92, 92, 2, 0, 34, 34, 92, 92, 10, 0, 9, 13, 32,\n    32, 133, 133, 160, 160, 5760, 5760, 8192, 8202, 8232, 8233, 8239, 8239, 8287, 8287, 12288,\n    12288, 9, 0, 34, 34, 36, 36, 39, 43, 46, 46, 63, 63, 91, 94, 110, 110, 116, 116, 123, 125, 3, 0,\n    48, 57, 65, 70, 97, 102, 252, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0,\n    0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0,\n    0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0,\n    0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0,\n    0, 0, 39, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0,\n    0, 0, 63, 1, 0, 0, 0, 1, 65, 1, 0, 0, 0, 3, 67, 1, 0, 0, 0, 5, 69, 1, 0, 0, 0, 7, 71, 1, 0, 0,\n    0, 9, 73, 1, 0, 0, 0, 11, 75, 1, 0, 0, 0, 13, 77, 1, 0, 0, 0, 15, 79, 1, 0, 0, 0, 17, 81, 1, 0,\n    0, 0, 19, 83, 1, 0, 0, 0, 21, 85, 1, 0, 0, 0, 23, 87, 1, 0, 0, 0, 25, 89, 1, 0, 0, 0, 27, 91, 1,\n    0, 0, 0, 29, 93, 1, 0, 0, 0, 31, 95, 1, 0, 0, 0, 33, 98, 1, 0, 0, 0, 35, 100, 1, 0, 0, 0, 37,\n    152, 1, 0, 0, 0, 39, 155, 1, 0, 0, 0, 41, 159, 1, 0, 0, 0, 43, 161, 1, 0, 0, 0, 45, 163, 1, 0,\n    0, 0, 47, 165, 1, 0, 0, 0, 49, 176, 1, 0, 0, 0, 51, 180, 1, 0, 0, 0, 53, 200, 1, 0, 0, 0, 55,\n    204, 1, 0, 0, 0, 57, 206, 1, 0, 0, 0, 59, 208, 1, 0, 0, 0, 61, 232, 1, 0, 0, 0, 63, 234, 1, 0,\n    0, 0, 65, 66, 5, 40, 0, 0, 66, 2, 1, 0, 0, 0, 67, 68, 5, 41, 0, 0, 68, 4, 1, 0, 0, 0, 69, 70, 5,\n    91, 0, 0, 70, 6, 1, 0, 0, 0, 71, 72, 5, 93, 0, 0, 72, 8, 1, 0, 0, 0, 73, 74, 5, 124, 0, 0, 74,\n    10, 1, 0, 0, 0, 75, 76, 5, 38, 0, 0, 76, 12, 1, 0, 0, 0, 77, 78, 5, 33, 0, 0, 78, 14, 1, 0, 0,\n    0, 79, 80, 5, 47, 0, 0, 80, 16, 1, 0, 0, 0, 81, 82, 5, 123, 0, 0, 82, 18, 1, 0, 0, 0, 83, 84, 5,\n    125, 0, 0, 84, 20, 1, 0, 0, 0, 85, 86, 5, 43, 0, 0, 86, 22, 1, 0, 0, 0, 87, 88, 5, 42, 0, 0, 88,\n    24, 1, 0, 0, 0, 89, 90, 5, 63, 0, 0, 90, 26, 1, 0, 0, 0, 91, 92, 5, 44, 0, 0, 92, 28, 1, 0, 0,\n    0, 93, 94, 5, 61, 0, 0, 94, 30, 1, 0, 0, 0, 95, 96, 5, 33, 0, 0, 96, 97, 5, 61, 0, 0, 97, 32, 1,\n    0, 0, 0, 98, 99, 5, 58, 0, 0, 99, 34, 1, 0, 0, 0, 100, 101, 5, 119, 0, 0, 101, 102, 5, 105, 0,\n    0, 102, 103, 5, 116, 0, 0, 103, 104, 5, 104, 0, 0, 104, 105, 5, 105, 0, 0, 105, 106, 5, 110, 0,\n    0, 106, 36, 1, 0, 0, 0, 107, 108, 5, 115, 0, 0, 108, 109, 5, 101, 0, 0, 109, 110, 5, 110, 0, 0,\n    110, 111, 5, 116, 0, 0, 111, 112, 5, 101, 0, 0, 112, 113, 5, 110, 0, 0, 113, 114, 5, 99, 0, 0,\n    114, 153, 5, 101, 0, 0, 115, 153, 5, 115, 0, 0, 116, 117, 5, 117, 0, 0, 117, 118, 5, 116, 0, 0,\n    118, 119, 5, 116, 0, 0, 119, 120, 5, 101, 0, 0, 120, 121, 5, 114, 0, 0, 121, 122, 5, 97, 0, 0,\n    122, 123, 5, 110, 0, 0, 123, 124, 5, 99, 0, 0, 124, 153, 5, 101, 0, 0, 125, 153, 5, 117, 0, 0,\n    126, 127, 5, 112, 0, 0, 127, 128, 5, 97, 0, 0, 128, 129, 5, 114, 0, 0, 129, 130, 5, 97, 0, 0,\n    130, 131, 5, 103, 0, 0, 131, 132, 5, 114, 0, 0, 132, 133, 5, 97, 0, 0, 133, 134, 5, 112, 0, 0,\n    134, 153, 5, 104, 0, 0, 135, 153, 5, 112, 0, 0, 136, 137, 5, 116, 0, 0, 137, 138, 5, 117, 0, 0,\n    138, 139, 5, 114, 0, 0, 139, 153, 5, 110, 0, 0, 140, 153, 5, 116, 0, 0, 141, 142, 5, 116, 0, 0,\n    142, 143, 5, 101, 0, 0, 143, 144, 5, 120, 0, 0, 144, 153, 5, 116, 0, 0, 145, 146, 5, 115, 0, 0,\n    146, 147, 5, 101, 0, 0, 147, 148, 5, 115, 0, 0, 148, 149, 5, 115, 0, 0, 149, 150, 5, 105, 0, 0,\n    150, 151, 5, 111, 0, 0, 151, 153, 5, 110, 0, 0, 152, 107, 1, 0, 0, 0, 152, 115, 1, 0, 0, 0, 152,\n    116, 1, 0, 0, 0, 152, 125, 1, 0, 0, 0, 152, 126, 1, 0, 0, 0, 152, 135, 1, 0, 0, 0, 152, 136, 1,\n    0, 0, 0, 152, 140, 1, 0, 0, 0, 152, 141, 1, 0, 0, 0, 152, 145, 1, 0, 0, 0, 153, 38, 1, 0, 0, 0,\n    154, 156, 7, 0, 0, 0, 155, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 155, 1, 0, 0, 0, 157,\n    158, 1, 0, 0, 0, 158, 40, 1, 0, 0, 0, 159, 160, 7, 1, 0, 0, 160, 42, 1, 0, 0, 0, 161, 162, 7, 2,\n    0, 0, 162, 44, 1, 0, 0, 0, 163, 164, 7, 3, 0, 0, 164, 46, 1, 0, 0, 0, 165, 173, 3, 41, 20, 0,\n    166, 168, 3, 45, 22, 0, 167, 166, 1, 0, 0, 0, 168, 171, 1, 0, 0, 0, 169, 167, 1, 0, 0, 0, 169,\n    170, 1, 0, 0, 0, 170, 172, 1, 0, 0, 0, 171, 169, 1, 0, 0, 0, 172, 174, 3, 43, 21, 0, 173, 169,\n    1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 48, 1, 0, 0, 0, 175, 177, 7, 4, 0, 0, 176, 175, 1, 0, 0,\n    0, 177, 178, 1, 0, 0, 0, 178, 176, 1, 0, 0, 0, 178, 179, 1, 0, 0, 0, 179, 50, 1, 0, 0, 0, 180,\n    181, 3, 53, 26, 0, 181, 52, 1, 0, 0, 0, 182, 187, 5, 39, 0, 0, 183, 186, 3, 59, 29, 0, 184, 186,\n    8, 5, 0, 0, 185, 183, 1, 0, 0, 0, 185, 184, 1, 0, 0, 0, 186, 189, 1, 0, 0, 0, 187, 185, 1, 0, 0,\n    0, 187, 188, 1, 0, 0, 0, 188, 190, 1, 0, 0, 0, 189, 187, 1, 0, 0, 0, 190, 201, 5, 39, 0, 0, 191,\n    196, 5, 34, 0, 0, 192, 195, 3, 59, 29, 0, 193, 195, 8, 6, 0, 0, 194, 192, 1, 0, 0, 0, 194, 193,\n    1, 0, 0, 0, 195, 198, 1, 0, 0, 0, 196, 194, 1, 0, 0, 0, 196, 197, 1, 0, 0, 0, 197, 199, 1, 0, 0,\n    0, 198, 196, 1, 0, 0, 0, 199, 201, 5, 34, 0, 0, 200, 182, 1, 0, 0, 0, 200, 191, 1, 0, 0, 0, 201,\n    54, 1, 0, 0, 0, 202, 205, 3, 59, 29, 0, 203, 205, 8, 7, 0, 0, 204, 202, 1, 0, 0, 0, 204, 203, 1,\n    0, 0, 0, 205, 56, 1, 0, 0, 0, 206, 207, 7, 7, 0, 0, 207, 58, 1, 0, 0, 0, 208, 230, 5, 92, 0, 0,\n    209, 231, 7, 8, 0, 0, 210, 211, 5, 120, 0, 0, 211, 212, 3, 61, 30, 0, 212, 213, 3, 61, 30, 0,\n    213, 231, 1, 0, 0, 0, 214, 215, 5, 117, 0, 0, 215, 216, 3, 61, 30, 0, 216, 217, 3, 61, 30, 0,\n    217, 218, 3, 61, 30, 0, 218, 219, 3, 61, 30, 0, 219, 231, 1, 0, 0, 0, 220, 221, 5, 85, 0, 0,\n    221, 222, 3, 61, 30, 0, 222, 223, 3, 61, 30, 0, 223, 224, 3, 61, 30, 0, 224, 225, 3, 61, 30, 0,\n    225, 226, 3, 61, 30, 0, 226, 227, 3, 61, 30, 0, 227, 228, 3, 61, 30, 0, 228, 229, 3, 61, 30, 0,\n    229, 231, 1, 0, 0, 0, 230, 209, 1, 0, 0, 0, 230, 210, 1, 0, 0, 0, 230, 214, 1, 0, 0, 0, 230,\n    220, 1, 0, 0, 0, 231, 60, 1, 0, 0, 0, 232, 233, 7, 9, 0, 0, 233, 62, 1, 0, 0, 0, 234, 235, 3,\n    57, 28, 0, 235, 236, 1, 0, 0, 0, 236, 237, 6, 31, 0, 0, 237, 64, 1, 0, 0, 0, 13, 0, 152, 157,\n    169, 173, 178, 185, 187, 194, 196, 200, 204, 230, 1, 0, 1, 0,\n  ]\n\n  private static __ATN: ATN\n  public static get _ATN(): ATN {\n    if (!FCSLexer.__ATN) {\n      FCSLexer.__ATN = new ATNDeserializer().deserialize(FCSLexer._serializedATN)\n    }\n\n    return FCSLexer.__ATN\n  }\n\n  private static readonly vocabulary = new Vocabulary(\n    FCSLexer.literalNames,\n    FCSLexer.symbolicNames,\n    []\n  )\n\n  public override get vocabulary(): Vocabulary {\n    return FCSLexer.vocabulary\n  }\n\n  private static readonly decisionsToDFA = FCSLexer._ATN.decisionToState.map(\n    (ds: DecisionState, index: number) => new DFA(ds, index)\n  )\n}\n","import { AbstractParseTreeVisitor } from 'antlr4ng'\n\nimport {\n  AttributeContext,\n  Expression_andContext,\n  Expression_basicContext,\n  Expression_groupContext,\n  Expression_notContext,\n  Expression_orContext,\n  ExpressionContext,\n  IdentifierContext,\n  Main_queryContext,\n  QualifierContext,\n  QuantifierContext,\n  Query_disjunctionContext,\n  Query_groupContext,\n  Query_implicitContext,\n  Query_segmentContext,\n  Query_sequenceContext,\n  Query_simpleContext,\n  QueryContext,\n  Regexp_flagContext,\n  Regexp_patternContext,\n  RegexpContext,\n  Within_part_simpleContext,\n  Within_partContext,\n} from './FCSParser.js'\n\n/**\n * This interface defines a complete generic visitor for a parse tree produced\n * by `FCSParser`.\n *\n * @param <Result> The return type of the visit operation. Use `void` for\n * operations with no return type.\n */\nexport class FCSParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {\n  /**\n   * Visit a parse tree produced by `FCSParser.query`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery?: (ctx: QueryContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.main_query`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitMain_query?: (ctx: Main_queryContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.query_disjunction`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery_disjunction?: (ctx: Query_disjunctionContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.query_sequence`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery_sequence?: (ctx: Query_sequenceContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.query_group`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery_group?: (ctx: Query_groupContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.query_simple`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery_simple?: (ctx: Query_simpleContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.quantifier`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuantifier?: (ctx: QuantifierContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.query_implicit`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery_implicit?: (ctx: Query_implicitContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.query_segment`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery_segment?: (ctx: Query_segmentContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.within_part`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitWithin_part?: (ctx: Within_partContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.within_part_simple`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitWithin_part_simple?: (ctx: Within_part_simpleContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.expression`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitExpression?: (ctx: ExpressionContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.expression_or`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitExpression_or?: (ctx: Expression_orContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.expression_and`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitExpression_and?: (ctx: Expression_andContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.expression_group`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitExpression_group?: (ctx: Expression_groupContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.expression_not`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitExpression_not?: (ctx: Expression_notContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.expression_basic`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitExpression_basic?: (ctx: Expression_basicContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.attribute`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitAttribute?: (ctx: AttributeContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.qualifier`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQualifier?: (ctx: QualifierContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.identifier`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitIdentifier?: (ctx: IdentifierContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.regexp`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRegexp?: (ctx: RegexpContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.regexp_pattern`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRegexp_pattern?: (ctx: Regexp_patternContext) => Result\n  /**\n   * Visit a parse tree produced by `FCSParser.regexp_flag`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRegexp_flag?: (ctx: Regexp_flagContext) => Result\n}\n","import { CharStream, CommonTokenStream, ParseTree, TokenStreamRewriter } from 'antlr4ng'\n\nimport { FCSLexer } from '@/parsers/FCSLexer'\nimport { AttributeContext, FCSParser, QueryContext } from '@/parsers/FCSParser'\nimport { FCSParserVisitor } from '@/parsers/FCSParserVisitor'\nimport { type Resource } from '@/utils/api'\nimport { _formatTreeItems, _getTreeItems, QuerySyntaxErrorListener } from '../utils'\n\n// --------------------------------------------------------------------------\n\nexport function parseQuery(input?: string) {\n  if (!input) return null\n  if (!input.trim()) return null\n\n  // console.time('parse-query')\n  const inputStream = CharStream.fromString(input)\n  const lexer = new FCSLexer(inputStream)\n  const tokenStream = new CommonTokenStream(lexer)\n  const rewriter = new TokenStreamRewriter(tokenStream)\n  const parser = new FCSParser(tokenStream)\n\n  const errorListener = new QuerySyntaxErrorListener()\n  lexer.removeErrorListeners()\n  lexer.addErrorListener(errorListener)\n  parser.removeErrorListeners()\n  parser.addErrorListener(errorListener)\n\n  const tree = parser.query()\n  // console.timeEnd('parse-query')\n\n  // DEBUG\n  // Object.assign(window, { input, inputStream, lexer, tokenStream, parser, rewriter, tree })\n\n  // console.debug('tree', tree.toStringTree(parser))\n  const treeItems = /*#__PURE__*/ _getTreeItems(tree, parser, lexer)\n  console.log(/*#__PURE__*/ _formatTreeItems(treeItems))\n\n  return { tree, lexer, parser, rewriter, errors: errorListener.errors }\n}\n\n// --------------------------------------------------------------------------\n\nclass CollectLayersVisitor extends FCSParserVisitor<void> {\n  public layers: string[] = []\n\n  public visitAttribute = (ctx: AttributeContext) => {\n    this.layers.push(ctx.getText())\n  }\n\n  // public visitQuery_implicit = (ctx: Query_implicitContext) => {\n  //   // \"text\"?\n  // }\n}\n\nexport function getLayersUsedInQuery(ctx?: QueryContext | ParseTree) {\n  // collect layers in query\n  const layerCollector = new CollectLayersVisitor()\n  if (ctx) {\n    layerCollector.visit(ctx)\n  }\n\n  const usedLayers = layerCollector.layers\n  const uniqLayers = new Set(usedLayers)\n\n  return [...uniqLayers]\n}\n\nexport interface SupportedResourcesInfo {\n  supported: Resource[]\n  unsupported: (readonly [Resource, string[]])[]\n  unsupportedByLayer: Map<string, Resource[]>\n}\n\nexport function getResourcesLayerSupportInfo(\n  resources: Resource[],\n  layers: string[]\n): SupportedResourcesInfo {\n  // NOTE: skip non-standard, legacy-support \"word\" layer\n  // TODO: hmm, maybe skip missing \"text\" layer?\n  const layersRequired = layers\n    .filter((layer) => layer !== 'word')\n    .filter((layer) => layer !== 'text')\n\n  if (layersRequired.length === 0 || resources.length === 0) {\n    return {\n      supported: resources,\n      unsupported: [],\n      unsupportedByLayer: new Map<string, Resource[]>(),\n    }\n  }\n\n  const layersInQuery = layersRequired.map((layer) => layer.split(':').toReversed())\n\n  // find resources that do have these layers\n  // TODO: use `layerInfo` where it is precomputed?\n  const resourcesWithLayer = resources.map((resource) => {\n    const notAvailableLayers: string[] = []\n\n    layersInQuery.forEach(([layerId, qualifierId]) => {\n      if (!qualifierId) {\n        if (!resource.availableLayers?.find((layer) => layer.layerType === layerId)) {\n          notAvailableLayers.push(layerId)\n        }\n      } else {\n        if (\n          !resource.availableLayers?.find(\n            (layer) => layer.layerType === layerId && layer.qualifier === qualifierId\n          )\n        ) {\n          notAvailableLayers.push(`${qualifierId}:${layerId}`)\n        }\n      }\n    })\n\n    return [resource, notAvailableLayers] as const\n  })\n\n  const validResources = resourcesWithLayer\n    .filter(([, layers]) => layers.length === 0)\n    .map(([resource]) => resource)\n  const invalidResources = resourcesWithLayer.filter(([, layers]) => layers.length !== 0)\n  const invalidResourcesByLayer = invalidResources\n    .map(([resource, layers]) => layers.map((layer) => [layer, resource] as const))\n    .flat(1)\n    .reduce((map, [layer, resource]) => {\n      if (!map.has(layer)) {\n        map.set(layer, [])\n      }\n      map.get(layer)!.push(resource)\n      return map\n    }, new Map<string, Resource[]>())\n\n  return {\n    supported: validResources,\n    unsupported: invalidResources,\n    unsupportedByLayer: invalidResourcesByLayer,\n  }\n}\n\n// --------------------------------------------------------------------------\n// debugging stuff\n\n// const input = '[ pos = \"NOUN\"] [ def = \"1\" & ( x = \"a\" | y = \"b\" )]*'\n// const input = '[] [ ( x = \"a\" | y = \"b\" )]*'\n// const input = '[ pos = \"NOUN\"] [ a:def = \"1\" & ( x = \"a\" | y = \"b\" /i )]*'\n// const input = '\"a\" | \"b\" \"c\"'\n// const input = '[( text =\"a\" | text = \"b\") & text = \"c\" & text = \"d\" | text = \"e\"]'\n// const input = '[ text =\"a\" | text = \"b\" & text = \"c\" & text = \"d\" | text = \"e\"]'\n// const input = '[ text =\"a\" & text = \"b\" | text = \"c\" & text = \"d\" | text = \"e\"]'\n// const input = '[ text =\"a\" & ! text = \"b\" | text = \"c\" & text = \"d\" | text = \"e\"]'\n// const input = '[ text =\"a\" | ! text = \"b\" & text = \"c\" & text = \"d\" | text = \"e\"]'\n// const input = '([ text =\"a\" ] [ text = \"c\" & text = \"d\" | text = \"e\"]) within s'\n// const input = '([ text =\"a\" ] [ text = \"c\" & text = \"d\" | text = \"e\"]) within s | \"a\"' // error\n\n// --------------------------------------------------------------------------\n\n/* escape regex syntax characters with `\\` prefix */\nconst REGEXP_ESCAPES = /([\\^$\\\\.*+?()[\\]{}|/])/g\nconst REGEXP_ESCAPES_ESCAPED = /\\\\([\\^$\\\\.*+?()[\\]{}|/])/g\n/* regex to check regex characters when replacing, without backslashes */\nconst REGEXP_CONTAINS_REGEXP = /(^|[^\\\\])([\\^$.*+?()[\\]{}|/])/g\n// /* other punctuation characters */\n// const REGEXP_OTHER_PUNCT = /([,-=<>#&!%:;@~'`\"])/g\n// /* find \\xFF escaped characters, group 1 is backslashes before, group 2 is string FF */\n// const REGEXP_ESCAPED_X = /((?:^|[^\\\\])(?:\\\\{2})*)\\\\x([A-Fa-f0-9]{2})/g\n/* unescaped quotes */\nconst REGEXP_UNESCAPED_QUOTE = /(^|[^\\\\])((?:\\\\{2})*['\"])/g\n/* escaped quotes */\nconst REGEXP_ESCAPED_QUOTE = /(^|[^\\\\])\\\\((?:\\\\{2})*['\"])/g\n\n/**\n * Escape a string to be used in regular expressions.\n *\n * @param value value to escape for use in regex\n * @returns escaped string, can be used in regex to match exactly the input value\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/escape\n */\nexport function escapeRegexValue(value: string | undefined) {\n  // import 'core-js-pure/actual/escape'\n  if (!value) return value\n\n  // NOTE: maybe not too escaped strings, reduce usability, less userfriendly\n  // if (Object.hasOwn(RegExp, 'escape')) {\n  //   // @ts-expect-error: this is now valid\n  //   return RegExp.escape(value)\n  // }\n\n  let escaped = value\n  escaped = escaped.replace(REGEXP_ESCAPES, '\\\\$1')\n  // escaped = escaped.replace(REGEXP_OTHER_PUNCT, (match) => `\\\\x${match.charCodeAt(0).toString(16)}`)\n  escaped = escaped.replace(REGEXP_UNESCAPED_QUOTE, '$1\\\\$2')\n  return escaped\n}\n\nexport function unescapeRegexValue(value: string | undefined) {\n  if (!value) return value\n\n  let unescaped = value\n  // // revert `\\xFF` escape sequences? (seems to happen automatically in browser)\n  // unescaped = unescaped.replace(\n  //   REGEXP_ESCAPED_X,\n  //   (_, p1, p2) => `${p1}${String.fromCharCode(parseInt(p2, 16))}`\n  // )\n  // unescaped = decodeURIComponent(unescaped)\n  // // remove double backslashes\n  // // unescaped = unescaped.replaceAll('\\\\\\\\', '\\\\')\n  unescaped = unescaped.replace(REGEXP_ESCAPED_QUOTE, '$1$2')\n  unescaped = unescaped.replace(REGEXP_ESCAPES_ESCAPED, '$1')\n  return unescaped\n}\n\nexport function checkIfContainsRegex(value: string | undefined) {\n  if (!value) return false\n\n  const escapedValue = value.replace(REGEXP_CONTAINS_REGEXP, '\\\\$1$2')\n  // console.debug('is regex escaped', { value, escapedValue, contains: escapedValue !== value })\n  return escapedValue !== value\n}\n\nexport function escapeQuotes(value: string | undefined) {\n  if (!value) return value\n  return value.replaceAll('\\\\', '\\\\\\\\').replace(REGEXP_UNESCAPED_QUOTE, '$1\\\\$2')\n}\n\nexport function unescapeQuotes(value: string | undefined) {\n  if (!value) return value\n  return value.replace(REGEXP_ESCAPED_QUOTE, '$1$2').replaceAll('\\\\\\\\', '\\\\')\n}\n\n// --------------------------------------------------------------------------\n","import { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Form from 'react-bootstrap/Form'\n\nimport {\n  Expression_andContext,\n  Expression_basicContext,\n  Expression_groupContext,\n  Expression_notContext,\n  Expression_orContext,\n  ExpressionContext,\n  FCSParser,\n  QuantifierContext,\n  Query_disjunctionContext,\n  Query_groupContext,\n  Query_sequenceContext,\n  Query_simpleContext,\n  QueryContext,\n} from '@/parsers/FCSParser'\nimport { type Resource } from '@/utils/api'\nimport { type ParseTree, TerminalNode, TokenStreamRewriter } from 'antlr4ng'\nimport { isCursorOnContext } from '../utils'\nimport {\n  ADVANCED_LAYERS,\n  ADVANCED_LAYERS_MAP,\n  CHANGE_TO_EXPRESSION_LIST,\n  CHANGE_TO_EXPRESSION_LIST_MAP,\n  type ChangeToExpressionListType,\n  DEFAULT_NEW_QUANTIFIER,\n  EXPRESSION_OPERATORS,\n  EXPRESSION_OPERATORS_MAP,\n  type ExpressionChild,\n  LAYER_VALUE_OPTIONS_MAP,\n  type LayerInfo,\n  NEW_EXPRESSIONS,\n  NEW_EXPRESSIONS_MAP,\n  NEW_QUERY_SEGMENTS,\n  NEW_QUERY_SEGMENTS_MAP,\n  type NewExpressionType,\n  type NewQuerySegmentType,\n  QUANTIFIER_CHOICES,\n  QUANTIFIER_CHOICES_MAP,\n  type QuantifierChoicesType,\n  type ResourceLayerIDInfo,\n  WITHIN_CHOICES,\n  WRAP_EXPRESSION,\n  WRAP_EXPRESSION_MAP,\n  type WrapExpressionType,\n} from './constants'\nimport { FCSParserLexerProvider, useFCSParserLexer } from './FCSParserLexerContext'\nimport {\n  type FCSQueryBuilderConfig,\n  FCSQueryBuilderConfigProvider,\n  useFCSQueryBuilderConfig,\n} from './FCSQueryBuilderConfigContext'\nimport { FCSQueryUpdaterProvider, useFCSQueryUpdater } from './FCSQueryUpdaterContext'\nimport {\n  FCSResourceLayerInfoProvider,\n  useFCSResourceLayerInfo,\n} from './FCSResourceLayerInfoContext'\nimport {\n  checkIfContainsRegex,\n  escapeQuotes,\n  escapeRegexValue,\n  parseQuery,\n  unescapeQuotes,\n  unescapeRegexValue,\n} from './utils'\n\nimport bracesIcon from 'bootstrap-icons/icons/braces.svg?raw'\nimport plusCircleIcon from 'bootstrap-icons/icons/plus-circle.svg?raw'\nimport repeatIcon from 'bootstrap-icons/icons/repeat.svg?raw'\nimport xCircleIcon from 'bootstrap-icons/icons/x-circle.svg?raw'\n\n// TODO: prefix most rules with \".fcs-query\"\nimport './styles.css'\n\n// --------------------------------------------------------------------------\n\ninterface FCSQueryBuilderProps {\n  query?: string\n  /** cursor position in query */\n  cursorPos?: [number, number] | number\n  resources?: Resource[]\n  onChange?: (query: string) => void\n}\n\nexport function FCSQueryBuilder({\n  query: queryProp,\n  cursorPos,\n  resources: resourcesProp,\n  onChange,\n  ...props\n}: FCSQueryBuilderProps & Partial<FCSQueryBuilderConfig>) {\n  const [query, setQuery] = useState(queryProp ?? '')\n  useEffect(() => setQuery(queryProp ?? ''), [queryProp])\n\n  // let's again filter for resources that have the ADV Data View? or ADVANCED_SEARCH search capability and at least one layer\n  const resources = useMemo(() => {\n    const filtered =\n      resourcesProp?.filter(\n        (resource) =>\n          (resource.availableDataViews?.find(\n            (dataview) => dataview.mimeType === 'application/x-clarin-fcs-adv+xml'\n          ) !== undefined ||\n            resource.searchCapabilitiesResolved.includes('ADVANCED_SEARCH')) &&\n          resource.availableLayers !== null &&\n          resource.availableLayers.length > 0\n      ) ?? []\n\n    if (resourcesProp && resourcesProp.length !== filtered.length) {\n      const resourcesDiff = resourcesProp.filter((resource) => !filtered.includes(resource))\n      console.warn(\n        'Filter out resource(s) that do(es) not correctly declare ADV query support',\n        resourcesDiff\n      )\n    }\n\n    return filtered\n  }, [resourcesProp])\n\n  // compute list of layers we know and want to make available\n  const layerInfo = useMemo(() => {\n    return resources\n      .map((resource) => {\n        const layerTypeToID = new Map<string, ResourceLayerIDInfo>()\n        resource.availableLayers!.forEach((layer) => {\n          if (!layerTypeToID.has(layer.layerType)) {\n            layerTypeToID.set(layer.layerType, { resultIDs: [], qualifiers: [] })\n          }\n          const data = layerTypeToID.get(layer.layerType)!\n          data.resultIDs.push(layer.resultId)\n          if (layer.qualifier !== null && layer.qualifier !== undefined) {\n            data.qualifiers.push(layer.qualifier)\n          }\n        })\n        return [...layerTypeToID.entries()].map(([layerType, layerIDs]) => ({\n          layerType,\n          resource,\n          layerIDs,\n        }))\n      })\n      .reduce((map, item) => {\n        item.forEach(({ layerType, resource, layerIDs }) => {\n          if (!map.has(layerType)) {\n            map.set(layerType, { resources: [], qualifiers: new Map() })\n          }\n          const data = map.get(layerType)!\n          data.resources.push({ resource, layerIDs })\n          if (layerIDs.qualifiers.length > 0) {\n            layerIDs.qualifiers.forEach((qualifier) => {\n              if (!data.qualifiers.has(qualifier)) {\n                data.qualifiers.set(qualifier, [])\n              }\n              data.qualifiers.get(qualifier)!.push(resource)\n            })\n          }\n        })\n        return map\n      }, new Map<string, LayerInfo>())\n  }, [resources])\n  // console.debug('layerInfo', { resources, layerInfo })\n\n  // console.debug('Parse query', { query, queryProp })\n  const parsed = useMemo(() => parseQuery(query), [query])\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleQueryChange() {\n    if (parsed) {\n      const { rewriter } = parsed\n\n      // TODO: maybe prune some whitespaces?\n      // NOTE: but do not interfere with user input!\n      // maybe separete input from query builder stuff\n\n      const newQuery = rewriter.getText()\n      setQuery(newQuery)\n      onChange?.(newQuery) // TODO: or do we wait for parsing to finish?\n    } else {\n      console.warn('No parsed query! Unable to handle change request', parsed)\n    }\n  }\n\n  function handleAddQuery(type: NewQuerySegmentType) {\n    // add text query to trigger adding of gui element\n    const text = NEW_QUERY_SEGMENTS_MAP[type].new\n    setQuery(text)\n    onChange?.(text)\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div id=\"query-builder\" className=\"fcs-query d-flex justify-content-center\">\n      <FCSQueryBuilderConfigProvider\n        enableWithin={props.enableWithin ?? false}\n        enableWrapGroup={props.enableWrapGroup ?? false}\n        enableWrapNegation={props.enableWrapNegation ?? false}\n        enableImplicitQuery={props.enableImplicitQuery ?? false}\n        enableMultipleQuerySegments={props.enableMultipleQuerySegments ?? true}\n        enableQuantifiers={props.enableQuantifiers ?? true}\n        enableRegexpFlags={props.enableRegexpFlags ?? false}\n        showBasicLayer={props.showBasicLayer ?? true}\n        showAllAdvancedLayers={props.showAllAdvancedLayers ?? false}\n        showCustomLayers={props.showCustomLayers ?? true}\n        showLayerQualifiers={props.showLayerQualifiers ?? true}\n        showResourceCountForLayer={props.showResourceCountForLayer ?? true}\n      >\n        <FCSResourceLayerInfoProvider resources={resources} layerInfo={layerInfo}>\n          {parsed ? (\n            <FCSParserLexerProvider\n              parser={parsed.parser}\n              lexer={parsed.lexer}\n              cursorPos={cursorPos}\n            >\n              <FCSQueryUpdaterProvider rewriter={parsed.rewriter}>\n                <Query tree={parsed.tree} onChange={handleQueryChange} />\n              </FCSQueryUpdaterProvider>\n            </FCSParserLexerProvider>\n          ) : (\n            <AddQuerySegmentButton onClick={handleAddQuery} />\n          )}\n        </FCSResourceLayerInfoProvider>\n      </FCSQueryBuilderConfigProvider>\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n\nfunction flattenQueryChildren(ctx: ParseTree, strict: boolean = true): Query_simpleContext[] {\n  if (ctx instanceof Query_disjunctionContext) {\n    if (strict) throw Error('Unsupported syntax: Query-Disjunction')\n    return []\n  }\n  if (ctx instanceof Query_groupContext) {\n    if (strict) throw Error('Unsupported syntax: Query-Group')\n    return []\n  }\n\n  if (ctx instanceof Query_simpleContext) {\n    return [ctx]\n  }\n  if (ctx instanceof Query_sequenceContext) {\n    return ctx.children.map((childCtx) => flattenQueryChildren(childCtx, strict)).flat(1)\n  }\n\n  if (strict)\n    throw Error(\n      `Invalid ParseTree for tokens ${ctx.getSourceInterval().toString()}: ${ctx.getText()}`\n    )\n  return []\n}\n\nfunction removeExpressionChild(ctx: ExpressionChild, rewriter: TokenStreamRewriter) {\n  rewriter.delete(ctx.start!, ctx.stop!)\n\n  // TODO: do we want to check for whitespaces around to collapse/remove?\n\n  // check upwards for things to delete to remain valid\n  const parentCtx = ctx.parent\n\n  // OR/AND expression lists\n  if (parentCtx instanceof Expression_andContext || parentCtx instanceof Expression_orContext) {\n    // if last child, then remove whole AND/OR expression\n    // NOTE: might not happen normally, as single expressions are not AND/OR\n    if (parentCtx.children.length === 1) {\n      removeExpressionChild(parentCtx, rewriter)\n      return\n    }\n\n    // remove bool symbol (if at start then next else the one before)\n    const childIdx = parentCtx.children.findIndex((childCtx) => childCtx === ctx)\n    if (childIdx === 0) {\n      const nextCtx = parentCtx.getChild(childIdx + 1)! as TerminalNode\n      rewriter.delete(nextCtx.symbol)\n    } else {\n      const prevCtx = parentCtx.getChild(childIdx - 1)! as TerminalNode\n      rewriter.delete(prevCtx.symbol)\n    }\n\n    // check if only one other sibling that is a group and parent's parent is a group\n    if (parentCtx.children.length === 3) {\n      const parentParentCtx = parentCtx.parent\n      const otherSiblingCtx = parentCtx.getChild(childIdx + (childIdx === 0 ? +2 : -2))\n      if (\n        parentParentCtx instanceof Expression_groupContext &&\n        otherSiblingCtx instanceof Expression_groupContext\n      ) {\n        // reduce double grouping\n        rewriter.delete(otherSiblingCtx.L_PAREN().symbol)\n        rewriter.delete(otherSiblingCtx.R_PAREN().symbol)\n      }\n    }\n\n    return\n  }\n\n  // for groups, simply collapse\n  if (parentCtx instanceof Expression_groupContext) {\n    removeExpressionChild(parentCtx, rewriter)\n    return\n  }\n\n  // for negation, also collapse?\n  if (parentCtx instanceof Expression_notContext) {\n    removeExpressionChild(parentCtx, rewriter)\n    return\n  }\n\n  console.warn('Unexpected other parent to remove?', { parentCtx, ctx })\n}\n\n// --------------------------------------------------------------------------\n// modify query buttons\n\nfunction AddQuerySegmentButton({ onClick }: { onClick?: (type: NewQuerySegmentType) => void }) {\n  const { enableImplicitQuery } = useFCSQueryBuilderConfig()\n\n  function handleAddSelection(eventKey: string | null) {\n    if (!eventKey) return\n    onClick?.(eventKey as NewQuerySegmentType)\n  }\n\n  return (\n    <>\n      <Dropdown\n        className=\"d-inline-block\"\n        onSelect={handleAddSelection}\n        aria-label=\"Add query segment\"\n      >\n        <Dropdown.Toggle variant=\"link\" className=\"add-query-segment-btn action-btn no-arrow\">\n          <i dangerouslySetInnerHTML={{ __html: plusCircleIcon }} aria-hidden=\"true\" />\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {NEW_QUERY_SEGMENTS.filter(\n            !enableImplicitQuery ? (item) => item.id !== 'string' : () => true\n          ).map((item) => (\n            <Dropdown.Item\n              eventKey={item.id}\n              key={item.id}\n              // as=\"button\"\n              // onClick={(event) => event.preventDefault()}\n            >\n              {item.label}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n\nfunction AddExpressionButton({\n  allowedIds,\n  onClick,\n}: {\n  allowedIds?: NewExpressionType[]\n  onClick?: (type: NewExpressionType) => void\n}) {\n  function handleAddSelection(eventKey: string | null) {\n    if (!eventKey) return\n    onClick?.(eventKey as NewExpressionType)\n  }\n\n  return (\n    <>\n      <Dropdown\n        className=\"d-inline-block\"\n        onSelect={handleAddSelection}\n        aria-label=\"Add expression\"\n      >\n        <Dropdown.Toggle variant=\"link\" className=\"add-expression-btn action-btn no-arrow\">\n          <i dangerouslySetInnerHTML={{ __html: plusCircleIcon }} aria-hidden=\"true\" />\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {NEW_EXPRESSIONS.filter(\n            allowedIds && allowedIds.length > 0\n              ? (item) => allowedIds.includes(item.id)\n              : () => true\n          ).map((item) => (\n            <Dropdown.Item eventKey={item.id} key={item.id}>\n              {item.label}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n\nfunction ChangeToExpressionListButton({\n  className,\n  onClick,\n}: {\n  className?: string\n  onClick?: (type: ChangeToExpressionListType) => void\n}) {\n  function handleAddSelection(eventKey: string | null) {\n    if (!eventKey) return\n    onClick?.(eventKey as ChangeToExpressionListType)\n  }\n\n  return (\n    <>\n      <Dropdown\n        className={['d-inline-block'].concat(className ?? []).join(' ')}\n        onSelect={handleAddSelection}\n        aria-label=\"Change to expressions list\"\n      >\n        <Dropdown.Toggle\n          variant=\"link\"\n          className=\"change-to-expression-list-btn action-btn no-arrow\"\n        >\n          <i dangerouslySetInnerHTML={{ __html: plusCircleIcon }} aria-hidden=\"true\" />\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {CHANGE_TO_EXPRESSION_LIST.map((item) => (\n            <Dropdown.Item\n              eventKey={item.id}\n              key={item.id}\n              // as=\"button\"\n              // onClick={(event) => event.preventDefault()}\n            >\n              {item.label}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n\nfunction WrapExpressionButton({\n  allowedIds,\n  className,\n  onClick,\n}: {\n  allowedIds?: WrapExpressionType[]\n  className?: string\n  onClick?: (type: WrapExpressionType) => void\n}) {\n  const { enableWrapGroup, enableWrapNegation } = useFCSQueryBuilderConfig()\n\n  function handleWrapSelection(eventKey: string | null) {\n    if (!eventKey) return\n    onClick?.(eventKey as WrapExpressionType)\n  }\n\n  if (!(enableWrapGroup || enableWrapNegation)) return null\n\n  return (\n    <>\n      <Dropdown\n        className={['d-inline-block'].concat(className ?? []).join(' ')}\n        onSelect={handleWrapSelection}\n        aria-label=\"Wrap expression\"\n      >\n        <Dropdown.Toggle\n          variant=\"link\"\n          className=\"wrap-expression-btn action-btn rounded-circle p-1 no-arrow\"\n        >\n          <i dangerouslySetInnerHTML={{ __html: bracesIcon }} aria-hidden=\"true\" />\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {WRAP_EXPRESSION.filter(\n            allowedIds && allowedIds.length > 0\n              ? (item) => allowedIds.includes(item.id)\n              : () => true\n          )\n            .filter(!enableWrapGroup ? (item) => item.id !== 'group' : () => true)\n            .filter(!enableWrapNegation ? (item) => item.id !== 'not' : () => true)\n            .map((item) => (\n              <Dropdown.Item eventKey={item.id} key={item.id}>\n                {item.label}\n              </Dropdown.Item>\n            ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  )\n}\n\nfunction RemoveButton({ className, onClick }: { className?: string; onClick?: () => void }) {\n  return (\n    <Button\n      variant=\"link\"\n      className={['del-btn action-btn rounded-circle p-1'].concat(className ?? []).join(' ')}\n      onClick={onClick}\n    >\n      <i dangerouslySetInnerHTML={{ __html: xCircleIcon }} aria-hidden=\"true\" />\n    </Button>\n  )\n}\n\nfunction AddQuantifierButton({ className, onClick }: { className?: string; onClick?: () => void }) {\n  return (\n    <Button\n      variant=\"link\"\n      className={['add-quantifier-btn action-btn rounded-circle p-1']\n        .concat(className ?? [])\n        .join(' ')}\n      onClick={onClick}\n    >\n      <i dangerouslySetInnerHTML={{ __html: repeatIcon }} aria-hidden=\"true\" />\n    </Button>\n  )\n}\n\n// --------------------------------------------------------------------------\n// query (sequences)\n\nfunction Query({ tree, onChange }: { tree: QueryContext; onChange?: () => void }) {\n  const { rewriter } = useFCSQueryUpdater()\n  const { enableWithin } = useFCSQueryBuilderConfig()\n\n  // required child if valid query, so should not be null\n  const queryCtx = tree.main_query()\n\n  const queryChildCtx = queryCtx.getChild(0)\n  const queryChildrenCtx = flattenQueryChildren(queryChildCtx!, false)\n\n  const withinCtx = enableWithin ? tree.within_part() : null\n  const withinValue = withinCtx?.getText() ?? ''\n\n  const [within, setWithin] = useState(withinValue)\n  useEffect(() => setWithin(withinValue), [withinValue])\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleAddWithinClause() {\n    const newWithin = 'sentence'\n    setWithin(newWithin)\n\n    const tokenIndex = queryCtx.stop?.tokenIndex\n    if (tokenIndex !== undefined) {\n      rewriter.insertAfter(tokenIndex, ` within ${newWithin}`)\n      onChange?.()\n    } else {\n      // TODO: throw instead?\n      console.warn('Unable to add within part. End token index not found!', { queryCtx })\n    }\n  }\n\n  function handleWithinChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newWithin = event.target.value\n    setWithin(newWithin)\n\n    if (withinCtx) {\n      const withinPartCtx = withinCtx.within_part_simple()\n      const token = withinPartCtx?.SIMPLE_WITHIN_SCOPE()\n      if (token) {\n        rewriter.replaceSingle(token.symbol, newWithin)\n        onChange?.()\n      } else {\n        console.warn('Error trying to update within part. Token not found!', {\n          withinCtx,\n          withinPartCtx,\n          token,\n        })\n      }\n    } else {\n      console.warn('Error trying to update within part. Context not found!', { tree, withinCtx })\n    }\n  }\n\n  function handleDeleteWithinClause() {\n    if (withinCtx) {\n      setWithin('')\n\n      rewriter.delete(tree.WITHIN()!.symbol, withinCtx.stop!)\n      onChange?.()\n    } else {\n      console.warn('Error trying to remove within part. Context not found!', { tree, withinCtx })\n    }\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div className=\"block query flex-grow-1 justify-content-center d-flex flex-wrap row-gap-2 column-gap-1 border rounded p-1\">\n      <QuerySequence children={queryChildrenCtx} onChange={onChange} />\n      {enableWithin &&\n        (within ? (\n          <div className=\"block within-clause position-relative d-flex column-gap-2 align-items-center border rounded p-1\">\n            <code className=\"keyword\">within</code>\n            <Form.Select className=\"w-auto\" value={within} onChange={handleWithinChange}>\n              {WITHIN_CHOICES.map((value) => (\n                <option value={value} key={value}>\n                  {value}\n                </option>\n              ))}\n            </Form.Select>\n            <RemoveButton\n              className=\"del-within-clause-btn position-absolute top-0 start-100 translate-middle\"\n              onClick={handleDeleteWithinClause}\n            />\n          </div>\n        ) : (\n          <Button size=\"sm\" onClick={handleAddWithinClause} style={{ alignSelf: 'center' }}>\n            Add within clause\n          </Button>\n        ))}\n    </div>\n  )\n}\n\nfunction QuerySequence({\n  children,\n  onChange,\n}: {\n  children: Query_simpleContext[]\n  onChange?: () => void\n}) {\n  const { rewriter } = useFCSQueryUpdater()\n  const { enableMultipleQuerySegments } = useFCSQueryBuilderConfig()\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  // TODO: callbacks probably not required due to re-rendering\n\n  const handleAddFirst = useCallback(\n    (type: NewQuerySegmentType) => {\n      const tokenIndex = children && children.length > 0 ? children[0].start!.tokenIndex : 0\n      const text = NEW_QUERY_SEGMENTS_MAP[type].new\n      rewriter.insertBefore(tokenIndex, `${text} `)\n      onChange?.()\n    },\n    [rewriter, children, onChange]\n  )\n  const handleAddAfterQuery = useCallback(\n    (type: NewQuerySegmentType, ctx: Query_simpleContext) => {\n      const tokenIndex = ctx.stop!.tokenIndex\n      const text = NEW_QUERY_SEGMENTS_MAP[type].new\n      rewriter.insertAfter(tokenIndex, ` ${text}`)\n      onChange?.()\n    },\n    [rewriter, onChange]\n  )\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div className=\"block query-simple-or-sequence border rounded py-1 px-2 d-flex flex-wrap row-gap-3 column-gap-2 align-items-center\">\n      {enableMultipleQuerySegments && (\n        <AddQuerySegmentButton key={`add-0`} onClick={handleAddFirst} />\n      )}\n      {children.map((ctx) => (\n        <Fragment key={`query-${ctx.getSourceInterval().toString()}`}>\n          <QuerySimple ctx={ctx} onChange={onChange} />\n          {enableMultipleQuerySegments && (\n            <AddQuerySegmentButton onClick={(type) => handleAddAfterQuery(type, ctx)} />\n          )}\n        </Fragment>\n      ))}\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n// query/expression input\n\nfunction ImplicitQueryInput({\n  value: valueProp,\n  onChange,\n}: {\n  value: string\n  onChange?: (value: string) => void\n}) {\n  const [value, setValue] = useState(valueProp)\n  useEffect(() => setValue(valueProp), [valueProp])\n\n  return (\n    <Form.Control\n      className=\"d-inline\"\n      style={{ width: '10ch' }}\n      value={value}\n      onChange={(event) => setValue(event.target.value)}\n      onBlur={() => onChange?.(value)}\n    />\n  )\n}\n\nfunction BasicExpressionInput({\n  ctx,\n  showChangeToExpressionListButton = false,\n  onChange,\n}: {\n  ctx: Expression_basicContext\n  showChangeToExpressionListButton?: boolean\n  onChange?: () => void\n}) {\n  const { rewriter } = useFCSQueryUpdater()\n  const { layerInfo } = useFCSResourceLayerInfo()\n  const {\n    showBasicLayer,\n    showAllAdvancedLayers,\n    showCustomLayers,\n    showLayerQualifiers,\n    showResourceCountForLayer,\n  } = useFCSQueryBuilderConfig()\n  const { cursorPos } = useFCSParserLexer()\n\n  const isCursorOnMe = isCursorOnContext(ctx, cursorPos)\n\n  const basicLayer = 'word'\n  const advancedLayers = Object.keys(ADVANCED_LAYERS_MAP)\n  const standardLayers = [basicLayer, ...advancedLayers]\n  const customLayers = showCustomLayers\n    ? [...layerInfo.keys()].filter((layer) => !standardLayers.includes(layer)).toSorted()\n    : []\n\n  const hasBasicLayer = layerInfo.has(basicLayer)\n  const hasAdvancedLayers =\n    [...layerInfo.keys()].filter((layer) => Object.keys(ADVANCED_LAYERS_MAP).includes(layer))\n      .length > 0\n  const hasCustomLayers = customLayers.length > 0\n\n  const attributeCtx = ctx.attribute()\n  const operatorNode = ctx.getChild(1) as TerminalNode\n  const regexpNode = ctx.regexp().regexp_pattern().REGEXP()\n\n  const [layer, setLayer] = useState('text')\n  const [operator, setOperator] = useState('is')\n  const [value, setValue] = useState('')\n  const oldOperatorRef = useRef(operator)\n\n  // update from outside (query input change)\n  useEffect(() => {\n    const identifierCtx = attributeCtx.identifier()\n    const qualifierCtx = attributeCtx.qualifier()\n    const newLayer =\n      qualifierCtx !== null\n        ? `${qualifierCtx.getText()}:${identifierCtx.getText()}`\n        : `${identifierCtx.getText()}`\n\n    const isOpEq = operatorNode.symbol.type === FCSParser.OPERATOR_EQ\n\n    const valueQuoted = regexpNode.symbol.text\n    const valueUnquoted = valueQuoted?.slice(1, -1)\n\n    const processedInput = getInputParsed(valueUnquoted ?? '', isOpEq)\n    let newOperator = processedInput.operator\n    let newValue = unescapeValue(processedInput.value, newOperator)!\n    console.debug('parsed input', { valueUnquoted, processedInput, newValue })\n\n    // TODO: we may not want to change the operator if we simply switch from \"regex\" to \"not-regex\"\n    // TODO: or lets simply delay, so that we only update the UI if required? --> onBlur on whole expression?\n    if (\n      oldOperatorRef.current !== newOperator &&\n      ['regex', 'not-regex'].includes(oldOperatorRef.current)\n    ) {\n      console.debug('overwriting computed newOperator?', {\n        newOperator,\n        oldOperatorRef: oldOperatorRef.current,\n      })\n      newOperator = oldOperatorRef.current\n    }\n\n    // check for layers with vocabulary if value is known, otherwise replace with defaul\n    const layerInfo = LAYER_VALUE_OPTIONS_MAP[newLayer]\n    if (\n      layerInfo &&\n      layerInfo.options &&\n      layerInfo.options.length > 0 &&\n      // @ts-expect-error: we do want to check here\n      (!layerInfo.options.map((option) => option.value).includes(newValue) || !newValue)\n    ) {\n      newValue = layerInfo.options[0]?.value ?? ''\n      newOperator = 'is'\n\n      // TODO: if we change here, then we need to update the query, too ...\n      // BUT will need to prevent recursive updates, too\n    }\n\n    setLayer(newLayer ?? '')\n    setOperator(newOperator)\n    setValue(newValue)\n    oldOperatorRef.current = newOperator\n  }, [attributeCtx, operatorNode, regexpNode])\n\n  const parentCtx = ctx.parent\n  const allowedWrapIds = (Object.keys(WRAP_EXPRESSION_MAP) as WrapExpressionType[])\n    .filter(parentCtx instanceof Expression_groupContext ? (id) => id !== 'group' : () => true)\n    .filter(parentCtx instanceof Expression_notContext ? (id) => id !== 'group' : () => true)\n\n  const layerValueInputInfo = LAYER_VALUE_OPTIONS_MAP[layer]\n\n  // ------------------------------------------------------------------------\n  // helpers\n\n  function getInputParsed(value: string, isOpEq: boolean) {\n    const startsWithAnything = value.startsWith('.*')\n    const endsWithAnything = value.endsWith('.*')\n\n    const valueWithoutAnythingMatcher =\n      startsWithAnything && endsWithAnything\n        ? value.slice(2, -2)\n        : startsWithAnything\n        ? value.slice(2)\n        : endsWithAnything\n        ? value.slice(0, -2)\n        : value\n\n    const containsRegexExpressions = checkIfContainsRegex(valueWithoutAnythingMatcher)\n\n    if (!containsRegexExpressions) {\n      if (isOpEq) {\n        if (startsWithAnything && endsWithAnything) {\n          return { operator: 'contains', value: valueWithoutAnythingMatcher }\n        }\n        if (startsWithAnything) {\n          return { operator: 'ends-with', value: value.slice(2) }\n        }\n        if (endsWithAnything) {\n          return { operator: 'starts-with', value: value.slice(0, -2) }\n        }\n        return { operator: 'is', value: value }\n      }\n      if (startsWithAnything || endsWithAnything) {\n        return { operator: 'not-regex', value: value }\n      }\n      return { operator: 'is-not', value: value }\n    }\n    return { operator: isOpEq ? 'regex' : 'not-regex', value: value }\n  }\n\n  function unescapeValue(value: string | undefined, operator: string) {\n    return ['regex', 'not-regex'].includes(operator)\n      ? unescapeQuotes(value)\n      : unescapeRegexValue(value)\n  }\n\n  function escapeValue(value: string | undefined, operator: string) {\n    return ['regex', 'not-regex'].includes(operator) ? escapeQuotes(value) : escapeRegexValue(value)\n  }\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleLayerChange(eventKey: string | null) {\n    const newLayer = eventKey\n    if (!newLayer) return\n    if (newLayer === layer) return\n\n    // TODO: need to clear value/regexp?\n    // TODO: update operator if not fitting?\n\n    setLayer(newLayer) // unnecessary if we completely rebuild UI?\n    rewriter.replace(attributeCtx.start!, attributeCtx.stop!, newLayer)\n    onChange?.()\n  }\n\n  function handleOperatorChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newOperator = event.target.value\n    const oldOperator = operator\n    setOperator(newOperator) // unnecessary if we completely rebuild UI\n    oldOperatorRef.current = newOperator\n\n    const opSybmol = ['is-not', 'not-regex'].includes(newOperator) ? '!=' : '='\n    rewriter.replaceSingle(operatorNode.symbol, opSybmol)\n\n    let newValue = value ?? ''\n\n    const newOpInfo = EXPRESSION_OPERATORS_MAP[newOperator]\n    const oldOpInfo = EXPRESSION_OPERATORS_MAP[oldOperator]\n    // bail out if unexpected\n    if (!newOpInfo) {\n      console.warn('Unexpected state, did not find known operator value!', {\n        newOpInfo,\n        oldOpInfo,\n        newOperator,\n        oldOperator,\n      })\n      return\n    }\n\n    newValue = escapeValue(newValue, newOperator)!\n\n    // TODO: do we want to use the regex input value from \"contains\"/\"starts-with\"/\"ends-with\" when changing to \"regex\"/\"not-regex\"?\n    // if (['regex', 'not-regex'].includes(newOperator)) {\n    //   newValue = `${oldOpInfo.valueBefore ?? ''}${newValue}${oldOpInfo.valueAfter ?? ''}`\n    // }\n\n    rewriter.replaceSingle(\n      regexpNode.symbol,\n      `\"${newOpInfo.valueBefore ?? ''}${newValue}${newOpInfo.valueAfter ?? ''}\"`\n    )\n\n    onChange?.()\n  }\n\n  function handleRegexpChange() {\n    // escape if quotes!\n    const escapedValue = ['regex', 'not-regex'].includes(operator)\n      ? escapeQuotes(value)\n      : escapeRegexValue(value)\n\n    const opInfo = EXPRESSION_OPERATORS_MAP[operator]\n\n    rewriter.replaceSingle(\n      regexpNode.symbol,\n      `\"${opInfo?.valueBefore ?? ''}${escapedValue}${opInfo?.valueAfter ?? ''}\"`\n    )\n    // do we want to build a query and return? or use a custom rewrite program to extract our change?\n    onChange?.()\n  }\n\n  function handleChangeToExpressionList(type: ChangeToExpressionListType, isBefore: boolean) {\n    const change = CHANGE_TO_EXPRESSION_LIST_MAP[type]\n\n    if (isBefore) {\n      rewriter.insertBefore(ctx.start!, `${change.newBefore} `)\n    } else {\n      rewriter.insertAfter(ctx.stop!, ` ${change.newAfter}`)\n    }\n\n    // const parentCtx = ctx.parent\n    // const insertParens = !(\n    //   parentCtx instanceof Expression_notContext || parentCtx instanceof Expression_groupContext\n    // )\n    // if (insertParens) {\n    //   rewriter.insertBefore(ctx.start!, `( `)\n    //   rewriter.insertAfter(ctx.stop!, ` )`)\n    // }\n\n    onChange?.()\n  }\n\n  function handleWrap(type: WrapExpressionType) {\n    const change = WRAP_EXPRESSION_MAP[type]\n\n    if (change.newBefore) rewriter.insertBefore(ctx.start!, change.newBefore)\n    if (change.newAfter) rewriter.insertAfter(ctx.stop!, change.newAfter)\n\n    onChange?.()\n  }\n\n  function handleRemove() {\n    removeExpressionChild(ctx, rewriter)\n    onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  function renderLayerItem(layerId: string, description: string | undefined = undefined) {\n    if (!description) {\n      return (\n        <>\n          <strong>{layerId}</strong>\n          {renderLayerResourceCount(layerId)}\n        </>\n      )\n    }\n\n    return (\n      <>\n        <strong>{layerId}</strong>: {description}\n        {renderLayerResourceCount(layerId)}\n      </>\n    )\n  }\n\n  function renderLayerResourceCount(layer: string, qualifier: string | undefined = undefined) {\n    if (!showResourceCountForLayer) return null\n\n    const countLayer = layerInfo.get(layer)?.resources.length ?? 0\n    const countQualifier = qualifier\n      ? layerInfo.get(layer)?.qualifiers?.get(qualifier)?.length ?? 0\n      : undefined\n\n    // if same counts, then do not output\n    if (qualifier && countLayer === countQualifier) return null\n\n    const count = qualifier ? countQualifier : countLayer\n\n    return (\n      <>\n        <br />\n        <small className=\"text-body-secondary\">Supported by {count} resources.</small>\n      </>\n    )\n  }\n\n  function renderLayerQualifiers(layerId: string) {\n    if (!showLayerQualifiers) return null\n\n    const qualifiers = layerInfo.get(layerId)?.qualifiers\n    if (!qualifiers || qualifiers.size === 0) return null\n\n    const qualifierKeys = [...qualifiers.keys()]\n\n    return qualifierKeys.map((qualifierId) => {\n      const id = `${qualifierId}:${layerId}`\n\n      return (\n        <Dropdown.Item eventKey={id} active={layer === id} key={id}>\n          <div className=\"ms-3\">\n            <strong>{qualifierId}</strong>:{layerId}\n            {renderLayerResourceCount(layerId, qualifierId)}\n          </div>\n        </Dropdown.Item>\n      )\n    })\n  }\n\n  function renderRegexpInput() {\n    if (layerValueInputInfo && layerValueInputInfo.options?.length > 0) {\n      return (\n        <Dropdown\n          onSelect={(eventKey) => setValue(eventKey ?? '')}\n          // TODO: does onBlur reliably fire after onSelect has finished processing the state update?\n          onBlur={handleRegexpChange}\n        >\n          <Dropdown.Toggle className=\"form-select\">{value}</Dropdown.Toggle>\n          <Dropdown.Menu>\n            {layerValueInputInfo.options.map((option) => (\n              <Dropdown.Item\n                eventKey={option.value}\n                key={option.value}\n                active={value === option.value}\n              >\n                {option.label}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      )\n    }\n\n    return (\n      <Form.Control\n        className=\"d-inline\"\n        style={{ width: '10ch' }}\n        value={value}\n        onChange={(event) => setValue(event.target.value)}\n        onBlur={handleRegexpChange}\n      />\n    )\n  }\n\n  return (\n    <div\n      className={[\n        'block input-block basic-expression position-relative focus-ring border rounded py-3 ps-2 pe-3 my-2 ms-1 me-2',\n      ]\n        .concat([isCursorOnMe ? 'cursor-focus' : ''])\n        .join(' ')}\n    >\n      {showChangeToExpressionListButton && (\n        <ChangeToExpressionListButton\n          className=\"position-absolute top-0 start-50 translate-middle rounded-circle p-1\"\n          onClick={(type) => handleChangeToExpressionList(type, true)}\n        />\n      )}\n\n      <div className=\"d-flex justify-content-center column-gap-2\">\n        {/* field */}\n        <Dropdown onSelect={handleLayerChange}>\n          <Dropdown.Toggle className=\"form-select\">{layer}</Dropdown.Toggle>\n          <Dropdown.Menu>\n            <div className=\"d-flex\">\n              <div\n                className={([] as string[])\n                  .concat(showCustomLayers && hasCustomLayers ? ['border-end pe-1'] : [])\n                  .join(' ')}\n              >\n                {/* custom user input? - \"unknown layer\" category */}\n                {showBasicLayer && (\n                  <>\n                    <Dropdown.Header>Basic Search Layer</Dropdown.Header>\n                    <Dropdown.Item eventKey={basicLayer} active={layer === basicLayer}>\n                      {renderLayerItem(basicLayer)}\n                    </Dropdown.Item>\n                    <Dropdown.Divider />\n                  </>\n                )}\n                {(showBasicLayer || (showCustomLayers && customLayers.length > 0)) && (\n                  <Dropdown.Header>Advanced Search Layers</Dropdown.Header>\n                )}\n                {ADVANCED_LAYERS.filter(\n                  !showAllAdvancedLayers ? (layerData) => layerInfo.has(layerData.id) : () => true\n                ).map((layerData) => (\n                  <Fragment key={layerData.id}>\n                    <Dropdown.Item eventKey={layerData.id} active={layer === layerData.id}>\n                      <strong>{layerData.id}</strong>: {layerData.label}\n                      {renderLayerResourceCount(layerData.id)}\n                    </Dropdown.Item>\n                    {renderLayerQualifiers(layerData.id)}\n                  </Fragment>\n                ))}\n                {!showBasicLayer && !showAllAdvancedLayers && customLayers.length === 0 && (\n                  // real exception case, probably for resources that specify ADVANCED_SEARCH capability but no supported layers?\n                  // and no other normal resources are selected!\n                  <Dropdown.ItemText style={{ width: 'max-content' }}>\n                    <em className=\"text-warning-emphasis\">No supported layers available?!</em>\n                    <br />\n                    <em className=\"text-secondary\">Maybe select a few more resources.</em>\n                  </Dropdown.ItemText>\n                )}\n              </div>\n              <div\n                className={([] as string[])\n                  .concat((showBasicLayer && hasBasicLayer) || hasAdvancedLayers ? ['ps-1'] : [])\n                  .join(' ')}\n              >\n                {showCustomLayers && customLayers.length > 0 && (\n                  <>\n                    <Dropdown.Header>Custom Layers</Dropdown.Header>\n                    {customLayers.map((layerId) => (\n                      <Fragment key={layerId}>\n                        <Dropdown.Item eventKey={layerId} active={layer === layerId}>\n                          <strong>{layerId}</strong>\n                          {renderLayerResourceCount(layerId)}\n                        </Dropdown.Item>\n                        {renderLayerQualifiers(layerId)}\n                      </Fragment>\n                    ))}\n                  </>\n                )}\n              </div>\n            </div>\n          </Dropdown.Menu>\n        </Dropdown>\n        {/* op */}\n        <Form.Select\n          style={{ width: 'fit-content' }}\n          value={operator}\n          onChange={handleOperatorChange}\n        >\n          {EXPRESSION_OPERATORS.map((operator) => (\n            <option key={operator.id} value={operator.id}>\n              {operator.label}\n            </option>\n          ))}\n        </Form.Select>\n        {/* regexp */}\n        {renderRegexpInput()}\n      </div>\n\n      {showChangeToExpressionListButton && (\n        <ChangeToExpressionListButton\n          className=\"position-absolute top-100 start-50 translate-middle rounded-circle p-1\"\n          onClick={(type) => handleChangeToExpressionList(type, false)}\n        />\n      )}\n\n      <div className=\"actions position-absolute top-0 d-flex\">\n        <WrapExpressionButton allowedIds={allowedWrapIds} onClick={handleWrap} />\n        <RemoveButton onClick={handleRemove} />\n      </div>\n    </div>\n  )\n}\n\nfunction QuantifierInput({ ctx, onChange }: { ctx: QuantifierContext; onChange?: () => void }) {\n  const { rewriter } = useFCSQueryUpdater()\n\n  // check what type of quantifier, symbol vs. range expression\n  const isZeroOrMore = ctx.Q_ZERO_OR_MORE() !== null // *\n  const isOneOrMore = ctx.Q_ONE_OR_MORE() !== null // +\n  const isZeroOrOne = ctx.Q_ZERO_OR_ONE() !== null // ?\n  const isRange = !(isZeroOrMore || isOneOrMore || isZeroOrOne) // { ... }\n  const numChildren = ctx.getChildCount()\n  const hasCommaRange = numChildren >= 4\n\n  // { N } or { N ,\n  const nodeN =\n    isRange && (numChildren === 3 || ctx.Q_COMMA() === ctx.getChild(2))\n      ? (ctx.getChild(1) as TerminalNode).symbol\n      : null\n  // { , M } or { N, M }\n  const nodeM =\n    isRange && numChildren >= 4 && ctx.Q_COMMA() === ctx.getChild(numChildren - 3)\n      ? (ctx.getChild(numChildren - 2) as TerminalNode).symbol\n      : null\n  // store temporarily here first for useEffect updating\n  const valueN = nodeN !== null ? Number.parseInt(nodeN.text!) : null\n  const valueM = nodeM !== null ? Number.parseInt(nodeM.text!) : null\n\n  const valueSelection = isRange\n    ? valueN !== null && valueM !== null\n      ? 'n-m'\n      : valueN !== null\n      ? hasCommaRange\n        ? 'n-'\n        : 'n-n'\n      : valueM !== null\n      ? '-m'\n      : null // this should not really happen\n    : isZeroOrMore\n    ? '*'\n    : isZeroOrOne\n    ? '?'\n    : isOneOrMore\n    ? '+'\n    : null // this should not really happen\n\n  const [quantifierSelection, setQuantifierSelection] = useState<QuantifierChoicesType>(\n    valueSelection ?? '?'\n  )\n  const [quantifierN, setQuantifierN] = useState<number | null>(valueN)\n  const [quantifierM, setQuantifierM] = useState<number | null>(valueM)\n  useEffect(() => {\n    setQuantifierN(valueN)\n    setQuantifierM(valueM)\n  }, [valueN, valueM])\n\n  const isInvalidRange =\n    (quantifierN !== null && quantifierM !== null && quantifierN > quantifierM) ||\n    (quantifierN !== null && quantifierN < 0) ||\n    (quantifierM !== null && quantifierM < 1) // makes this somewhat invalid\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleQuantifierSelectionChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newQuantifierSelection = event.target.value\n    setQuantifierSelection(newQuantifierSelection as QuantifierChoicesType)\n\n    // TODO: extract defauls\n    // TODO: replace template with user inputs (if changed between numbers)\n    const text = QUANTIFIER_CHOICES_MAP[newQuantifierSelection].new ?? '?'\n    rewriter.replace(ctx.start!, ctx.stop!, text)\n    onChange?.()\n  }\n\n  function handleQuantifierNChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const value = Number.parseInt(event.target.value)\n    setQuantifierN(!Number.isNaN(value) ? value : null)\n\n    if (nodeN !== null && !Number.isNaN(value)) {\n      rewriter.replaceSingle(nodeN, value.toString())\n      onChange?.()\n    }\n  }\n\n  function handleQuantifierMChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const value = Number.parseInt(event.target.value)\n    setQuantifierM(!Number.isNaN(value) ? value : null)\n\n    if (nodeM !== null && !Number.isNaN(value)) {\n      rewriter.replaceSingle(nodeM, value.toString())\n      onChange?.()\n    }\n  }\n\n  function handleRemove() {\n    rewriter.delete(ctx.start!, ctx.stop!)\n    onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div\n      className={[\n        'block input-block quantifier position-relative border rounded p-1 pt-3 px-1 m-1 me-2 mt-2',\n      ]\n        .concat(isInvalidRange ? ['invalid-range'] : [])\n        .join(' ')}\n    >\n      <div className=\"d-flex flex-column align-items-center row-gap-1\">\n        <Form.Select\n          size=\"sm\"\n          style={{ width: 'fit-content' }}\n          value={quantifierSelection}\n          onChange={handleQuantifierSelectionChange}\n        >\n          {/* feature flags for symbols/ranges? */}\n          {QUANTIFIER_CHOICES.map((item) => (\n            <option value={item.id} key={item.id}>\n              {item.label}\n            </option>\n          ))}\n        </Form.Select>\n        <div className=\"d-flex align-items-baseline column-gap-1\">\n          {['+', '*', '?'].includes(quantifierSelection) ? (\n            <code className=\"keyword\">{quantifierSelection}</code>\n          ) : (\n            <>\n              <code className=\"keyword\">{'{'}</code>\n              <Form.Text>Repeat</Form.Text>\n              {['n-m', 'n-', 'n-n'].includes(quantifierSelection) && (\n                <Form.Control\n                  size=\"sm\"\n                  style={{ width: '8ch' }}\n                  type=\"number\"\n                  min={quantifierSelection === 'n-n' ? 1 : 0}\n                  max={quantifierSelection === 'n-m' ? quantifierM ?? undefined : undefined}\n                  value={quantifierN ?? 0}\n                  onChange={handleQuantifierNChange}\n                />\n              )}\n              {quantifierSelection === 'n-m' && <Form.Text>to</Form.Text>}\n              {['n-m', '-m'].includes(quantifierSelection) && (\n                <Form.Control\n                  size=\"sm\"\n                  style={{ width: '8ch' }}\n                  type=\"number\"\n                  min={quantifierSelection === 'n-m' ? quantifierN || 1 : 1}\n                  value={quantifierM ?? quantifierN ?? 1}\n                  onChange={handleQuantifierMChange}\n                />\n              )}\n              <code className=\"keyword\">{'}'}</code>\n            </>\n          )}\n        </div>\n      </div>\n\n      <RemoveButton\n        className=\"del-quantifier-btn position-absolute top-0 start-100 translate-middle\"\n        onClick={handleRemove}\n      />\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n// query segments and expressions\n\nfunction QuerySimple({ ctx, onChange }: { ctx: Query_simpleContext; onChange?: () => void }) {\n  const { rewriter } = useFCSQueryUpdater()\n  const { enableQuantifiers } = useFCSQueryBuilderConfig()\n  const { cursorPos } = useFCSParserLexer()\n\n  const queryImplicitCtx = ctx.query_implicit()\n  const querySegmentCtx = ctx.query_segment()\n  const quantifierCtx = ctx.quantifier()\n\n  const isImplicit = queryImplicitCtx !== null\n\n  const isCursorOnMe = isImplicit\n    ? isCursorOnContext(queryImplicitCtx, cursorPos)\n    : isCursorOnContext(querySegmentCtx, cursorPos)\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleRemove() {\n    // TODO: validation required?\n    rewriter.delete(ctx.start!, ctx.stop!)\n    onChange?.()\n  }\n\n  function handleAddQuantifier() {\n    rewriter.insertAfter(ctx.stop!, ` ${DEFAULT_NEW_QUANTIFIER}`)\n    onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  function renderQuery() {\n    if (queryImplicitCtx !== null) {\n      const regexpNode = queryImplicitCtx.regexp().regexp_pattern().REGEXP()\n      const valueQuoted = regexpNode.symbol.text\n      // const quoteChar = valueQuoted?.charAt(0)\n      const value = unescapeQuotes(valueQuoted?.slice(1, -1))\n\n      function handleValueChange(value: string) {\n        rewriter.replaceSingle(regexpNode.symbol, `\"${escapeQuotes(value)}\"`)\n        onChange?.()\n      }\n\n      return <ImplicitQueryInput value={value ?? ''} onChange={handleValueChange} />\n    }\n\n    if (querySegmentCtx !== null) {\n      const expressionCtx = querySegmentCtx.expression()\n\n      // empty (placeholder) query segment\n      if (!expressionCtx) {\n        function handleAddExpressionList(type: NewExpressionType) {\n          const text = NEW_EXPRESSIONS_MAP[type].new\n          rewriter.insertAfter(ctx.start!, ` ${text} `)\n          onChange?.()\n        }\n\n        return <AddExpressionButton onClick={(type) => handleAddExpressionList(type)} />\n      }\n\n      return <Expression ctx={expressionCtx} onChange={onChange} />\n    }\n\n    throw Error('Invalid parse tree. Expected \"query-segment\" context.')\n  }\n\n  return (\n    <div\n      className={[\n        'block query-simple focus-ring border rounded p-1 pe-2 my-2 position-relative d-flex align-items-center',\n      ]\n        .concat(isCursorOnMe ? 'cursor-focus' : '')\n        .join(' ')}\n    >\n      {isImplicit ? <code className=\"delims\">\"</code> : <code className=\"delims\">[</code>}\n      {renderQuery()}\n      {isImplicit ? <code className=\"delims\">\"</code> : <code className=\"delims\">]</code>}\n      {enableQuantifiers && quantifierCtx !== null && (\n        <QuantifierInput ctx={quantifierCtx} onChange={onChange} />\n      )}\n      <RemoveButton\n        className=\"del-query-segment-btn position-absolute top-0 start-100 translate-middle\"\n        onClick={handleRemove}\n      />\n      {enableQuantifiers && quantifierCtx === null && (\n        <AddQuantifierButton\n          className=\"position-absolute top-100 start-100 translate-middle\"\n          onClick={handleAddQuantifier}\n        />\n      )}\n    </div>\n  )\n}\n\n// TODO: is more or less virtual, maybe fold into QuerySimple\nfunction Expression({ ctx, onChange }: { ctx: ExpressionContext; onChange?: () => void }) {\n  const expressionCtx = ctx.getChild(0)! as ExpressionChild\n\n  // terminal expression\n  if (expressionCtx instanceof Expression_basicContext) {\n    return (\n      <BasicExpressionInput\n        ctx={expressionCtx}\n        showChangeToExpressionListButton={true}\n        onChange={onChange}\n      />\n    )\n  }\n\n  // wrapper: not/group\n  if (\n    expressionCtx instanceof Expression_notContext ||\n    expressionCtx instanceof Expression_groupContext\n  ) {\n    return <ExpressionWrap ctx={expressionCtx} onChange={onChange} />\n  }\n\n  // list: or/and\n  return <ExpressionList ctx={expressionCtx} onChange={onChange} />\n}\n\nfunction ExpressionWrap({\n  ctx,\n  onChange,\n}: {\n  ctx: Expression_notContext | Expression_groupContext\n  onChange?: () => void\n}) {\n  const isNegation = ctx instanceof Expression_notContext\n  const isGroup = ctx instanceof Expression_groupContext\n\n  const innerCtx = ctx.getChild(1)! as ExpressionChild\n\n  return (\n    <div\n      className={['block expression-wrap position-relative p-1 m-1 border rounded']\n        .concat(isNegation ? ['negation-expression d-flex align-items-center'] : [])\n        .concat(isGroup ? ['group-expression d-flex align-items-center'] : [])\n        .join(' ')}\n    >\n      {isNegation && <code className=\"delims\">!</code>}\n      {isGroup && <code className=\"delims\">(</code>}\n      {innerCtx instanceof Expression_basicContext ? (\n        <BasicExpressionInput\n          ctx={innerCtx}\n          showChangeToExpressionListButton={!isNegation}\n          onChange={onChange}\n        />\n      ) : innerCtx instanceof Expression_notContext ||\n        innerCtx instanceof Expression_groupContext ? (\n        <ExpressionWrap ctx={innerCtx} onChange={onChange} />\n      ) : (\n        <ExpressionList ctx={innerCtx} onChange={onChange} />\n      )}\n      {isGroup && <code className=\"delims\">)</code>}\n    </div>\n  )\n}\n\nfunction ExpressionList({\n  ctx,\n  onChange,\n}: {\n  ctx: Expression_orContext | Expression_andContext\n  onChange?: () => void\n}) {\n  const { rewriter } = useFCSQueryUpdater()\n\n  const isAndExpression = ctx instanceof Expression_andContext\n  const isOrExpression = ctx instanceof Expression_orContext\n\n  const allowedIds = (Object.keys(NEW_EXPRESSIONS_MAP) as NewExpressionType[])\n    .filter(isAndExpression ? (id) => id !== 'and' : () => true)\n    .filter(isOrExpression ? (id) => id !== 'or' : () => true)\n  const newExpressionOp = isAndExpression ? '&' : '|'\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleAddFirst(type: NewExpressionType) {\n    const tokenIndex =\n      ctx.children.length > 0 ? (ctx.children as ExpressionChild[])[0].start!.tokenIndex : 0\n    const text = NEW_EXPRESSIONS_MAP[type].new\n\n    const textMaybeWrapped = type === 'basic' ? text : `( ${text} )`\n    rewriter.insertBefore(tokenIndex, `${textMaybeWrapped} ${newExpressionOp} `)\n    onChange?.()\n  }\n\n  function handleAddAfterExpression(type: NewExpressionType, ctx: ExpressionChild) {\n    const tokenIndex = ctx.stop!.tokenIndex\n    const text = NEW_EXPRESSIONS_MAP[type].new\n\n    const textMaybeWrapped = type === 'basic' ? text : `( ${text} )`\n    rewriter.insertAfter(tokenIndex, ` ${newExpressionOp} ${textMaybeWrapped}`)\n    onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  function renderChild(childCtx: ExpressionChild) {\n    if (childCtx instanceof Expression_basicContext) {\n      return (\n        <BasicExpressionInput\n          ctx={childCtx}\n          showChangeToExpressionListButton={false}\n          onChange={onChange}\n        />\n      )\n    }\n\n    if (childCtx instanceof Expression_notContext || childCtx instanceof Expression_groupContext) {\n      return <ExpressionWrap ctx={childCtx} onChange={onChange} />\n    }\n\n    return <ExpressionList ctx={childCtx} onChange={onChange} />\n  }\n\n  return (\n    <div\n      className={['block expression-list p-1 m-1 border rounded position-relative']\n        .concat(isOrExpression ? ['or-expression'] : [])\n        .concat(isAndExpression ? ['and-expression'] : [])\n        .join(' ')}\n    >\n      {isOrExpression && <code className=\"delims position-absolute ps-1\">OR</code>}\n      {isAndExpression && <code className=\"delims position-absolute ps-1\">AND</code>}\n      <div className=\"d-flex flex-column align-items-center mt-1\">\n        <AddExpressionButton allowedIds={allowedIds} onClick={handleAddFirst} />\n        {(ctx.children.filter((_, i) => i % 2 === 0) as ExpressionChild[]).map((childCtx) => (\n          <Fragment key={`expression-${childCtx.getSourceInterval().toString()}`}>\n            {renderChild(childCtx)}\n            <AddExpressionButton\n              allowedIds={allowedIds}\n              onClick={(type) => handleAddAfterExpression(type, childCtx)}\n            />\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n","import {\n  ATN,\n  ATNDeserializer,\n  DecisionState,\n  DFA,\n  FailedPredicateException,\n  NoViableAltException,\n  Parser,\n  ParserATNSimulator,\n  ParserRuleContext,\n  PredictionContextCache,\n  RecognitionException,\n  TerminalNode,\n  TokenStream,\n  Vocabulary,\n} from 'antlr4ng'\n\nimport { LexParserListener } from './LexParserListener.js'\nimport { LexParserVisitor } from './LexParserVisitor.js'\n\nexport class LexParser extends Parser {\n  public static readonly L_PAREN = 1\n  public static readonly R_PAREN = 2\n  public static readonly EQUAL = 3\n  public static readonly GREATER = 4\n  public static readonly LESSER = 5\n  public static readonly GREATER_EQUAL = 6\n  public static readonly LESSER_EQUAL = 7\n  public static readonly NOT_EQUAL = 8\n  public static readonly EQUAL_EQUAL = 9\n  public static readonly SLASH = 10\n  public static readonly AND = 11\n  public static readonly OR = 12\n  public static readonly NOT = 13\n  public static readonly DOT = 14\n  public static readonly QUOTED_STRING = 15\n  public static readonly SIMPLE_STRING = 16\n  public static readonly WS = 17\n  public static readonly RULE_query = 0\n  public static readonly RULE_boolean_query = 1\n  public static readonly RULE_subquery = 2\n  public static readonly RULE_search_clause = 3\n  public static readonly RULE_search_term = 4\n  public static readonly RULE_index = 5\n  public static readonly RULE_relation_modified = 6\n  public static readonly RULE_relation = 7\n  public static readonly RULE_relation_name = 8\n  public static readonly RULE_relation_symbol = 9\n  public static readonly RULE_boolean_modified = 10\n  public static readonly RULE_r_boolean = 11\n  public static readonly RULE_modifier_list = 12\n  public static readonly RULE_modifier = 13\n  public static readonly RULE_modifier_name = 14\n  public static readonly RULE_modifier_relation = 15\n  public static readonly RULE_modifier_value = 16\n  public static readonly RULE_prefix_name = 17\n  public static readonly RULE_prefix = 18\n  public static readonly RULE_simple_name = 19\n\n  public static readonly literalNames = [\n    null,\n    \"'('\",\n    \"')'\",\n    \"'='\",\n    \"'>'\",\n    \"'<'\",\n    \"'>='\",\n    \"'<='\",\n    \"'<>'\",\n    \"'=='\",\n    \"'/'\",\n    null,\n    null,\n    null,\n    \"'.'\",\n  ]\n\n  public static readonly symbolicNames = [\n    null,\n    'L_PAREN',\n    'R_PAREN',\n    'EQUAL',\n    'GREATER',\n    'LESSER',\n    'GREATER_EQUAL',\n    'LESSER_EQUAL',\n    'NOT_EQUAL',\n    'EQUAL_EQUAL',\n    'SLASH',\n    'AND',\n    'OR',\n    'NOT',\n    'DOT',\n    'QUOTED_STRING',\n    'SIMPLE_STRING',\n    'WS',\n  ]\n  public static readonly ruleNames = [\n    'query',\n    'boolean_query',\n    'subquery',\n    'search_clause',\n    'search_term',\n    'index',\n    'relation_modified',\n    'relation',\n    'relation_name',\n    'relation_symbol',\n    'boolean_modified',\n    'r_boolean',\n    'modifier_list',\n    'modifier',\n    'modifier_name',\n    'modifier_relation',\n    'modifier_value',\n    'prefix_name',\n    'prefix',\n    'simple_name',\n  ]\n\n  public get grammarFileName(): string {\n    return 'LexParser.g4'\n  }\n  public get literalNames(): (string | null)[] {\n    return LexParser.literalNames\n  }\n  public get symbolicNames(): (string | null)[] {\n    return LexParser.symbolicNames\n  }\n  public get ruleNames(): string[] {\n    return LexParser.ruleNames\n  }\n  public get serializedATN(): number[] {\n    return LexParser._serializedATN\n  }\n\n  protected createFailedPredicateException(\n    predicate?: string,\n    message?: string\n  ): FailedPredicateException {\n    return new FailedPredicateException(this, predicate, message)\n  }\n\n  public constructor(input: TokenStream) {\n    super(input)\n    this.interpreter = new ParserATNSimulator(\n      this,\n      LexParser._ATN,\n      LexParser.decisionsToDFA,\n      new PredictionContextCache()\n    )\n  }\n  public query(): QueryContext {\n    const localContext = new QueryContext(this.context, this.state)\n    this.enterRule(localContext, 0, LexParser.RULE_query)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 40\n        this.boolean_query()\n        this.state = 41\n        this.match(LexParser.EOF)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public boolean_query(): Boolean_queryContext {\n    const localContext = new Boolean_queryContext(this.context, this.state)\n    this.enterRule(localContext, 2, LexParser.RULE_boolean_query)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 43\n        this.subquery()\n        this.state = 49\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        while ((_la & ~0x1f) === 0 && ((1 << _la) & 14336) !== 0) {\n          {\n            {\n              this.state = 44\n              this.boolean_modified()\n              this.state = 45\n              this.subquery()\n            }\n          }\n          this.state = 51\n          this.errorHandler.sync(this)\n          _la = this.tokenStream.LA(1)\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public subquery(): SubqueryContext {\n    const localContext = new SubqueryContext(this.context, this.state)\n    this.enterRule(localContext, 4, LexParser.RULE_subquery)\n    try {\n      this.state = 57\n      this.errorHandler.sync(this)\n      switch (this.tokenStream.LA(1)) {\n        case LexParser.L_PAREN:\n          this.enterOuterAlt(localContext, 1)\n          {\n            this.state = 52\n            this.match(LexParser.L_PAREN)\n            this.state = 53\n            this.boolean_query()\n            this.state = 54\n            this.match(LexParser.R_PAREN)\n          }\n          break\n        case LexParser.QUOTED_STRING:\n        case LexParser.SIMPLE_STRING:\n          this.enterOuterAlt(localContext, 2)\n          {\n            this.state = 56\n            this.search_clause()\n          }\n          break\n        default:\n          throw new NoViableAltException(this)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public search_clause(): Search_clauseContext {\n    const localContext = new Search_clauseContext(this.context, this.state)\n    this.enterRule(localContext, 6, LexParser.RULE_search_clause)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 62\n        this.errorHandler.sync(this)\n        switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context)) {\n          case 1:\n            {\n              this.state = 59\n              this.index()\n              this.state = 60\n              this.relation_modified()\n            }\n            break\n        }\n        this.state = 64\n        this.search_term()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public search_term(): Search_termContext {\n    const localContext = new Search_termContext(this.context, this.state)\n    this.enterRule(localContext, 8, LexParser.RULE_search_term)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 66\n        _la = this.tokenStream.LA(1)\n        if (!(_la === 15 || _la === 16)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public index(): IndexContext {\n    const localContext = new IndexContext(this.context, this.state)\n    this.enterRule(localContext, 10, LexParser.RULE_index)\n    try {\n      this.state = 70\n      this.errorHandler.sync(this)\n      switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context)) {\n        case 1:\n          this.enterOuterAlt(localContext, 1)\n          {\n            this.state = 68\n            this.simple_name()\n          }\n          break\n        case 2:\n          this.enterOuterAlt(localContext, 2)\n          {\n            this.state = 69\n            this.prefix_name()\n          }\n          break\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public relation_modified(): Relation_modifiedContext {\n    const localContext = new Relation_modifiedContext(this.context, this.state)\n    this.enterRule(localContext, 12, LexParser.RULE_relation_modified)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 72\n        this.relation()\n        this.state = 74\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if (_la === 10) {\n          {\n            this.state = 73\n            this.modifier_list()\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public relation(): RelationContext {\n    const localContext = new RelationContext(this.context, this.state)\n    this.enterRule(localContext, 14, LexParser.RULE_relation)\n    try {\n      this.state = 78\n      this.errorHandler.sync(this)\n      switch (this.tokenStream.LA(1)) {\n        case LexParser.SIMPLE_STRING:\n          this.enterOuterAlt(localContext, 1)\n          {\n            this.state = 76\n            this.relation_name()\n          }\n          break\n        case LexParser.EQUAL:\n        case LexParser.GREATER:\n        case LexParser.LESSER:\n        case LexParser.GREATER_EQUAL:\n        case LexParser.LESSER_EQUAL:\n        case LexParser.NOT_EQUAL:\n        case LexParser.EQUAL_EQUAL:\n          this.enterOuterAlt(localContext, 2)\n          {\n            this.state = 77\n            this.relation_symbol()\n          }\n          break\n        default:\n          throw new NoViableAltException(this)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public relation_name(): Relation_nameContext {\n    const localContext = new Relation_nameContext(this.context, this.state)\n    this.enterRule(localContext, 16, LexParser.RULE_relation_name)\n    try {\n      this.state = 82\n      this.errorHandler.sync(this)\n      switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context)) {\n        case 1:\n          this.enterOuterAlt(localContext, 1)\n          {\n            this.state = 80\n            this.simple_name()\n          }\n          break\n        case 2:\n          this.enterOuterAlt(localContext, 2)\n          {\n            this.state = 81\n            this.prefix_name()\n          }\n          break\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public relation_symbol(): Relation_symbolContext {\n    const localContext = new Relation_symbolContext(this.context, this.state)\n    this.enterRule(localContext, 18, LexParser.RULE_relation_symbol)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 84\n        _la = this.tokenStream.LA(1)\n        if (!((_la & ~0x1f) === 0 && ((1 << _la) & 1016) !== 0)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public boolean_modified(): Boolean_modifiedContext {\n    const localContext = new Boolean_modifiedContext(this.context, this.state)\n    this.enterRule(localContext, 20, LexParser.RULE_boolean_modified)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 86\n        this.r_boolean()\n        this.state = 88\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if (_la === 10) {\n          {\n            this.state = 87\n            this.modifier_list()\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public r_boolean(): R_booleanContext {\n    const localContext = new R_booleanContext(this.context, this.state)\n    this.enterRule(localContext, 22, LexParser.RULE_r_boolean)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 90\n        _la = this.tokenStream.LA(1)\n        if (!((_la & ~0x1f) === 0 && ((1 << _la) & 14336) !== 0)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public modifier_list(): Modifier_listContext {\n    const localContext = new Modifier_listContext(this.context, this.state)\n    this.enterRule(localContext, 24, LexParser.RULE_modifier_list)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 93\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        do {\n          {\n            {\n              this.state = 92\n              this.modifier()\n            }\n          }\n          this.state = 95\n          this.errorHandler.sync(this)\n          _la = this.tokenStream.LA(1)\n        } while (_la === 10)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public modifier(): ModifierContext {\n    const localContext = new ModifierContext(this.context, this.state)\n    this.enterRule(localContext, 26, LexParser.RULE_modifier)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 97\n        this.match(LexParser.SLASH)\n        this.state = 98\n        this.modifier_name()\n        this.state = 100\n        this.errorHandler.sync(this)\n        _la = this.tokenStream.LA(1)\n        if ((_la & ~0x1f) === 0 && ((1 << _la) & 1016) !== 0) {\n          {\n            this.state = 99\n            this.modifier_relation()\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public modifier_name(): Modifier_nameContext {\n    const localContext = new Modifier_nameContext(this.context, this.state)\n    this.enterRule(localContext, 28, LexParser.RULE_modifier_name)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 102\n        this.simple_name()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public modifier_relation(): Modifier_relationContext {\n    const localContext = new Modifier_relationContext(this.context, this.state)\n    this.enterRule(localContext, 30, LexParser.RULE_modifier_relation)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 104\n        this.relation_symbol()\n        this.state = 105\n        this.modifier_value()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public modifier_value(): Modifier_valueContext {\n    const localContext = new Modifier_valueContext(this.context, this.state)\n    this.enterRule(localContext, 32, LexParser.RULE_modifier_value)\n    let _la: number\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 107\n        _la = this.tokenStream.LA(1)\n        if (!(_la === 15 || _la === 16)) {\n          this.errorHandler.recoverInline(this)\n        } else {\n          this.errorHandler.reportMatch(this)\n          this.consume()\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public prefix_name(): Prefix_nameContext {\n    const localContext = new Prefix_nameContext(this.context, this.state)\n    this.enterRule(localContext, 34, LexParser.RULE_prefix_name)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 109\n        this.prefix()\n        this.state = 110\n        this.match(LexParser.DOT)\n        this.state = 111\n        this.simple_name()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public prefix(): PrefixContext {\n    const localContext = new PrefixContext(this.context, this.state)\n    this.enterRule(localContext, 36, LexParser.RULE_prefix)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 113\n        this.simple_name()\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n  public simple_name(): Simple_nameContext {\n    const localContext = new Simple_nameContext(this.context, this.state)\n    this.enterRule(localContext, 38, LexParser.RULE_simple_name)\n    try {\n      this.enterOuterAlt(localContext, 1)\n      {\n        this.state = 115\n        this.match(LexParser.SIMPLE_STRING)\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        this.errorHandler.reportError(this, re)\n        this.errorHandler.recover(this, re)\n      } else {\n        throw re\n      }\n    } finally {\n      this.exitRule()\n    }\n    return localContext\n  }\n\n  public static readonly _serializedATN: number[] = [\n    4, 1, 17, 118, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7,\n    6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13,\n    2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 1, 0, 1, 0,\n    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 48, 8, 1, 10, 1, 12, 1, 51, 9, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1,\n    2, 3, 2, 58, 8, 2, 1, 3, 1, 3, 1, 3, 3, 3, 63, 8, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 3, 5,\n    71, 8, 5, 1, 6, 1, 6, 3, 6, 75, 8, 6, 1, 7, 1, 7, 3, 7, 79, 8, 7, 1, 8, 1, 8, 3, 8, 83, 8, 8, 1,\n    9, 1, 9, 1, 10, 1, 10, 3, 10, 89, 8, 10, 1, 11, 1, 11, 1, 12, 4, 12, 94, 8, 12, 11, 12, 12, 12,\n    95, 1, 13, 1, 13, 1, 13, 3, 13, 101, 8, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1,\n    17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 0, 0, 20, 0, 2, 4, 6, 8, 10, 12, 14,\n    16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 0, 3, 1, 0, 15, 16, 1, 0, 3, 9, 1, 0, 11, 13,\n    107, 0, 40, 1, 0, 0, 0, 2, 43, 1, 0, 0, 0, 4, 57, 1, 0, 0, 0, 6, 62, 1, 0, 0, 0, 8, 66, 1, 0, 0,\n    0, 10, 70, 1, 0, 0, 0, 12, 72, 1, 0, 0, 0, 14, 78, 1, 0, 0, 0, 16, 82, 1, 0, 0, 0, 18, 84, 1, 0,\n    0, 0, 20, 86, 1, 0, 0, 0, 22, 90, 1, 0, 0, 0, 24, 93, 1, 0, 0, 0, 26, 97, 1, 0, 0, 0, 28, 102,\n    1, 0, 0, 0, 30, 104, 1, 0, 0, 0, 32, 107, 1, 0, 0, 0, 34, 109, 1, 0, 0, 0, 36, 113, 1, 0, 0, 0,\n    38, 115, 1, 0, 0, 0, 40, 41, 3, 2, 1, 0, 41, 42, 5, 0, 0, 1, 42, 1, 1, 0, 0, 0, 43, 49, 3, 4, 2,\n    0, 44, 45, 3, 20, 10, 0, 45, 46, 3, 4, 2, 0, 46, 48, 1, 0, 0, 0, 47, 44, 1, 0, 0, 0, 48, 51, 1,\n    0, 0, 0, 49, 47, 1, 0, 0, 0, 49, 50, 1, 0, 0, 0, 50, 3, 1, 0, 0, 0, 51, 49, 1, 0, 0, 0, 52, 53,\n    5, 1, 0, 0, 53, 54, 3, 2, 1, 0, 54, 55, 5, 2, 0, 0, 55, 58, 1, 0, 0, 0, 56, 58, 3, 6, 3, 0, 57,\n    52, 1, 0, 0, 0, 57, 56, 1, 0, 0, 0, 58, 5, 1, 0, 0, 0, 59, 60, 3, 10, 5, 0, 60, 61, 3, 12, 6, 0,\n    61, 63, 1, 0, 0, 0, 62, 59, 1, 0, 0, 0, 62, 63, 1, 0, 0, 0, 63, 64, 1, 0, 0, 0, 64, 65, 3, 8, 4,\n    0, 65, 7, 1, 0, 0, 0, 66, 67, 7, 0, 0, 0, 67, 9, 1, 0, 0, 0, 68, 71, 3, 38, 19, 0, 69, 71, 3,\n    34, 17, 0, 70, 68, 1, 0, 0, 0, 70, 69, 1, 0, 0, 0, 71, 11, 1, 0, 0, 0, 72, 74, 3, 14, 7, 0, 73,\n    75, 3, 24, 12, 0, 74, 73, 1, 0, 0, 0, 74, 75, 1, 0, 0, 0, 75, 13, 1, 0, 0, 0, 76, 79, 3, 16, 8,\n    0, 77, 79, 3, 18, 9, 0, 78, 76, 1, 0, 0, 0, 78, 77, 1, 0, 0, 0, 79, 15, 1, 0, 0, 0, 80, 83, 3,\n    38, 19, 0, 81, 83, 3, 34, 17, 0, 82, 80, 1, 0, 0, 0, 82, 81, 1, 0, 0, 0, 83, 17, 1, 0, 0, 0, 84,\n    85, 7, 1, 0, 0, 85, 19, 1, 0, 0, 0, 86, 88, 3, 22, 11, 0, 87, 89, 3, 24, 12, 0, 88, 87, 1, 0, 0,\n    0, 88, 89, 1, 0, 0, 0, 89, 21, 1, 0, 0, 0, 90, 91, 7, 2, 0, 0, 91, 23, 1, 0, 0, 0, 92, 94, 3,\n    26, 13, 0, 93, 92, 1, 0, 0, 0, 94, 95, 1, 0, 0, 0, 95, 93, 1, 0, 0, 0, 95, 96, 1, 0, 0, 0, 96,\n    25, 1, 0, 0, 0, 97, 98, 5, 10, 0, 0, 98, 100, 3, 28, 14, 0, 99, 101, 3, 30, 15, 0, 100, 99, 1,\n    0, 0, 0, 100, 101, 1, 0, 0, 0, 101, 27, 1, 0, 0, 0, 102, 103, 3, 38, 19, 0, 103, 29, 1, 0, 0, 0,\n    104, 105, 3, 18, 9, 0, 105, 106, 3, 32, 16, 0, 106, 31, 1, 0, 0, 0, 107, 108, 7, 0, 0, 0, 108,\n    33, 1, 0, 0, 0, 109, 110, 3, 36, 18, 0, 110, 111, 5, 14, 0, 0, 111, 112, 3, 38, 19, 0, 112, 35,\n    1, 0, 0, 0, 113, 114, 3, 38, 19, 0, 114, 37, 1, 0, 0, 0, 115, 116, 5, 16, 0, 0, 116, 39, 1, 0,\n    0, 0, 10, 49, 57, 62, 70, 74, 78, 82, 88, 95, 100,\n  ]\n\n  private static __ATN: ATN\n  public static get _ATN(): ATN {\n    if (!LexParser.__ATN) {\n      LexParser.__ATN = new ATNDeserializer().deserialize(LexParser._serializedATN)\n    }\n\n    return LexParser.__ATN\n  }\n\n  private static readonly vocabulary = new Vocabulary(\n    LexParser.literalNames,\n    LexParser.symbolicNames,\n    []\n  )\n\n  public override get vocabulary(): Vocabulary {\n    return LexParser.vocabulary\n  }\n\n  private static readonly decisionsToDFA = LexParser._ATN.decisionToState.map(\n    (ds: DecisionState, index: number) => new DFA(ds, index)\n  )\n}\n\nexport class QueryContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public boolean_query(): Boolean_queryContext {\n    return this.getRuleContext(0, Boolean_queryContext)!\n  }\n  public EOF(): TerminalNode {\n    return this.getToken(LexParser.EOF, 0)!\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_query\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterQuery) {\n      listener.enterQuery(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitQuery) {\n      listener.exitQuery(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitQuery) {\n      return visitor.visitQuery(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Boolean_queryContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public subquery(): SubqueryContext[]\n  public subquery(i: number): SubqueryContext | null\n  public subquery(i?: number): SubqueryContext[] | SubqueryContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(SubqueryContext)\n    }\n\n    return this.getRuleContext(i, SubqueryContext)\n  }\n  public boolean_modified(): Boolean_modifiedContext[]\n  public boolean_modified(i: number): Boolean_modifiedContext | null\n  public boolean_modified(i?: number): Boolean_modifiedContext[] | Boolean_modifiedContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(Boolean_modifiedContext)\n    }\n\n    return this.getRuleContext(i, Boolean_modifiedContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_boolean_query\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterBoolean_query) {\n      listener.enterBoolean_query(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitBoolean_query) {\n      listener.exitBoolean_query(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitBoolean_query) {\n      return visitor.visitBoolean_query(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class SubqueryContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public L_PAREN(): TerminalNode | null {\n    return this.getToken(LexParser.L_PAREN, 0)\n  }\n  public boolean_query(): Boolean_queryContext | null {\n    return this.getRuleContext(0, Boolean_queryContext)\n  }\n  public R_PAREN(): TerminalNode | null {\n    return this.getToken(LexParser.R_PAREN, 0)\n  }\n  public search_clause(): Search_clauseContext | null {\n    return this.getRuleContext(0, Search_clauseContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_subquery\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterSubquery) {\n      listener.enterSubquery(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitSubquery) {\n      listener.exitSubquery(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitSubquery) {\n      return visitor.visitSubquery(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Search_clauseContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public search_term(): Search_termContext {\n    return this.getRuleContext(0, Search_termContext)!\n  }\n  public index(): IndexContext | null {\n    return this.getRuleContext(0, IndexContext)\n  }\n  public relation_modified(): Relation_modifiedContext | null {\n    return this.getRuleContext(0, Relation_modifiedContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_search_clause\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterSearch_clause) {\n      listener.enterSearch_clause(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitSearch_clause) {\n      listener.exitSearch_clause(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitSearch_clause) {\n      return visitor.visitSearch_clause(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Search_termContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public SIMPLE_STRING(): TerminalNode | null {\n    return this.getToken(LexParser.SIMPLE_STRING, 0)\n  }\n  public QUOTED_STRING(): TerminalNode | null {\n    return this.getToken(LexParser.QUOTED_STRING, 0)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_search_term\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterSearch_term) {\n      listener.enterSearch_term(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitSearch_term) {\n      listener.exitSearch_term(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitSearch_term) {\n      return visitor.visitSearch_term(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class IndexContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public simple_name(): Simple_nameContext | null {\n    return this.getRuleContext(0, Simple_nameContext)\n  }\n  public prefix_name(): Prefix_nameContext | null {\n    return this.getRuleContext(0, Prefix_nameContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_index\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterIndex) {\n      listener.enterIndex(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitIndex) {\n      listener.exitIndex(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitIndex) {\n      return visitor.visitIndex(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Relation_modifiedContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public relation(): RelationContext {\n    return this.getRuleContext(0, RelationContext)!\n  }\n  public modifier_list(): Modifier_listContext | null {\n    return this.getRuleContext(0, Modifier_listContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_relation_modified\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterRelation_modified) {\n      listener.enterRelation_modified(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitRelation_modified) {\n      listener.exitRelation_modified(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitRelation_modified) {\n      return visitor.visitRelation_modified(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class RelationContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public relation_name(): Relation_nameContext | null {\n    return this.getRuleContext(0, Relation_nameContext)\n  }\n  public relation_symbol(): Relation_symbolContext | null {\n    return this.getRuleContext(0, Relation_symbolContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_relation\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterRelation) {\n      listener.enterRelation(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitRelation) {\n      listener.exitRelation(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitRelation) {\n      return visitor.visitRelation(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Relation_nameContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public simple_name(): Simple_nameContext | null {\n    return this.getRuleContext(0, Simple_nameContext)\n  }\n  public prefix_name(): Prefix_nameContext | null {\n    return this.getRuleContext(0, Prefix_nameContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_relation_name\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterRelation_name) {\n      listener.enterRelation_name(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitRelation_name) {\n      listener.exitRelation_name(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitRelation_name) {\n      return visitor.visitRelation_name(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Relation_symbolContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public EQUAL(): TerminalNode | null {\n    return this.getToken(LexParser.EQUAL, 0)\n  }\n  public GREATER(): TerminalNode | null {\n    return this.getToken(LexParser.GREATER, 0)\n  }\n  public LESSER(): TerminalNode | null {\n    return this.getToken(LexParser.LESSER, 0)\n  }\n  public GREATER_EQUAL(): TerminalNode | null {\n    return this.getToken(LexParser.GREATER_EQUAL, 0)\n  }\n  public LESSER_EQUAL(): TerminalNode | null {\n    return this.getToken(LexParser.LESSER_EQUAL, 0)\n  }\n  public NOT_EQUAL(): TerminalNode | null {\n    return this.getToken(LexParser.NOT_EQUAL, 0)\n  }\n  public EQUAL_EQUAL(): TerminalNode | null {\n    return this.getToken(LexParser.EQUAL_EQUAL, 0)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_relation_symbol\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterRelation_symbol) {\n      listener.enterRelation_symbol(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitRelation_symbol) {\n      listener.exitRelation_symbol(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitRelation_symbol) {\n      return visitor.visitRelation_symbol(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Boolean_modifiedContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public r_boolean(): R_booleanContext {\n    return this.getRuleContext(0, R_booleanContext)!\n  }\n  public modifier_list(): Modifier_listContext | null {\n    return this.getRuleContext(0, Modifier_listContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_boolean_modified\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterBoolean_modified) {\n      listener.enterBoolean_modified(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitBoolean_modified) {\n      listener.exitBoolean_modified(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitBoolean_modified) {\n      return visitor.visitBoolean_modified(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class R_booleanContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public AND(): TerminalNode | null {\n    return this.getToken(LexParser.AND, 0)\n  }\n  public OR(): TerminalNode | null {\n    return this.getToken(LexParser.OR, 0)\n  }\n  public NOT(): TerminalNode | null {\n    return this.getToken(LexParser.NOT, 0)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_r_boolean\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterR_boolean) {\n      listener.enterR_boolean(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitR_boolean) {\n      listener.exitR_boolean(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitR_boolean) {\n      return visitor.visitR_boolean(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Modifier_listContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public modifier(): ModifierContext[]\n  public modifier(i: number): ModifierContext | null\n  public modifier(i?: number): ModifierContext[] | ModifierContext | null {\n    if (i === undefined) {\n      return this.getRuleContexts(ModifierContext)\n    }\n\n    return this.getRuleContext(i, ModifierContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_modifier_list\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterModifier_list) {\n      listener.enterModifier_list(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitModifier_list) {\n      listener.exitModifier_list(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitModifier_list) {\n      return visitor.visitModifier_list(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class ModifierContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public SLASH(): TerminalNode {\n    return this.getToken(LexParser.SLASH, 0)!\n  }\n  public modifier_name(): Modifier_nameContext {\n    return this.getRuleContext(0, Modifier_nameContext)!\n  }\n  public modifier_relation(): Modifier_relationContext | null {\n    return this.getRuleContext(0, Modifier_relationContext)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_modifier\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterModifier) {\n      listener.enterModifier(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitModifier) {\n      listener.exitModifier(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitModifier) {\n      return visitor.visitModifier(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Modifier_nameContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public simple_name(): Simple_nameContext {\n    return this.getRuleContext(0, Simple_nameContext)!\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_modifier_name\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterModifier_name) {\n      listener.enterModifier_name(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitModifier_name) {\n      listener.exitModifier_name(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitModifier_name) {\n      return visitor.visitModifier_name(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Modifier_relationContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public relation_symbol(): Relation_symbolContext {\n    return this.getRuleContext(0, Relation_symbolContext)!\n  }\n  public modifier_value(): Modifier_valueContext {\n    return this.getRuleContext(0, Modifier_valueContext)!\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_modifier_relation\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterModifier_relation) {\n      listener.enterModifier_relation(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitModifier_relation) {\n      listener.exitModifier_relation(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitModifier_relation) {\n      return visitor.visitModifier_relation(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Modifier_valueContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public SIMPLE_STRING(): TerminalNode | null {\n    return this.getToken(LexParser.SIMPLE_STRING, 0)\n  }\n  public QUOTED_STRING(): TerminalNode | null {\n    return this.getToken(LexParser.QUOTED_STRING, 0)\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_modifier_value\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterModifier_value) {\n      listener.enterModifier_value(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitModifier_value) {\n      listener.exitModifier_value(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitModifier_value) {\n      return visitor.visitModifier_value(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Prefix_nameContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public prefix(): PrefixContext {\n    return this.getRuleContext(0, PrefixContext)!\n  }\n  public DOT(): TerminalNode {\n    return this.getToken(LexParser.DOT, 0)!\n  }\n  public simple_name(): Simple_nameContext {\n    return this.getRuleContext(0, Simple_nameContext)!\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_prefix_name\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterPrefix_name) {\n      listener.enterPrefix_name(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitPrefix_name) {\n      listener.exitPrefix_name(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitPrefix_name) {\n      return visitor.visitPrefix_name(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class PrefixContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public simple_name(): Simple_nameContext {\n    return this.getRuleContext(0, Simple_nameContext)!\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_prefix\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterPrefix) {\n      listener.enterPrefix(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitPrefix) {\n      listener.exitPrefix(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitPrefix) {\n      return visitor.visitPrefix(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n\nexport class Simple_nameContext extends ParserRuleContext {\n  public constructor(parent: ParserRuleContext | null, invokingState: number) {\n    super(parent, invokingState)\n  }\n  public SIMPLE_STRING(): TerminalNode {\n    return this.getToken(LexParser.SIMPLE_STRING, 0)!\n  }\n  public override get ruleIndex(): number {\n    return LexParser.RULE_simple_name\n  }\n  public override enterRule(listener: LexParserListener): void {\n    if (listener.enterSimple_name) {\n      listener.enterSimple_name(this)\n    }\n  }\n  public override exitRule(listener: LexParserListener): void {\n    if (listener.exitSimple_name) {\n      listener.exitSimple_name(this)\n    }\n  }\n  public override accept<Result>(visitor: LexParserVisitor<Result>): Result | null {\n    if (visitor.visitSimple_name) {\n      return visitor.visitSimple_name(this)\n    } else {\n      return visitor.visitChildren(this)\n    }\n  }\n}\n","export type BooleansType = (typeof BOOLEANS)[number]['id']\nexport type FieldsType = (typeof FIELDS)[number]['id']\nexport type RelationsType = (typeof RELATIONS)[number]['id']\nexport type RelationModifiersType = (typeof RELATION_MODIFIERS)[number]['id']\n\nexport type NewSearchClauseChoicesType = (typeof NEW_SEARCH_CLAUSE_CHOICES)[number]['id']\n\n// --------------------------------------------------------------------------\n\nexport const FIELDS = [\n  // Virtual Fields (e.g., on Entry)\n  { id: 'lang', label: 'Entry language', virtual: true },\n  // Core Fields\n  { id: 'lemma', label: 'Lemma form' },\n  { id: 'entryId', label: 'Identifier of the current entry' },\n  { id: 'phonetic', label: 'Phonetic form' },\n  { id: 'translation', label: 'Translation' },\n  { id: 'transcription', label: 'Transcription or transliteration' },\n  // Prosaic Descriptions\n  { id: 'definition', label: 'Definition or description' },\n  { id: 'etymology', label: 'Etymology information' },\n  // Grammar and Morphology\n  { id: 'case', label: 'Morphological Case' },\n  { id: 'number', label: 'Morphological Number' },\n  { id: 'gender', label: 'Morphological Gender' },\n  { id: 'pos', label: 'Part-of-Speech' },\n  { id: 'baseform', label: 'Baseform (or stem …)' },\n  { id: 'segmentation', label: 'Composita segmentation, hyphenation' },\n  { id: 'sentiment', label: 'Sentiment information', unstructured: true },\n  { id: 'frequency', label: 'Frequency information', unstructured: true },\n  // Relation to other Lexical Entries\n  { id: 'antonym', label: 'Antonym' },\n  { id: 'hyponym', label: 'Hyponym' },\n  { id: 'hypernym', label: 'Hypernym' },\n  { id: 'meronym', label: 'Meronym' },\n  { id: 'holonym', label: 'Holonym' },\n  { id: 'synonym', label: 'Synonym' },\n  { id: 'related', label: 'Unspecified relation' },\n  // External References\n  { id: 'ref', label: 'A URI referencing a related resource' },\n  { id: 'senseRef', label: 'ID of a sense definition' },\n  // Citations / Quotations\n  { id: 'citation', label: 'Citation, quotation or example' },\n] as const\nexport const FIELDS_MAP = Object.fromEntries(FIELDS.map((item) => [item.id, item]))\nexport const FIELD_GROUPS = [\n  {\n    id: 'virtual',\n    label: 'Virtual fields',\n    fields: ['lang'] satisfies FieldsType[],\n  },\n  {\n    id: 'core',\n    label: 'Basic fields',\n    fields: ['lemma', 'entryId', 'phonetic', 'translation', 'transcription'] satisfies FieldsType[],\n  },\n  {\n    id: 'description',\n    label: 'Description fields',\n    fields: ['definition', 'etymology'] satisfies FieldsType[],\n  },\n  {\n    id: 'grammar',\n    label: 'Grammar and morphology fields',\n    fields: ['case', 'number', 'gender', 'pos', 'baseform', 'segmentation'] satisfies FieldsType[],\n  },\n  {\n    id: 'numeric',\n    label: 'Unstructured numeric fields',\n    fields: ['sentiment', 'frequency'] satisfies FieldsType[],\n  },\n  {\n    id: 'relation',\n    label: 'Semantic relation fields',\n    fields: [\n      'antonym',\n      'hyponym',\n      'hypernym',\n      'meronym',\n      'holonym',\n      'synonym',\n      'related',\n    ] satisfies FieldsType[],\n  },\n  {\n    id: 'reference',\n    label: 'Reference fields',\n    fields: ['ref', 'senseRef'] satisfies FieldsType[],\n  },\n  {\n    id: 'citation',\n    label: 'Citation and quotation fields',\n    fields: ['citation'] satisfies FieldsType[],\n  },\n] as const\n\nexport const RELATIONS = [\n  { id: '=', label: 'equal' },\n  { id: '==', label: 'exact equal' },\n  // default CQL relations, we probably do not require these for LexCQL?\n  // { id: '<>', label: 'not equal' },\n  // { id: '>', label: 'greater' },\n  // { id: '<', label: 'lesser' },\n  // { id: '>=', label: 'greater equal' },\n  // { id: '<=', label: 'lesser equal' },\n  // custom entity relation\n  { id: 'is', label: 'is a' },\n] as const\n\nexport const RELATION_MODIFIERS = [\n  { id: 'lang', label: 'Language' },\n  // {id: \"masked\", label: \"Masked\"}, // default, implicit\n  { id: 'unmasked', label: 'Unmasked' },\n  { id: 'ignoreCase', label: 'Ignore Case' },\n  { id: 'respectCase', label: 'Respect Case' },\n  { id: 'ignoreAccents', label: 'Ignore Accents' },\n  { id: 'respectAccents', label: 'Respect Accents' },\n  { id: 'honorWhitespace', label: 'Honor Whitespace' },\n  { id: 'regexp', label: 'Regular Expression' },\n  { id: 'partialMatch', label: 'Partial Match' },\n  { id: 'fullMatch', label: 'Full Match' },\n] as const\nexport const RELATION_MODIFIERS_MUTUALLY_EXCLUSIVE = [\n  ['masked', 'unmasked', 'regexp'],\n  ['ignoreCase', 'respectCase'],\n  ['ignoreAccents', 'respectAccents'],\n  ['partialMatch', 'fullMatch'],\n] as const\n\nexport const BOOLEANS = [\n  { id: 'and', label: 'AND' },\n  { id: 'or', label: 'OR' },\n  { id: 'not', label: 'NOT' },\n] as const\n\n// --------------------------------------------------------------------------\n\nexport const DEFAULT_NEW_INDEX = 'lemma'\nexport const DEFAULT_NEW_RELATION = '='\nexport const DEFAULT_NEW_SEARCHCLAUSE = '\"\"'\nexport const DEFAULT_NEW_BOOLEAN = 'or'\n\n// --------------------------------------------------------------------------\n\nexport const NEW_SEARCH_CLAUSE_CHOICES = [\n  {\n    id: 'search-clause',\n    label: 'Search Clause',\n    new: `${DEFAULT_NEW_SEARCHCLAUSE}`,\n    newBefore: `${DEFAULT_NEW_SEARCHCLAUSE} ${DEFAULT_NEW_BOOLEAN}`,\n    newAfter: `${DEFAULT_NEW_BOOLEAN} ${DEFAULT_NEW_SEARCHCLAUSE}`,\n  },\n  {\n    id: 'sub-query',\n    label: 'Subquery',\n    new: `( ${DEFAULT_NEW_SEARCHCLAUSE} )`,\n    newBefore: `( ${DEFAULT_NEW_SEARCHCLAUSE} ) ${DEFAULT_NEW_BOOLEAN}`,\n    newAfter: `${DEFAULT_NEW_BOOLEAN} ( ${DEFAULT_NEW_SEARCHCLAUSE} )`,\n  },\n] as const\nexport const NEW_SEARCH_CLAUSE_CHOICES_MAP = Object.fromEntries(\n  NEW_SEARCH_CLAUSE_CHOICES.map((item) => [item.id, item])\n)\n","import { createContext, type ReactNode, useContext } from 'react'\n\nimport { LexParser } from '@/parsers/LexParser'\nimport { LexLexer } from '@/parsers/LexLexer'\n\n// --------------------------------------------------------------------------\n\ninterface LexCQLParserLexer {\n  parser: LexParser\n  lexer: LexLexer\n  cursorPos?: [number, number] | number\n}\n\ntype LexCQLParserLexerProviderProps = LexCQLParserLexer & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst LexCQLParserLexerContext = createContext<LexCQLParserLexer | undefined>(undefined)\nLexCQLParserLexerContext.displayName = 'LexCQLParserLexerContext'\n\n// --------------------------------------------------------------------------\n\nfunction LexCQLParserLexerProvider({\n  parser,\n  lexer,\n  cursorPos,\n  children,\n}: LexCQLParserLexerProviderProps) {\n  const data = { parser, lexer, cursorPos }\n  return <LexCQLParserLexerContext.Provider value={data}>{children}</LexCQLParserLexerContext.Provider>\n}\n\n// --------------------------------------------------------------------------\n\nfunction useLexCQLParserLexer() {\n  const data = useContext(LexCQLParserLexerContext)\n\n  if (!data) throw new Error('No parser and lexer \"data\" set, use LexCQLParserLexerProvider to set')\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { LexCQLParserLexerContext, LexCQLParserLexerProvider, useLexCQLParserLexer }\n","import { createContext, type ReactNode, useContext } from 'react'\n\n// --------------------------------------------------------------------------\n\nexport interface LexCQLQueryBuilderConfig {\n  enableRelationModifiers: boolean\n  forceSearchTermQuoting: boolean\n  showAllFields: boolean\n  showResourceCountForField: boolean\n}\n\ntype LexCQLQueryBuilderConfigProviderProps = Partial<LexCQLQueryBuilderConfig> & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst LexCQLQueryBuilderConfigContext = createContext<LexCQLQueryBuilderConfig | undefined>(\n  undefined\n)\nLexCQLQueryBuilderConfigContext.displayName = 'LexCQLQueryBuilderConfigContext'\n\n// --------------------------------------------------------------------------\n\nfunction LexCQLQueryBuilderConfigProvider({\n  enableRelationModifiers = true,\n  forceSearchTermQuoting = false,\n  showAllFields = true,\n  showResourceCountForField = true,\n  children,\n}: LexCQLQueryBuilderConfigProviderProps) {\n  const data = {\n    enableRelationModifiers,\n    forceSearchTermQuoting,\n    showAllFields,\n    showResourceCountForField,\n  }\n\n  return (\n    <LexCQLQueryBuilderConfigContext.Provider value={data}>\n      {children}\n    </LexCQLQueryBuilderConfigContext.Provider>\n  )\n}\n\n// --------------------------------------------------------------------------\n\nfunction useLexCQLQueryBuilderConfig() {\n  const data = useContext(LexCQLQueryBuilderConfigContext)\n\n  // or create defaults?\n  if (!data) throw new Error('No flags \"data\" set, use LexCQLQueryBuilderConfigProvider to set')\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\nexport {\n  LexCQLQueryBuilderConfigContext,\n  LexCQLQueryBuilderConfigProvider,\n  // eslint-disable-next-line react-refresh/only-export-components\n  useLexCQLQueryBuilderConfig,\n}\n","import { TokenStreamRewriter } from 'antlr4ng'\nimport { createContext, type ReactNode, useContext } from 'react'\n\n// --------------------------------------------------------------------------\n\ninterface LexCQLQueryUpdater {\n  rewriter: TokenStreamRewriter\n}\n\ntype LexCQLQueryUpdaterProviderProps = LexCQLQueryUpdater & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst LexCQLQueryUpdaterContext = createContext<LexCQLQueryUpdater | undefined>(undefined)\nLexCQLQueryUpdaterContext.displayName = 'LexCQLQueryUpdaterContext'\n\n// --------------------------------------------------------------------------\n\nfunction LexCQLQueryUpdaterProvider({ rewriter, children }: LexCQLQueryUpdaterProviderProps) {\n  const data = { rewriter }\n  return <LexCQLQueryUpdaterContext.Provider value={data}>{children}</LexCQLQueryUpdaterContext.Provider>\n}\n\n// --------------------------------------------------------------------------\n\nfunction useLexCQLQueryUpdater() {\n  const data = useContext(LexCQLQueryUpdaterContext)\n\n  if (!data) throw new Error('No rewriter \"data\" set, use LexCQLQueryUpdaterProvider to set')\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { LexCQLQueryUpdaterContext, LexCQLQueryUpdaterProvider, useLexCQLQueryUpdater }\n","import { createContext, type ReactNode, useContext } from 'react'\n\nimport { type Resource } from '@/utils/api'\n\n// --------------------------------------------------------------------------\n\ninterface LexCQLResourceFieldInfo {\n  resources: Resource[]\n  fieldInfo: Map<string, Resource[]>\n}\n\ntype LexCQLResourceFieldInfoProviderProps = LexCQLResourceFieldInfo & {\n  children: ReactNode\n}\n\n// --------------------------------------------------------------------------\n\nconst LexCQLResourceFieldInfoContext = createContext<LexCQLResourceFieldInfo | undefined>(undefined)\nLexCQLResourceFieldInfoContext.displayName = 'LexCQLResourceFieldInfoContext'\n\n// --------------------------------------------------------------------------\n\nfunction LexCQLResourceFieldInfoProvider({\n  resources,\n  fieldInfo,\n  children,\n}: LexCQLResourceFieldInfoProviderProps) {\n  const data = { resources, fieldInfo }\n  return (\n    <LexCQLResourceFieldInfoContext.Provider value={data}>\n      {children}\n    </LexCQLResourceFieldInfoContext.Provider>\n  )\n}\n\n// --------------------------------------------------------------------------\n\nfunction useLexCQLResourceFieldInfo() {\n  const data = useContext(LexCQLResourceFieldInfoContext)\n\n  if (!data)\n    throw new Error(\n      'No resources and field info \"data\" set, use LexCQLResourceFieldInfoProvider to set'\n    )\n\n  return data\n}\n\n// --------------------------------------------------------------------------\n\nexport {\n  LexCQLResourceFieldInfoContext,\n  LexCQLResourceFieldInfoProvider,\n  // eslint-disable-next-line react-refresh/only-export-components\n  useLexCQLResourceFieldInfo,\n}\n","import {\n  ATN,\n  ATNDeserializer,\n  CharStream,\n  DecisionState,\n  DFA,\n  Lexer,\n  LexerATNSimulator,\n  PredictionContextCache,\n  Vocabulary,\n} from 'antlr4ng'\n\nexport class LexLexer extends Lexer {\n  public static readonly L_PAREN = 1\n  public static readonly R_PAREN = 2\n  public static readonly EQUAL = 3\n  public static readonly GREATER = 4\n  public static readonly LESSER = 5\n  public static readonly GREATER_EQUAL = 6\n  public static readonly LESSER_EQUAL = 7\n  public static readonly NOT_EQUAL = 8\n  public static readonly EQUAL_EQUAL = 9\n  public static readonly SLASH = 10\n  public static readonly AND = 11\n  public static readonly OR = 12\n  public static readonly NOT = 13\n  public static readonly DOT = 14\n  public static readonly QUOTED_STRING = 15\n  public static readonly SIMPLE_STRING = 16\n  public static readonly WS = 17\n\n  public static readonly channelNames = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']\n\n  public static readonly literalNames = [\n    null,\n    \"'('\",\n    \"')'\",\n    \"'='\",\n    \"'>'\",\n    \"'<'\",\n    \"'>='\",\n    \"'<='\",\n    \"'<>'\",\n    \"'=='\",\n    \"'/'\",\n    null,\n    null,\n    null,\n    \"'.'\",\n  ]\n\n  public static readonly symbolicNames = [\n    null,\n    'L_PAREN',\n    'R_PAREN',\n    'EQUAL',\n    'GREATER',\n    'LESSER',\n    'GREATER_EQUAL',\n    'LESSER_EQUAL',\n    'NOT_EQUAL',\n    'EQUAL_EQUAL',\n    'SLASH',\n    'AND',\n    'OR',\n    'NOT',\n    'DOT',\n    'QUOTED_STRING',\n    'SIMPLE_STRING',\n    'WS',\n  ]\n\n  public static readonly modeNames = ['DEFAULT_MODE']\n\n  public static readonly ruleNames = [\n    'L_PAREN',\n    'R_PAREN',\n    'EQUAL',\n    'GREATER',\n    'LESSER',\n    'GREATER_EQUAL',\n    'LESSER_EQUAL',\n    'NOT_EQUAL',\n    'EQUAL_EQUAL',\n    'SLASH',\n    'AND',\n    'OR',\n    'NOT',\n    'DOT',\n    'QUOTED_STRING',\n    'SIMPLE_STRING',\n    'WS',\n  ]\n\n  public constructor(input: CharStream) {\n    super(input)\n    this.interpreter = new LexerATNSimulator(\n      this,\n      LexLexer._ATN,\n      LexLexer.decisionsToDFA,\n      new PredictionContextCache()\n    )\n  }\n\n  public get grammarFileName(): string {\n    return 'LexLexer.g4'\n  }\n\n  public get literalNames(): (string | null)[] {\n    return LexLexer.literalNames\n  }\n  public get symbolicNames(): (string | null)[] {\n    return LexLexer.symbolicNames\n  }\n  public get ruleNames(): string[] {\n    return LexLexer.ruleNames\n  }\n\n  public get serializedATN(): number[] {\n    return LexLexer._serializedATN\n  }\n\n  public get channelNames(): string[] {\n    return LexLexer.channelNames\n  }\n\n  public get modeNames(): string[] {\n    return LexLexer.modeNames\n  }\n\n  public static readonly _serializedATN: number[] = [\n    4, 0, 17, 92, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2,\n    6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7,\n    13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1,\n    4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1,\n    10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14,\n    1, 14, 1, 14, 1, 14, 5, 14, 77, 8, 14, 10, 14, 12, 14, 80, 9, 14, 1, 14, 1, 14, 1, 15, 4, 15,\n    85, 8, 15, 11, 15, 12, 15, 86, 1, 16, 1, 16, 1, 16, 1, 16, 0, 0, 17, 1, 1, 3, 2, 5, 3, 7, 4, 9,\n    5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17,\n    1, 0, 9, 2, 0, 65, 65, 97, 97, 2, 0, 78, 78, 110, 110, 2, 0, 68, 68, 100, 100, 2, 0, 79, 79,\n    111, 111, 2, 0, 82, 82, 114, 114, 2, 0, 84, 84, 116, 116, 2, 0, 34, 34, 92, 92, 8, 0, 9, 10, 13,\n    13, 32, 32, 34, 34, 40, 41, 47, 47, 60, 62, 92, 92, 3, 0, 9, 10, 13, 13, 32, 32, 94, 0, 1, 1, 0,\n    0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0,\n    0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0,\n    0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0,\n    0, 33, 1, 0, 0, 0, 1, 35, 1, 0, 0, 0, 3, 37, 1, 0, 0, 0, 5, 39, 1, 0, 0, 0, 7, 41, 1, 0, 0, 0,\n    9, 43, 1, 0, 0, 0, 11, 45, 1, 0, 0, 0, 13, 48, 1, 0, 0, 0, 15, 51, 1, 0, 0, 0, 17, 54, 1, 0, 0,\n    0, 19, 57, 1, 0, 0, 0, 21, 59, 1, 0, 0, 0, 23, 63, 1, 0, 0, 0, 25, 66, 1, 0, 0, 0, 27, 70, 1, 0,\n    0, 0, 29, 72, 1, 0, 0, 0, 31, 84, 1, 0, 0, 0, 33, 88, 1, 0, 0, 0, 35, 36, 5, 40, 0, 0, 36, 2, 1,\n    0, 0, 0, 37, 38, 5, 41, 0, 0, 38, 4, 1, 0, 0, 0, 39, 40, 5, 61, 0, 0, 40, 6, 1, 0, 0, 0, 41, 42,\n    5, 62, 0, 0, 42, 8, 1, 0, 0, 0, 43, 44, 5, 60, 0, 0, 44, 10, 1, 0, 0, 0, 45, 46, 5, 62, 0, 0,\n    46, 47, 5, 61, 0, 0, 47, 12, 1, 0, 0, 0, 48, 49, 5, 60, 0, 0, 49, 50, 5, 61, 0, 0, 50, 14, 1, 0,\n    0, 0, 51, 52, 5, 60, 0, 0, 52, 53, 5, 62, 0, 0, 53, 16, 1, 0, 0, 0, 54, 55, 5, 61, 0, 0, 55, 56,\n    5, 61, 0, 0, 56, 18, 1, 0, 0, 0, 57, 58, 5, 47, 0, 0, 58, 20, 1, 0, 0, 0, 59, 60, 7, 0, 0, 0,\n    60, 61, 7, 1, 0, 0, 61, 62, 7, 2, 0, 0, 62, 22, 1, 0, 0, 0, 63, 64, 7, 3, 0, 0, 64, 65, 7, 4, 0,\n    0, 65, 24, 1, 0, 0, 0, 66, 67, 7, 1, 0, 0, 67, 68, 7, 3, 0, 0, 68, 69, 7, 5, 0, 0, 69, 26, 1, 0,\n    0, 0, 70, 71, 5, 46, 0, 0, 71, 28, 1, 0, 0, 0, 72, 78, 5, 34, 0, 0, 73, 74, 5, 92, 0, 0, 74, 77,\n    7, 6, 0, 0, 75, 77, 8, 6, 0, 0, 76, 73, 1, 0, 0, 0, 76, 75, 1, 0, 0, 0, 77, 80, 1, 0, 0, 0, 78,\n    76, 1, 0, 0, 0, 78, 79, 1, 0, 0, 0, 79, 81, 1, 0, 0, 0, 80, 78, 1, 0, 0, 0, 81, 82, 5, 34, 0, 0,\n    82, 30, 1, 0, 0, 0, 83, 85, 8, 7, 0, 0, 84, 83, 1, 0, 0, 0, 85, 86, 1, 0, 0, 0, 86, 84, 1, 0, 0,\n    0, 86, 87, 1, 0, 0, 0, 87, 32, 1, 0, 0, 0, 88, 89, 7, 8, 0, 0, 89, 90, 1, 0, 0, 0, 90, 91, 6,\n    16, 0, 0, 91, 34, 1, 0, 0, 0, 4, 0, 76, 78, 86, 1, 0, 1, 0,\n  ]\n\n  private static __ATN: ATN\n  public static get _ATN(): ATN {\n    if (!LexLexer.__ATN) {\n      LexLexer.__ATN = new ATNDeserializer().deserialize(LexLexer._serializedATN)\n    }\n\n    return LexLexer.__ATN\n  }\n\n  private static readonly vocabulary = new Vocabulary(\n    LexLexer.literalNames,\n    LexLexer.symbolicNames,\n    []\n  )\n\n  public override get vocabulary(): Vocabulary {\n    return LexLexer.vocabulary\n  }\n\n  private static readonly decisionsToDFA = LexLexer._ATN.decisionToState.map(\n    (ds: DecisionState, index: number) => new DFA(ds, index)\n  )\n}\n","import { AbstractParseTreeVisitor } from 'antlr4ng'\n\nimport {\n  Boolean_modifiedContext,\n  Boolean_queryContext,\n  IndexContext,\n  Modifier_listContext,\n  Modifier_nameContext,\n  Modifier_relationContext,\n  Modifier_valueContext,\n  ModifierContext,\n  Prefix_nameContext,\n  PrefixContext,\n  QueryContext,\n  R_booleanContext,\n  Relation_modifiedContext,\n  Relation_nameContext,\n  Relation_symbolContext,\n  RelationContext,\n  Search_clauseContext,\n  Search_termContext,\n  Simple_nameContext,\n  SubqueryContext,\n} from './LexParser.js'\n\n/**\n * This interface defines a complete generic visitor for a parse tree produced\n * by `LexParser`.\n *\n * @param <Result> The return type of the visit operation. Use `void` for\n * operations with no return type.\n */\nexport class LexParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {\n  /**\n   * Visit a parse tree produced by `LexParser.query`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitQuery?: (ctx: QueryContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.boolean_query`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitBoolean_query?: (ctx: Boolean_queryContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.subquery`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitSubquery?: (ctx: SubqueryContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.search_clause`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitSearch_clause?: (ctx: Search_clauseContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.search_term`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitSearch_term?: (ctx: Search_termContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.index`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitIndex?: (ctx: IndexContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.relation_modified`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRelation_modified?: (ctx: Relation_modifiedContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.relation`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRelation?: (ctx: RelationContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.relation_name`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRelation_name?: (ctx: Relation_nameContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.relation_symbol`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitRelation_symbol?: (ctx: Relation_symbolContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.boolean_modified`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitBoolean_modified?: (ctx: Boolean_modifiedContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.r_boolean`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitR_boolean?: (ctx: R_booleanContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.modifier_list`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitModifier_list?: (ctx: Modifier_listContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.modifier`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitModifier?: (ctx: ModifierContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.modifier_name`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitModifier_name?: (ctx: Modifier_nameContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.modifier_relation`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitModifier_relation?: (ctx: Modifier_relationContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.modifier_value`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitModifier_value?: (ctx: Modifier_valueContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.prefix_name`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitPrefix_name?: (ctx: Prefix_nameContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.prefix`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitPrefix?: (ctx: PrefixContext) => Result\n  /**\n   * Visit a parse tree produced by `LexParser.simple_name`.\n   * @param ctx the parse tree\n   * @return the visitor result\n   */\n  visitSimple_name?: (ctx: Simple_nameContext) => Result\n}\n","import { CharStream, CommonTokenStream, ParseTree, TokenStreamRewriter } from 'antlr4ng'\n\nimport { LexLexer } from '@/parsers/LexLexer'\nimport { IndexContext, LexParser, QueryContext } from '@/parsers/LexParser'\nimport { LexParserVisitor } from '@/parsers/LexParserVisitor'\nimport { type Resource } from '@/utils/api'\nimport { _formatTreeItems, _getTreeItems, QuerySyntaxErrorListener } from '../utils'\n\n// --------------------------------------------------------------------------\n\nexport function parseQuery(input?: string) {\n  if (!input) return null\n  if (!input.trim()) return null\n\n  // console.time('parse-query')\n  const inputStream = CharStream.fromString(input)\n  const lexer = new LexLexer(inputStream)\n  const tokenStream = new CommonTokenStream(lexer)\n  const rewriter = new TokenStreamRewriter(tokenStream)\n  const parser = new LexParser(tokenStream)\n\n  const errorListener = new QuerySyntaxErrorListener()\n  lexer.removeErrorListeners()\n  lexer.addErrorListener(errorListener)\n  parser.removeErrorListeners()\n  parser.addErrorListener(errorListener)\n\n  const tree = parser.query()\n  // console.timeEnd('parse-query')\n\n  // DEBUG\n  // Object.assign(window, { input, inputStream, lexer, tokenStream, parser, rewriter, tree })\n\n  // console.debug('tree', tree.toStringTree(parser))\n  const treeItems = /*#__PURE__*/ _getTreeItems(tree, parser, lexer)\n  console.log(/*#__PURE__*/ _formatTreeItems(treeItems))\n\n  return { tree, lexer, parser, rewriter, errors: errorListener.errors }\n}\n\n// --------------------------------------------------------------------------\n\nclass CollectFieldsVisitor extends LexParserVisitor<void> {\n  public fields: string[] = []\n\n  public visitIndex = (ctx: IndexContext) => {\n    this.fields.push(ctx.getText())\n  }\n}\n\nexport function getFieldsUsedInQuery(ctx?: QueryContext | ParseTree) {\n  // collect mentioned fields in query\n  const fieldCollector = new CollectFieldsVisitor()\n  if (ctx) {\n    fieldCollector.visit(ctx)\n  }\n\n  const usedFields = fieldCollector.fields\n  const uniqFields = new Set(usedFields)\n\n  return [...uniqFields]\n}\n\nexport interface SupportedResourcesInfo {\n  supported: Resource[]\n  unsupported: (readonly [Resource, string[]])[]\n  unsupportedByField: Map<string, Resource[]>\n}\n\nexport function getResourcesFieldSupportInfo(\n  resources: Resource[],\n  fields: string[]\n): SupportedResourcesInfo {\n  if (fields.length === 0 || resources.length === 0) {\n    return {\n      supported: resources,\n      unsupported: [],\n      unsupportedByField: new Map<string, Resource[]>(),\n    }\n  }\n\n  // find resources that do have these fields\n  // TODO: use `layerInfo` where it is precomputed?\n  const resourcesWithField = resources.map((resource) => {\n    const notAvailableFields: string[] = []\n\n    fields.forEach((field) => {\n      if (!resource.availableLexFields?.find((lexField) => lexField.type === field)) {\n        notAvailableFields.push(field)\n      }\n    })\n\n    return [resource, notAvailableFields] as const\n  })\n\n  const validResources = resourcesWithField\n    .filter(([, fields]) => fields.length === 0)\n    .map(([resource]) => resource)\n  const invalidResources = resourcesWithField.filter(([, fields]) => fields.length !== 0)\n  const invalidResourcesByField = invalidResources\n    .map(([resource, fields]) => fields.map((field) => [field, resource] as const))\n    .flat(1)\n    .reduce((map, [field, resource]) => {\n      if (!map.has(field)) {\n        map.set(field, [])\n      }\n      map.get(field)!.push(resource)\n      return map\n    }, new Map<string, Resource[]>())\n\n  return {\n    supported: validResources,\n    unsupported: invalidResources,\n    unsupportedByField: invalidResourcesByField,\n  }\n}\n\n// --------------------------------------------------------------------------\n\nexport const CHARS_REQUIRING_QUOTING = '<>()=\\\\\" '\nconst REGEXP_REQUIRE_QUOTING = /([<>()=\\\\\" ])/g\nconst REGEXP_ESCAPE_QUOTING = /([\\\\\"])/g\nconst REGEXP_UNESCAPED_QUOTING = /(?:\\\\)([\\\\\"])/g\n\nexport function maybeUnquoteSearchTerm(value: string | null | undefined) {\n  if (!value) return ''\n\n  if (value.startsWith('\"') && value.endsWith('\"')) {\n    let unquoted = value.slice(1, -1)\n    unquoted = unquoted.replace(REGEXP_UNESCAPED_QUOTING, '$1')\n    return unquoted\n  }\n  return value\n}\n\nexport function maybeQuoteSearchTerm(value: string | undefined, forceQuotes: boolean = false) {\n  if (!value) return '\"\"'\n\n  // check if quoting is required\n  if (!value.match(REGEXP_REQUIRE_QUOTING)) {\n    if (forceQuotes) {\n      // NOTE: should not require escaping of any characters\n      return `\"${value}\"`\n    }\n    return value\n  }\n\n  const escaped = value.replace(REGEXP_ESCAPE_QUOTING, '\\\\$1')\n  return `\"${escaped}\"`\n}\n","import { TerminalNode } from 'antlr4ng'\nimport { Fragment, useEffect, useMemo, useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\n\nimport {\n  Boolean_modifiedContext,\n  Boolean_queryContext,\n  QueryContext,\n  Relation_modifiedContext,\n  Search_clauseContext,\n  SubqueryContext,\n} from '@/parsers/LexParser'\nimport { type Resource } from '@/utils/api'\nimport { isCursorOnContext } from '../utils'\nimport {\n  BOOLEANS,\n  DEFAULT_NEW_RELATION,\n  FIELD_GROUPS,\n  FIELDS_MAP,\n  type FieldsType,\n  NEW_SEARCH_CLAUSE_CHOICES,\n  NEW_SEARCH_CLAUSE_CHOICES_MAP,\n  type NewSearchClauseChoicesType,\n  RELATION_MODIFIERS,\n  RELATION_MODIFIERS_MUTUALLY_EXCLUSIVE,\n  type RelationModifiersType,\n  RELATIONS,\n  type RelationsType,\n} from './constants'\nimport { LexCQLParserLexerProvider, useLexCQLParserLexer } from './LexCQLParserLexerContext'\nimport {\n  LexCQLQueryBuilderConfig,\n  LexCQLQueryBuilderConfigProvider,\n  useLexCQLQueryBuilderConfig,\n} from './LexCQLQueryBuilderConfigContext'\nimport { LexCQLQueryUpdaterProvider, useLexCQLQueryUpdater } from './LexCQLQueryUpdaterContext'\nimport {\n  LexCQLResourceFieldInfoProvider,\n  useLexCQLResourceFieldInfo,\n} from './LexCQLResourceFieldInfoContext'\nimport { maybeQuoteSearchTerm, maybeUnquoteSearchTerm, parseQuery } from './utils'\n\n// import bracesIcon from 'bootstrap-icons/icons/braces.svg?raw'\nimport plusCircleIcon from 'bootstrap-icons/icons/plus-circle.svg?raw'\nimport xCircleIcon from 'bootstrap-icons/icons/x-circle.svg?raw'\n\nimport './styles.css'\n\n// --------------------------------------------------------------------------\n\ninterface LexQueryBuilderProps {\n  query?: string\n  /** cursor position in query */\n  cursorPos?: [number, number] | number\n  resources?: Resource[]\n  onChange?: (query: string) => void\n}\n\nexport function LexCQLQueryBuilder({\n  query: queryProp,\n  cursorPos,\n  resources: resourcesProp,\n  onChange,\n  ...props\n}: LexQueryBuilderProps & Partial<LexCQLQueryBuilderConfig>) {\n  const [query, setQuery] = useState(queryProp ?? '')\n  useEffect(() => setQuery(queryProp ?? ''), [queryProp])\n\n  // let's again filter for resources that have the Lex Data View or LEX_SEARCH search capability (and at least one field?)\n  const resources = useMemo(() => {\n    const filtered =\n      resourcesProp?.filter(\n        (resource) =>\n          (resource.availableDataViews?.find(\n            (dataview) => dataview.mimeType === 'application/x-clarin-fcs-lex+xml'\n          ) !== undefined ||\n            resource.searchCapabilitiesResolved.includes('LEX_SEARCH')) &&\n          resource.availableLexFields !== null &&\n          resource.availableLexFields.length > 0\n      ) ?? []\n\n    if (resourcesProp && resourcesProp.length !== filtered.length) {\n      const resourcesDiff = resourcesProp.filter((resource) => !filtered.includes(resource))\n      console.warn(\n        'Filter out resource(s) that do(es) not correctly declare LexCQL query support',\n        resourcesDiff\n      )\n    }\n\n    return filtered\n  }, [resourcesProp])\n\n  // compute list of fields we know and want to make available\n  const fieldInfo = useMemo(() => {\n    return resources\n      .map((resource) => {\n        const fieldTypes = new Set<string>()\n        resource.availableLexFields!.forEach((field) => {\n          if (!fieldTypes.has(field.type)) {\n            fieldTypes.add(field.type)\n          }\n        })\n        return [...fieldTypes.values()].map((fieldType) => ({\n          fieldType,\n          resource,\n        }))\n      })\n      .reduce((map, item) => {\n        item.forEach(({ fieldType, resource }) => {\n          if (!map.has(fieldType)) {\n            map.set(fieldType, [] as Resource[])\n          }\n          const data = map.get(fieldType)!\n          data.push(resource)\n        })\n        return map\n      }, new Map<string, Resource[]>())\n  }, [resources])\n  // console.debug('fieldInfo', { resources, fieldInfo })\n\n  // console.debug('Parse query', { query, queryProp })\n  const parsed = useMemo(() => parseQuery(query), [query])\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleQueryChange() {\n    if (parsed) {\n      const { rewriter } = parsed\n\n      // TODO: maybe prune some whitespaces?\n      // NOTE: but do not interfere with user input!\n      // maybe separete input from query builder stuff\n\n      const newQuery = rewriter.getText()\n      setQuery(newQuery)\n      onChange?.(newQuery) // TODO: or do we wait for parsing to finish?\n    } else {\n      console.warn('No parsed query! Unable to handle change request', parsed)\n    }\n  }\n\n  function handleAddSearchClauseClick(type: NewSearchClauseChoicesType) {\n    const newQuery = NEW_SEARCH_CLAUSE_CHOICES_MAP[type].new\n    setQuery(newQuery)\n    onChange?.(newQuery)\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div id=\"query-builder\" className=\"lex-query d-flex justify-content-center\">\n      <LexCQLQueryBuilderConfigProvider\n        enableRelationModifiers={props.enableRelationModifiers ?? true}\n        forceSearchTermQuoting={props.forceSearchTermQuoting ?? false}\n        showAllFields={props.showAllFields ?? false}\n        showResourceCountForField={props.showResourceCountForField ?? true}\n      >\n        <LexCQLResourceFieldInfoProvider resources={resources} fieldInfo={fieldInfo}>\n          {parsed ? (\n            <LexCQLParserLexerProvider\n              parser={parsed.parser}\n              lexer={parsed.lexer}\n              cursorPos={cursorPos}\n            >\n              <LexCQLQueryUpdaterProvider rewriter={parsed.rewriter}>\n                <Query tree={parsed.tree} onChange={handleQueryChange} />\n              </LexCQLQueryUpdaterProvider>\n            </LexCQLParserLexerProvider>\n          ) : (\n            <AddSearchClauseButton onClick={handleAddSearchClauseClick} />\n          )}\n        </LexCQLResourceFieldInfoProvider>\n      </LexCQLQueryBuilderConfigProvider>\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n// modify query buttons\n\nfunction RemoveButton({ className, onClick }: { className?: string; onClick?: () => void }) {\n  return (\n    <Button\n      variant=\"link\"\n      className={['del-btn action-btn rounded-circle p-1'].concat(className ?? []).join(' ')}\n      onClick={onClick}\n    >\n      <i dangerouslySetInnerHTML={{ __html: xCircleIcon }} aria-hidden=\"true\" />\n    </Button>\n  )\n}\n\nfunction AddSearchClauseButton({\n  className,\n  onClick,\n}: {\n  className?: string\n  onClick?: (type: NewSearchClauseChoicesType) => void\n}) {\n  function handleAddSelection(eventKey: string | null) {\n    if (!eventKey) return\n    onClick?.(eventKey as unknown as NewSearchClauseChoicesType)\n  }\n\n  return (\n    <Dropdown\n      className={[''].concat(className ?? []).join(' ')}\n      onSelect={handleAddSelection}\n      aria-label=\"Add search clause\"\n    >\n      <Dropdown.Toggle variant=\"link\" className=\"add-search-clause-btn action-btn no-arrow\">\n        <i dangerouslySetInnerHTML={{ __html: plusCircleIcon }} aria-hidden=\"true\" />\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        {NEW_SEARCH_CLAUSE_CHOICES.map((item) => (\n          <Dropdown.Item key={item.id} eventKey={item.id}>\n            {item.label}\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n}\n\n// --------------------------------------------------------------------------\n// query structure\n\nfunction Query({ tree, onChange }: { tree: QueryContext; onChange?: () => void }) {\n  const booleanQueryCtx = tree.boolean_query()\n\n  return (\n    <div className=\"query flex-grow-1 justify-content-center d-flex flex-wrap row-gap-2 column-gap-1 rounded\">\n      <BooleanQuerySequence ctx={booleanQueryCtx} onChange={onChange} />\n    </div>\n  )\n}\n\nfunction BooleanQuerySequence({\n  ctx,\n  onChange,\n}: {\n  ctx: Boolean_queryContext\n  onChange?: () => void\n}) {\n  const { rewriter } = useLexCQLQueryUpdater()\n\n  const hasMultipleChildren = ctx.getChildCount() > 1\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleDelete(childIdx: number) {\n    if (ctx.getChildCount() === 1) {\n      // case: single subquery child\n      const subqueryCtx = ctx.subquery(0)\n      if (!subqueryCtx || !subqueryCtx.start) {\n        console.warn('Invalid parse tree state. A subquery with associated token should exist!', {\n          ctx,\n          subqueryCtx,\n          childIdx,\n        })\n        return\n      }\n      rewriter.delete(subqueryCtx.start, subqueryCtx.stop)\n      onChange?.()\n    } else if (childIdx === 0) {\n      // case: first subquery child but more siblings follow\n      // note: delete boolean after (since more siblings follow)\n      const subqueryCtx = ctx.subquery(0)\n      const booleanModifiedCtx = ctx.boolean_modified(0)\n      if (!subqueryCtx || !booleanModifiedCtx || !subqueryCtx.start || !booleanModifiedCtx.stop) {\n        console.warn(\n          'Invalid parse tree state. A subquery and boolean_modified with associated tokens should exist!',\n          {\n            ctx,\n            subqueryCtx,\n            booleanModifiedCtx,\n            childIdx,\n          }\n        )\n        return\n      }\n      rewriter.delete(subqueryCtx.start, booleanModifiedCtx.stop)\n      onChange?.()\n    } else {\n      // case: non-first subquery child with siblings before (maybe after)\n      // note: delete boolean before\n      const subqueryCtx = ctx.getChild(childIdx) as SubqueryContext | null\n      const booleanModifiedCtx = ctx.getChild(childIdx - 1) as Boolean_modifiedContext | null\n      if (!subqueryCtx || !booleanModifiedCtx || !subqueryCtx.stop || !booleanModifiedCtx.start) {\n        console.warn(\n          'Invalid parse tree state. A subquery and boolean_modified with associated tokens should exist!',\n          {\n            ctx,\n            subqueryCtx,\n            booleanModifiedCtx,\n            childIdx,\n          }\n        )\n        return\n      }\n      rewriter.delete(booleanModifiedCtx.start, subqueryCtx.stop)\n      onChange?.()\n    }\n  }\n\n  function handleAddSearchClauseBefore(type: NewSearchClauseChoicesType) {\n    const tokenIndex = ctx.start!.tokenIndex\n    const text = NEW_SEARCH_CLAUSE_CHOICES_MAP[type].newBefore\n\n    rewriter.insertBefore(tokenIndex, `${text} `)\n    onChange?.()\n  }\n\n  function handleAddSearchClauseAfter(type: NewSearchClauseChoicesType) {\n    const tokenIndex = ctx.stop!.tokenIndex\n    const text = NEW_SEARCH_CLAUSE_CHOICES_MAP[type].newAfter\n\n    rewriter.insertAfter(tokenIndex, ` ${text}`)\n    onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div\n      className={['boolean-query d-flex align-items-center row-gap-2 column-gap-1']\n        .concat(\n          hasMultipleChildren ? 'block justify-content-center flex-wrap border rounded p-1' : ''\n        )\n        .join(' ')}\n    >\n      <AddSearchClauseButton onClick={handleAddSearchClauseBefore} />\n      {ctx.children.map((childCtx, index) => {\n        if (childCtx instanceof SubqueryContext) {\n          return (\n            <SubQuery\n              ctx={childCtx}\n              onChange={onChange}\n              onDelete={() => handleDelete(index)}\n              key={index}\n            />\n          )\n        }\n        if (childCtx instanceof Boolean_modifiedContext) {\n          return <Boolean ctx={childCtx} onChange={onChange} key={index} />\n        }\n      })}\n      <AddSearchClauseButton onClick={handleAddSearchClauseAfter} />\n    </div>\n  )\n}\n\nfunction SubQuery({\n  ctx,\n  onChange,\n  onDelete,\n}: {\n  ctx: SubqueryContext\n  onChange?: () => void\n  onDelete?: () => void\n}) {\n  const booleanQueryCtx = ctx.boolean_query()\n  const searchClauseCtx = ctx.search_clause()\n\n  // search_clause is in subquery --> 1. parent: subquery\n  // subquery is in boolean_query --> 2. parent: boolean_query\n  // boolean_query is in subquery|query --> 3. parent: subquery with parentheses\n  // subquery? > boolean_query > subquery > search_clause\n  // boolean_query --> childCount if list or single\n\n  // const isSearchClauseSingleChildInBooleanQuery =\n  //   searchClauseCtx !== null && searchClauseCtx.parent?.parent?.getChildCount() === 1\n  // const isSearchClauseSingleAtTop =\n  //   searchClauseCtx !== null && searchClauseCtx.parent?.parent?.parent instanceof QueryContext\n  // const shouldShowRemoveButton =\n  //   isSearchClauseSingleAtTop ||\n  //   !isSearchClauseSingleChildInBooleanQuery ||\n  //   (hasBooleanQuery && booleanQueryCtx.getChildCount() > 1)\n\n  const hasBooleanQuery = booleanQueryCtx !== null\n  const hasSearchClause = searchClauseCtx !== null\n\n  // only show remove button if the boolean_query has no parent with this as a single child\n  // then transfer the deletability to the parent\n  const shouldShowRemoveButton =\n    hasBooleanQuery &&\n    // booleanQueryCtx.getChildCount() === 1 &&\n    !(\n      booleanQueryCtx.parent?.parent instanceof Boolean_queryContext &&\n      booleanQueryCtx.parent?.parent.getChildCount() === 1\n    )\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div\n      className={['sub-query position-relative align-items-center justify-content-center d-flex']\n        .concat(hasBooleanQuery ? 'block border rounded p-1' : '')\n        .join(' ')}\n    >\n      {hasBooleanQuery ? (\n        <>\n          <code className=\"delims\">(</code>\n          <BooleanQuerySequence ctx={booleanQueryCtx} onChange={onChange} />\n          <code className=\"delims\">)</code>\n          {shouldShowRemoveButton && (\n            <RemoveButton\n              className=\"del-within-clause-btn position-absolute top-0 start-100 translate-middle\"\n              onClick={onDelete}\n            />\n          )}\n        </>\n      ) : hasSearchClause ? (\n        <SearchClause ctx={searchClauseCtx!} onChange={onChange} onDelete={onDelete} />\n      ) : (\n        // this is an error, it seems to parse and creates a tree but what should we show here\n        <div\n          className=\"text-danger px-1\"\n          title=\"Parse error. Expected search clause or a sub query!\"\n        >\n          ???\n        </div>\n      )}\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n// inputs\n\nfunction Boolean({ ctx, onChange }: { ctx: Boolean_modifiedContext; onChange?: () => void }) {\n  const { rewriter } = useLexCQLQueryUpdater()\n  const { cursorPos } = useLexCQLParserLexer()\n\n  const isCursorOnMe = isCursorOnContext(ctx, cursorPos)\n\n  const value = ctx.getChild(0)?.getText().toLowerCase()\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleSelect(eventKey: string | null) {\n    const newBoolean = eventKey\n    if (!newBoolean) return\n    if (newBoolean === value) return\n\n    const token = (ctx.r_boolean().getChild(0) as TerminalNode).symbol\n    if (!token) {\n      console.warn('Unexpected parse tree, expected terminal node as first child!', {\n        ctx,\n        boolean: ctx.r_boolean(),\n        firstChild: ctx.r_boolean().getChild(0),\n      })\n      return\n    }\n    rewriter.replaceSingle(token, newBoolean)\n    onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  return (\n    <div\n      className={['boolean focus-ring rounded mx-1']\n        .concat([isCursorOnMe ? 'cursor-focus' : ''])\n        .join(' ')}\n    >\n      <Dropdown onSelect={handleSelect}>\n        <Dropdown.Toggle className=\"form-select\">\n          <code className=\"keyword\">{value}</code>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {BOOLEANS.map((boolean) => (\n            <Dropdown.Item key={boolean.id} eventKey={boolean.id}>\n              {boolean.label}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  )\n}\n\nfunction extractRelationModifierIDsFromQuery(relationModifiedCtx: Relation_modifiedContext | null) {\n  // extract names from query\n  const modifierListCtx = relationModifiedCtx?.modifier_list()?.modifier() ?? []\n  const modifierListCtxNames = modifierListCtx.map(\n    (modifierCtx) =>\n      modifierCtx.modifier_name().simple_name().SIMPLE_STRING().symbol.text?.toLowerCase() ?? ''\n  )\n\n  return RELATION_MODIFIERS.map((relMod) => relMod.id).filter((modifier) =>\n    modifierListCtxNames.includes(modifier.toLowerCase())\n  )\n}\n\nfunction getRelationModifierByName(\n  relationModifiedCtx: Relation_modifiedContext | null,\n  name: string\n) {\n  // extract lang relation modifier from query\n  const modifierListCtx = relationModifiedCtx?.modifier_list()?.modifier() ?? []\n  const modifierLangCtx = modifierListCtx.find(\n    (modifierCtx) =>\n      modifierCtx.modifier_name().simple_name().SIMPLE_STRING().symbol.text?.toLowerCase() === name\n  )\n  return modifierLangCtx\n}\n\nfunction extractRelationModifierLangValueFromQuery(\n  relationModifiedCtx: Relation_modifiedContext | null\n) {\n  // extract lang relation modifier from query\n  const modifierLangCtx = getRelationModifierByName(relationModifiedCtx, 'lang')\n\n  if (!modifierLangCtx?.modifier_relation()?.relation_symbol().EQUAL()) {\n    console.warn('Language relation modifier with unsupported relation!')\n    // TODO: print location info?\n  }\n\n  const modifierValueCtx = modifierLangCtx?.modifier_relation()?.modifier_value()\n  if (!modifierValueCtx) {\n    console.warn('No language value for for language relation modifier!')\n    return ''\n  }\n\n  const quotedValue = modifierValueCtx.QUOTED_STRING()\n  const simpleValue = modifierValueCtx.SIMPLE_STRING()\n  const newLanguageValue = quotedValue?.symbol.text ?? simpleValue?.symbol.text\n  return maybeUnquoteSearchTerm(newLanguageValue)\n}\n\nfunction SearchClause({\n  ctx,\n  onChange,\n  onDelete,\n}: {\n  ctx: Search_clauseContext\n  onChange?: () => void\n  onDelete?: () => void\n}) {\n  const { rewriter } = useLexCQLQueryUpdater()\n  const { cursorPos } = useLexCQLParserLexer()\n  const { fieldInfo } = useLexCQLResourceFieldInfo()\n  const {\n    forceSearchTermQuoting,\n    enableRelationModifiers,\n    showAllFields,\n    showResourceCountForField,\n  } = useLexCQLQueryBuilderConfig()\n\n  const foundFields = [...fieldInfo.keys()] as FieldsType[]\n\n  const isCursorOnMe = isCursorOnContext(ctx, cursorPos)\n  const shouldShowRemoveButton = ctx.parent?.parent?.getChildCount() !== 1\n\n  const indexCtx = ctx.index()\n  const relationModifiedCtx = ctx.relation_modified()\n  const searchTermCtx = ctx.search_term()\n\n  const [index, setIndex] = useState<FieldsType | string | null>(null)\n  const [relation, setRelation] = useState<RelationsType | string | null>(null)\n  const [relationModifiers, setRelationModifiers] = useState<RelationModifiersType[]>([])\n  const [relationModifierLang, setRelationModifierLang] = useState<string>('')\n  const [searchTerm, setSearchTerm] = useState<string>('')\n\n  useEffect(() => {\n    const newIndex = indexCtx?.getText()\n    const newRelation = relationModifiedCtx?.relation().getText()\n\n    const quotedSearchTerm = searchTermCtx.QUOTED_STRING()\n    const simpleSearchTerm = searchTermCtx.SIMPLE_STRING()\n    const newSearchTerm = quotedSearchTerm?.symbol.text ?? simpleSearchTerm?.symbol.text\n\n    setIndex(newIndex ?? null)\n    setRelation(newRelation ?? null)\n    setRelationModifiers(extractRelationModifierIDsFromQuery(relationModifiedCtx))\n    setRelationModifierLang(extractRelationModifierLangValueFromQuery(relationModifiedCtx))\n    setSearchTerm(maybeUnquoteSearchTerm(newSearchTerm))\n  }, [indexCtx, relationModifiedCtx, searchTermCtx])\n\n  const showRelationModifiers = enableRelationModifiers && relation !== 'is'\n\n  // ------------------------------------------------------------------------\n  // helpers\n\n  function updateRelationModifiersList(\n    modifiers: RelationModifiersType[],\n    modifierToToggle: RelationModifiersType\n  ) {\n    // TODO: a.localCompare(b, undefined, { sensitivity: \"base\" })\n    const modifierToToggleLc = modifierToToggle.toLowerCase()\n    if (modifiers.map((v) => v.toLowerCase()).includes(modifierToToggleLc)) {\n      return modifiers.filter((oldModifier) => oldModifier.toLowerCase() !== modifierToToggleLc)\n    }\n\n    if (\n      (RELATION_MODIFIERS_MUTUALLY_EXCLUSIVE.flat(1) as string[])\n        .map((v) => v.toLowerCase())\n        .includes(modifierToToggleLc)\n    ) {\n      // filter out mutually exclusive modifier\n      RELATION_MODIFIERS_MUTUALLY_EXCLUSIVE.find((modifierExclusions) => {\n        const modifierExclusionsLc = modifierExclusions.map((v) => v.toLowerCase())\n        // first find the list where the mutually exclusive modifier is included\n        if (modifierExclusionsLc.includes(modifierToToggleLc)) {\n          const modifiersToRemove = modifierExclusionsLc.filter(\n            (modifierExclusion) => modifierExclusion !== modifierToToggleLc\n          )\n          // filter out every other modifier\n          modifiers = modifiers.filter(\n            (oldModifier) => !modifiersToRemove.includes(oldModifier.toLowerCase())\n          )\n          return true // abort find loop\n        }\n      })\n    }\n    // use updated list and now add the new modifier\n    return [...modifiers, modifierToToggle]\n  }\n\n  function updateRelationModifierQuery(\n    relationModifiers: RelationModifiersType[],\n    relationModifiedCtx: Relation_modifiedContext | null\n  ) {\n    if (!relationModifiedCtx) {\n      console.warn(\n        'Unexpected parse state. For updating relation modifiers, the relation context should exist!',\n        { relationModifiers, relationModifiedCtx }\n      )\n      return\n    }\n    const tokenIndexEnd = relationModifiedCtx.stop!.tokenIndex\n    const modifierListCtx = relationModifiedCtx.modifier_list()?.modifier() ?? []\n\n    const relationModifiersLc = relationModifiers.map((v) => v.toLowerCase())\n    const relationModifiersCtxNames = []\n    let changed = false\n\n    // first remove existing modifiers if needed\n    for (const modifierCtx of modifierListCtx) {\n      const modifierName =\n        modifierCtx.modifier_name().simple_name().SIMPLE_STRING().symbol.text?.toLowerCase() ?? ''\n      if (!relationModifiersLc.includes(modifierName)) {\n        rewriter.delete(modifierCtx.start!, modifierCtx.stop!)\n        changed = true\n      } else {\n        relationModifiersCtxNames.push(modifierName)\n      }\n    }\n\n    // add new modifiers if needed\n    for (const newModifier of relationModifiers) {\n      if (!relationModifiersCtxNames.includes(newModifier.toLowerCase())) {\n        if (newModifier.toLowerCase() === 'lang') {\n          rewriter.insertAfter(tokenIndexEnd, `/${newModifier}=\"\"`)\n        } else {\n          rewriter.insertAfter(tokenIndexEnd, `/${newModifier}`)\n        }\n        changed = true\n      }\n    }\n\n    if (changed) onChange?.()\n  }\n\n  // ------------------------------------------------------------------------\n  // event handlers\n\n  function handleIndexChange(eventKey: string | null) {\n    const newIndex = eventKey\n    if (!newIndex) return\n    if (newIndex === index) return\n\n    setIndex(newIndex)\n\n    if (indexCtx === null) {\n      setRelation(DEFAULT_NEW_RELATION)\n\n      // TODO: this might happen elsewhere?\n      const text = `${newIndex} ${DEFAULT_NEW_RELATION} ${maybeQuoteSearchTerm(\n        searchTerm,\n        forceSearchTermQuoting || searchTermCtx.QUOTED_STRING() !== null\n      )}`\n      rewriter.replace(ctx.start!, ctx.stop!, text)\n    } else {\n      rewriter.replace(indexCtx.start!, indexCtx.stop!, newIndex)\n    }\n\n    onChange?.()\n  }\n\n  function handleRelationChange(eventKey: string | null) {\n    const newRelation = eventKey\n    if (!newRelation) return\n    if (newRelation === index) return\n\n    setRelation(newRelation)\n    if (relationModifiedCtx !== null) {\n      const relationCtx = relationModifiedCtx.relation()\n      rewriter.replace(relationCtx.start!, relationCtx.stop!, newRelation)\n\n      if (newRelation === 'is') {\n        const relationModifiersCtx = relationModifiedCtx.modifier_list()\n        if (relationModifiersCtx) {\n          rewriter.delete(relationModifiersCtx.start!, relationModifiersCtx.stop!)\n        }\n      }\n    }\n    onChange?.()\n  }\n\n  function handleSearchTermChange() {\n    const newSearchTerm = maybeQuoteSearchTerm(\n      searchTerm,\n      forceSearchTermQuoting || searchTermCtx.QUOTED_STRING() !== null\n    )\n    rewriter.replace(searchTermCtx.start!, searchTermCtx.stop!, newSearchTerm)\n    onChange?.()\n  }\n\n  function handleRelationModifierLanguageChange() {\n    if (!relationModifiedCtx) {\n      console.warn(\n        'Unexpected parse state. For updating relation modifiers, the relation context should exist!',\n        { relationModifiers, relationModifiedCtx }\n      )\n      return\n    }\n\n    // TODO: validate \"relationModifierLang\" otherwise abort\n\n    // extract lang relation modifier from query\n    const modifierLangCtx = getRelationModifierByName(relationModifiedCtx, 'lang')\n    if (!modifierLangCtx) {\n      // no language relation modifier found?!\n      const tokenIndexEnd = relationModifiedCtx.stop!.tokenIndex\n      rewriter.insertAfter(tokenIndexEnd, `/lang=\"${relationModifierLang}\"`)\n      onChange?.()\n      return\n    }\n\n    // extract relation modifier value\n    const modifierValueCtx = modifierLangCtx.modifier_relation()?.modifier_value()\n    if (!modifierValueCtx) {\n      // modifier found but without value\n      const tokenIndexEnd = modifierLangCtx.stop!.tokenIndex\n      rewriter.insertAfter(tokenIndexEnd, `=\"${relationModifierLang}\"`)\n      onChange?.()\n      return\n    }\n\n    const newRelationModifierLanguage = maybeQuoteSearchTerm(\n      relationModifierLang,\n      forceSearchTermQuoting || modifierValueCtx.QUOTED_STRING() !== null\n    )\n    rewriter.replace(modifierValueCtx.start!, modifierValueCtx.stop!, newRelationModifierLanguage)\n    onChange?.()\n  }\n\n  function handleToggleRelationModifier(modifier: RelationModifiersType) {\n    // update query\n    const newRelationModifiers = updateRelationModifiersList(relationModifiers, modifier)\n    updateRelationModifierQuery(newRelationModifiers, relationModifiedCtx)\n\n    // update state (not really required due to useEffect state updating on query change)\n    setRelationModifiers((modifiers) => updateRelationModifiersList(modifiers, modifier))\n  }\n\n  // ------------------------------------------------------------------------\n  // UI\n\n  function renderSearchTermInput() {\n    return (\n      <Form.Control\n        className=\"d-inline\"\n        style={{ width: '10ch' }}\n        value={searchTerm}\n        onChange={(event) => setSearchTerm(event.target.value)}\n        onBlur={handleSearchTermChange}\n      />\n    )\n  }\n\n  function renderRelationModifierLanguageInput() {\n    // TODO: maybe pre-compute resource languages and only \"allow\" those languages\n    const isInvalid = !relationModifierLang.match(/^[a-z]{3}$/i)\n\n    return (\n      <InputGroup hasValidation>\n        <Form.Control\n          className=\"d-inline\"\n          style={{\n            /* maxWidth: '10ch', */\n            /* see .form-check@paddingLeft */\n            marginLeft: '1.5em',\n          }}\n          // maxLength={3}\n          placeholder=\"ISO638-3 Code\"\n          pattern=\"[a-zA-Z]{3}\"\n          required\n          value={relationModifierLang}\n          onChange={(event) => setRelationModifierLang(event.target.value)}\n          onBlur={handleRelationModifierLanguageChange}\n          isInvalid={isInvalid}\n        />\n        <Form.Control.Feedback\n          style={{\n            /* see .form-check@paddingLeft + .form-control@paddingLeft */\n            marginLeft: '1.75em',\n            whiteSpace: 'break-spaces',\n          }}\n          type=\"invalid\"\n        >\n          Invalid ISO639-3 language code\n        </Form.Control.Feedback>\n      </InputGroup>\n    )\n  }\n\n  function renderFieldItem(fieldType: string, description: string | undefined = undefined) {\n    return (\n      <>\n        <strong>{fieldType}</strong>\n        {description && `: ${description}`}\n        {renderFieldResourceCount(fieldType)}\n      </>\n    )\n  }\n\n  function renderFieldResourceCount(fieldType: string) {\n    if (!showResourceCountForField) return null\n\n    const count = fieldInfo.get(fieldType)?.length ?? 0\n\n    return (\n      <>\n        <br />\n        <small className=\"text-body-secondary\">Supported by {count} resources.</small>\n      </>\n    )\n  }\n\n  return (\n    <div\n      className={[\n        'block input-block basic-expression position-relative focus-ring border rounded py-2 px-2',\n      ]\n        .concat([shouldShowRemoveButton ? 'me-2 mt-1' : ''])\n        .concat([isCursorOnMe ? 'cursor-focus' : ''])\n        .join(' ')}\n    >\n      <div className=\"d-flex justify-content-center column-gap-2\">\n        {/* index */}\n        <Dropdown onSelect={handleIndexChange}>\n          <Dropdown.Toggle className=\"form-select\">\n            {index ?? <em className=\"text-muted\">(default)</em>}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {FIELD_GROUPS.map((group) =>\n              foundFields.find((fieldType) => (group.fields as FieldsType[]).includes(fieldType)) ||\n              group.id === 'virtual' ||\n              (group.fields as string[]).includes(index!) ? (\n                <Fragment key={group.id}>\n                  {(showAllFields || fieldInfo.size > 5) && (\n                    <Dropdown.Header>{group.label}</Dropdown.Header>\n                  )}\n                  {group.fields.map(\n                    (fieldType) =>\n                      (showAllFields ||\n                        foundFields.includes(fieldType) ||\n                        group.id === 'virtual' ||\n                        fieldType === index) && (\n                        <Dropdown.Item\n                          key={fieldType}\n                          eventKey={fieldType}\n                          active={fieldType === index}\n                        >\n                          {renderFieldItem(fieldType, FIELDS_MAP[fieldType]?.label)}\n                        </Dropdown.Item>\n                      )\n                  )}\n                </Fragment>\n              ) : null\n            )}\n          </Dropdown.Menu>\n        </Dropdown>\n        {/* relation */}\n        {relation && (\n          <Dropdown onSelect={handleRelationChange}>\n            <Dropdown.Toggle className=\"form-select\">{relation}</Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div className=\"d-flex\">\n                <div\n                  className={['flex-grow-1']\n                    .concat(showRelationModifiers ? ['border-end pe-1'] : [])\n                    .join(' ')}\n                >\n                  {showRelationModifiers && <Dropdown.Header>Relations</Dropdown.Header>}\n                  {RELATIONS.map((relation) => (\n                    <Dropdown.Item\n                      key={relation.id}\n                      eventKey={relation.id}\n                      active={relation.id === index}\n                    >\n                      {relation.label}\n                    </Dropdown.Item>\n                  ))}\n                </div>\n                <div\n                  className={['text-nowrap']\n                    .concat(showRelationModifiers ? ['ps-1'] : [])\n                    .join(' ')}\n                >\n                  {showRelationModifiers && (\n                    <>\n                      <Dropdown.Header>Modifiers</Dropdown.Header>\n                      <Dropdown.ItemText key=\"lang\">\n                        <Form.Check\n                          id=\"lang\"\n                          name=\"lang\"\n                          label=\"Language\"\n                          type=\"checkbox\"\n                          checked={relationModifiers.includes('lang')}\n                          onChange={() => handleToggleRelationModifier('lang')}\n                        />\n                        {relationModifiers.includes('lang') &&\n                          renderRelationModifierLanguageInput()}\n                      </Dropdown.ItemText>\n                      {RELATION_MODIFIERS.filter((relMod) => relMod.id !== 'lang').map((relMod) => (\n                        <Dropdown.ItemText key={relMod.id}>\n                          <Form.Check\n                            id={relMod.id}\n                            name={relMod.id}\n                            label={relMod.label}\n                            type=\"checkbox\"\n                            checked={relationModifiers.includes(relMod.id)}\n                            onChange={() =>\n                              handleToggleRelationModifier(\n                                relMod.id as unknown as RelationModifiersType\n                              )\n                            }\n                          />\n                        </Dropdown.ItemText>\n                      ))}\n                    </>\n                  )}\n                </div>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        )}\n        {/* search term */}\n        {renderSearchTermInput()}\n      </div>\n      {shouldShowRemoveButton && (\n        <RemoveButton\n          className=\"del-within-clause-btn position-absolute top-0 start-100 translate-middle\"\n          onClick={onDelete}\n        />\n      )}\n    </div>\n  )\n}\n\n// --------------------------------------------------------------------------\n","import { useEffect, useMemo, useState } from 'react'\nimport Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Modal from 'react-bootstrap/Modal'\nimport Row from 'react-bootstrap/Row'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport { Trans, useTranslation } from 'react-i18next'\n\nimport ContentEditable from '@/components/ContentEditable'\nimport useDebounce from '@/hooks/useDebounce'\nimport useDebouncedState from '@/hooks/useDebouncedState'\nimport { type Resource } from '@/utils/api'\nimport { type QueryTypeIDForQueryBuilder } from '@/utils/constants'\nimport { flattenResources } from '@/utils/resources'\nimport {\n  FCSQueryBuilder,\n  getLayersUsedInQuery,\n  getResourcesLayerSupportInfo,\n  parseQuery as parseFCSQuery,\n} from './fcs'\nimport { LexCQLQueryBuilder, parseQuery as parseLexCQLQuery } from './lex'\nimport { getFieldsUsedInQuery, getResourcesFieldSupportInfo } from './lex/utils'\n\nimport highlightsIcon from 'bootstrap-icons/icons/highlights.svg?raw'\n\nimport './styles.css'\n\n// --------------------------------------------------------------------------\n// types\n\ninterface QueryBuilderModalProps {\n  show: boolean\n  query?: string\n  queryType: QueryTypeIDForQueryBuilder\n  resources?: Resource[]\n  selectedResources?: string[]\n  delay?: number\n  onModalClose: (result: { query: string; validResources: string[]; action: string }) => void\n}\n\n// --------------------------------------------------------------------------\n// component\n\nfunction QueryBuilderModal({\n  show,\n  query: queryProp,\n  queryType,\n  resources,\n  selectedResources,\n  delay = 1000,\n  onModalClose,\n}: QueryBuilderModalProps) {\n  const { t } = useTranslation('querybuilder')\n\n  // query input\n  const [query, setQuery] = useState(queryProp ?? '')\n  const [cursorPos, setCursorPos] = useState<[number, number] | number | null>(null)\n  useEffect(() => {\n    setQuery(queryProp ?? '')\n    setCursorPos(null)\n  }, [queryProp])\n\n  const queryDebounced = useDebounce(query, delay)\n  // query input syntax highlighting\n  const [queryInputEnhanced, setQueryInputEnhanced] = useState(false)\n  // query input validation\n  const [queryError, setQueryError, setQueryErrorImmediate] = useDebouncedState<string | null>(\n    null,\n    delay\n  )\n\n  // flatten nested list to allow fuzzy search everywhere\n  const flattenedResources = flattenResources(resources ?? [])\n\n  const resourcesValidForQueryType = flattenedResources\n    // if fcs then filter what is valid there\n    .filter((resource) =>\n      queryType === 'fcs'\n        ? resource.availableLayers !== null && resource.availableLayers.length > 0\n        : true\n    )\n    // if lex then filter what is valid there\n    .filter((resource) =>\n      queryType === 'lex'\n        ? resource.availableLexFields !== null && resource.availableLexFields.length > 0\n        : true\n    )\n\n  const resourcesForQueryBuilder = selectedResources // && selectedResources.length > 0\n    ? resourcesValidForQueryType.filter((resource) => selectedResources.includes(resource.id))\n    : resourcesValidForQueryType\n\n  // --------------------------------------------------------------\n  // query syntax error handling\n\n  // queryType conditional parsing\n  const parsed = useMemo(() => {\n    console.debug('parse query for input validation', { query, queryType })\n    if (queryType === 'fcs') {\n      return parseFCSQuery(query)\n    }\n    if (queryType === 'lex') {\n      return parseLexCQLQuery(query)\n    }\n    console.warn('Unexpected queryType, so will not parse query!', queryType)\n    return null\n  }, [query, queryType])\n\n  // NOTE: do not wrap in `useEffect` as it causes flickering and hinders debouncing\n  if (parsed) {\n    if (parsed.errors.length > 0 && queryError !== parsed.errors[0]) {\n      setQueryError(parsed.errors[0])\n    }\n  }\n  if (!parsed || parsed.errors.length === 0) {\n    if (queryError !== null) {\n      setQueryErrorImmediate(null)\n    }\n  }\n\n  // --------------------------------------------------------------\n\n  const [queryTypeAvailableResources, setQueryTypeAvailableResources] = useState<number>(0)\n  const [unavailableResources, setUnavailableResources] = useState<number>(0)\n  const [unavailableResourcesByValue, setUnavailableResourcesByValue] = useState<\n    Map<string, Resource[]> | undefined\n  >(undefined)\n\n  // conditional update with custom equality check since objects ...\n  if (resources && parsed) {\n    if (queryType === 'fcs') {\n      if (queryTypeAvailableResources !== resourcesForQueryBuilder.length) {\n        setQueryTypeAvailableResources(resourcesForQueryBuilder.length)\n      }\n\n      const layersUsedInQuery = getLayersUsedInQuery(parsed?.tree)\n      const resourcesWithMissingLayers = getResourcesLayerSupportInfo(\n        resourcesForQueryBuilder,\n        layersUsedInQuery\n      )\n\n      const newUnavailable = resourcesWithMissingLayers.unsupported.length\n      if (newUnavailable !== unavailableResources) {\n        setUnavailableResources(newUnavailable)\n      }\n      const newLayers = [...resourcesWithMissingLayers.unsupportedByLayer.keys()]\n      const oldLayers = unavailableResourcesByValue ? [...unavailableResourcesByValue.keys()] : []\n      if (\n        newLayers.length !== oldLayers.length ||\n        !newLayers.every((layer) => oldLayers.includes(layer))\n      ) {\n        setUnavailableResourcesByValue(resourcesWithMissingLayers.unsupportedByLayer)\n      }\n    } else if (queryType === 'lex') {\n      if (queryTypeAvailableResources !== resourcesForQueryBuilder.length) {\n        setQueryTypeAvailableResources(resourcesForQueryBuilder.length)\n      }\n\n      const fieldsUsedInQuery = getFieldsUsedInQuery(parsed?.tree)\n      const resourcesWithMissingFields = getResourcesFieldSupportInfo(\n        resourcesForQueryBuilder,\n        fieldsUsedInQuery\n      )\n\n      const newUnavailable = resourcesWithMissingFields.unsupported.length\n      if (newUnavailable !== unavailableResources) {\n        setUnavailableResources(newUnavailable)\n      }\n      const newFields = [...resourcesWithMissingFields.unsupportedByField.keys()]\n      const oldFields = unavailableResourcesByValue ? [...unavailableResourcesByValue.keys()] : []\n      if (\n        newFields.length !== oldFields.length ||\n        !newFields.every((layer) => oldFields.includes(layer))\n      ) {\n        setUnavailableResourcesByValue(resourcesWithMissingFields.unsupportedByField)\n      }\n    }\n  }\n  if (!parsed) {\n    if (unavailableResources !== 0) {\n      setQueryTypeAvailableResources(resources?.length ?? 0)\n      setUnavailableResources(0)\n      setUnavailableResourcesByValue(undefined)\n    }\n  }\n\n  // --------------------------------------------------------------\n  // event handlers\n\n  function handleClose(action: string) {\n    const unavailableResourceIDs =\n      unavailableResourcesByValue !== undefined\n        ? Array.from(unavailableResourcesByValue.values())\n            .flat()\n            .map((resource) => resource.id)\n        : []\n    const validResources = resourcesForQueryBuilder\n      // if we have a parsed query and know what is invalid, filter out what should not be available\n      .filter((resource) => !unavailableResourceIDs.includes(resource.id))\n      .map((resource) => resource.id)\n    onModalClose({ query: query, validResources: validResources, action: action })\n  }\n\n  function handleQueryInputChange(query: string) {\n    setQuery(query)\n  }\n\n  function handleQueryInputCursorChange(\n    event:\n      | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n      | React.KeyboardEvent<HTMLInputElement>\n      | React.MouseEvent<HTMLInputElement>\n  ) {\n    if ((event.target as HTMLElement).nodeName === 'INPUT') {\n      const start = (event.target as HTMLInputElement).selectionStart\n      const end = (event.target as HTMLInputElement).selectionEnd\n      if (start !== null && end !== null && start !== end) {\n        setCursorPos([start, end])\n      } else {\n        setCursorPos(start)\n      }\n    }\n  }\n\n  function handleQueryBuilderQueryChange(query: string) {\n    setQuery(query)\n  }\n\n  // --------------------------------------------------------------\n  // rendering\n\n  // fcs\n  const [enableWithin, setEnableWithin] = useState(false)\n  const [enableWrapGroup, setEnableWrapGroup] = useState(false)\n  const [enableWrapNegation, setEnableWrapNegation] = useState(false)\n  const [enableImplicitQuery, setEnableImplicitQuery] = useState(true)\n  const [enableMultipleQuerySegments, setEnableMultipleQuerySegments] = useState(true)\n  const [enableQuantifiers, setEnableQuantifiers] = useState(true)\n  const [enableRegexpFlags, setEnableRegexpFlags] = useState(false)\n  const [showBasicLayer, setShowBasicLayer] = useState(true)\n  const [showAllAdvancedLayers, setShowAllAdvancedLayers] = useState(false)\n  const [showCustomLayers, setShowCustomLayers] = useState(true)\n  const [showLayerQualifiers, setShowLayerQualifiers] = useState(true)\n  const [showResourceCountForLayer, setShowResourceCountForLayer] = useState(true)\n  // lexcql\n  const [forceSearchTermQuoting, setForceSearchTermQuoting] = useState(false)\n  const [enableRelationModifiers, setEnableRelationModifiers] = useState(true)\n  const [showAllFields, setShowAllFields] = useState(false)\n  const [showResourceCountForField, setShowResourceCountForField] = useState(true)\n\n  function renderFCSQueryBuilderOptions() {\n    return (\n      <Form className=\"my-2 p-2 border rounded\" style={{ textIndent: '3.6rem hanging' }}>\n        <Form.Text className=\"me-3\" style={{ verticalAlign: 'text-bottom' }}>\n          Enable\n        </Form.Text>\n        {/* query structures */}\n        <Form.Check\n          inline\n          label=\"Within\"\n          type=\"checkbox\"\n          name=\"enableWithin\"\n          id=\"enableWithin\"\n          checked={enableWithin}\n          onChange={() => setEnableWithin((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Expression Grouping\"\n          type=\"checkbox\"\n          name=\"enableWrapGroup\"\n          id=\"enableWrapGroup\"\n          checked={enableWrapGroup}\n          onChange={() => setEnableWrapGroup((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Expression Negation\"\n          type=\"checkbox\"\n          name=\"enableWrapNegation\"\n          id=\"enableWrapNegation\"\n          checked={enableWrapNegation}\n          onChange={() => setEnableWrapNegation((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Implicit Query\"\n          type=\"checkbox\"\n          name=\"enableImplicitQuery\"\n          id=\"enableImplicitQuery\"\n          checked={enableImplicitQuery}\n          onChange={() => setEnableImplicitQuery((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Multiple Query Segments\"\n          type=\"checkbox\"\n          name=\"enableMultipleQuerySegments\"\n          id=\"enableMultipleQuerySegments\"\n          checked={enableMultipleQuerySegments}\n          onChange={() => setEnableMultipleQuerySegments((checked) => !checked)}\n          disabled\n        />\n        {/* inputs */}\n        <Form.Check\n          inline\n          label=\"Quantifiers\"\n          type=\"checkbox\"\n          name=\"enableQuantifiers\"\n          id=\"enableQuantifiers\"\n          checked={enableQuantifiers}\n          onChange={() => setEnableQuantifiers((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Regex Flags\"\n          type=\"checkbox\"\n          name=\"enableRegexpFlags\"\n          id=\"enableRegexpFlags\"\n          checked={enableRegexpFlags}\n          onChange={() => setEnableRegexpFlags((checked) => !checked)}\n          disabled\n        />\n        {/* layers */}\n        <Form.Check\n          inline\n          label=\"BASIC Layer\"\n          type=\"checkbox\"\n          name=\"showBasicLayer\"\n          id=\"showBasicLayer\"\n          checked={showBasicLayer}\n          onChange={() => setShowBasicLayer((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"All Advanced Layers\"\n          type=\"checkbox\"\n          name=\"showAllAdvancedLayers\"\n          id=\"showAllAdvancedLayers\"\n          checked={showAllAdvancedLayers}\n          onChange={() => setShowAllAdvancedLayers((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Custom Layers\"\n          type=\"checkbox\"\n          name=\"showCustomLayers\"\n          id=\"showCustomLayers\"\n          checked={showCustomLayers}\n          onChange={() => setShowCustomLayers((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Layer Qualifiers\"\n          type=\"checkbox\"\n          name=\"showLayerQualifiers\"\n          id=\"showLayerQualifiers\"\n          checked={showLayerQualifiers}\n          onChange={() => setShowLayerQualifiers((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Resource Count for Layer\"\n          type=\"checkbox\"\n          name=\"showResourceCountForLayer\"\n          id=\"showResourceCountForLayer\"\n          checked={showResourceCountForLayer}\n          onChange={() => setShowResourceCountForLayer((checked) => !checked)}\n        />\n      </Form>\n    )\n  }\n\n  function renderFCSQueryBuilder() {\n    // make conditional on query type\n    return (\n      <>\n        {/* TODO: testing */}\n        {import.meta.env.DEV && renderFCSQueryBuilderOptions()}\n        <FCSQueryBuilder\n          query={queryDebounced}\n          cursorPos={cursorPos ?? undefined}\n          onChange={handleQueryBuilderQueryChange}\n          resources={resourcesForQueryBuilder}\n          // feature flags\n          enableWithin={enableWithin}\n          enableWrapGroup={enableWrapGroup}\n          enableWrapNegation={enableWrapNegation}\n          enableImplicitQuery={enableImplicitQuery}\n          enableMultipleQuerySegments={enableMultipleQuerySegments}\n          enableQuantifiers={enableQuantifiers}\n          enableRegexpFlags={enableRegexpFlags}\n          showBasicLayer={showBasicLayer}\n          showAllAdvancedLayers={showAllAdvancedLayers}\n          showCustomLayers={showCustomLayers}\n          showLayerQualifiers={showLayerQualifiers}\n          showResourceCountForLayer={showResourceCountForLayer}\n        />\n      </>\n    )\n  }\n\n  function renderLexCQLQueryBuilderOptions() {\n    return (\n      <Form className=\"my-2 p-2 border rounded\" style={{ textIndent: '3.6rem hanging' }}>\n        <Form.Text className=\"me-3\" style={{ verticalAlign: 'text-bottom' }}>\n          Enable\n        </Form.Text>\n        <Form.Check\n          inline\n          label=\"Forced Search Term Quoting\"\n          type=\"checkbox\"\n          name=\"forceSearchTermQuoting\"\n          id=\"forceSearchTermQuoting\"\n          checked={forceSearchTermQuoting}\n          onChange={() => setForceSearchTermQuoting((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Relation Modifiers\"\n          type=\"checkbox\"\n          name=\"enableRelationModifiers\"\n          id=\"enableRelationModifiers\"\n          checked={enableRelationModifiers}\n          onChange={() => setEnableRelationModifiers((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"All Fields\"\n          type=\"checkbox\"\n          name=\"showAllFields\"\n          id=\"showAllFields\"\n          checked={showAllFields}\n          onChange={() => setShowAllFields((checked) => !checked)}\n        />\n        <Form.Check\n          inline\n          label=\"Resource Count for Field\"\n          type=\"checkbox\"\n          name=\"showResourceCountForField\"\n          id=\"showResourceCountForField\"\n          checked={showResourceCountForField}\n          onChange={() => setShowResourceCountForField((checked) => !checked)}\n        />\n      </Form>\n    )\n  }\n\n  function renderLexCQLQueryBuilder() {\n    return (\n      <>\n        {/* TODO: testing */}\n        {import.meta.env.DEV && renderLexCQLQueryBuilderOptions()}\n        <LexCQLQueryBuilder\n          query={queryDebounced}\n          cursorPos={cursorPos ?? undefined}\n          onChange={handleQueryBuilderQueryChange}\n          resources={resourcesForQueryBuilder}\n          // feature flags\n          enableRelationModifiers={enableRelationModifiers}\n          forceSearchTermQuoting={forceSearchTermQuoting}\n          showAllFields={showAllFields}\n          showResourceCountForField={showResourceCountForField}\n        />\n      </>\n    )\n  }\n\n  function renderQueryBuilder() {\n    if (queryType === 'fcs') {\n      return renderFCSQueryBuilder()\n    }\n    if (queryType === 'lex') {\n      return renderLexCQLQueryBuilder()\n    }\n    return null\n  }\n\n  return (\n    <Modal\n      id=\"query-builder-modal\"\n      show={show}\n      onHide={() => handleClose('close')}\n      // size=\"xl\"\n      // fullscreen=\"xl-down\"\n      fullscreen={true}\n      centered\n    >\n      <Modal.Header className=\"py-2\" closeButton>\n        <Modal.Title>{t('title')}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"px-0\">\n        {/* resource viewing options */}\n        <Form className=\"px-1 pb-3 border-bottom\" onSubmit={(event) => event.preventDefault()}>\n          <Container>\n            <Row className=\"d-sm-flex row-gap-2 justify-content-around\">\n              <Col>\n                <InputGroup hasValidation>\n                  {/* TODO: dynamic placeholders based on query type? */}\n                  {/* @ts-expect-error: typing does not work for onChange handler, is correct so */}\n                  <Form.Control\n                    placeholder={t('queryInputPlaceholder')}\n                    aria-label={t('queryInputAriaLabel')}\n                    className=\"text-center query-builder-input\"\n                    value={query}\n                    isInvalid={!!queryError}\n                    // remove cursor highlight if not in focus anymore\n                    onBlur={() => setCursorPos(null)}\n                    {...(queryInputEnhanced\n                      ? {\n                          as: ContentEditable,\n                          queryType: queryType,\n                          onChange: handleQueryInputChange,\n                          onCursorChange: (start: number | null, end?: number) => {\n                            if (start !== end && start !== null && end !== undefined) {\n                              setCursorPos([start, end])\n                            } else {\n                              setCursorPos(start)\n                            }\n                          },\n                        }\n                      : {\n                          onChange: (event) => {\n                            handleQueryInputChange(event.target.value)\n                            handleQueryInputCursorChange(event)\n                          },\n                          onKeyUp: handleQueryInputCursorChange,\n                          onClick: handleQueryInputCursorChange,\n                        })}\n                  />\n                  <ToggleButton\n                    id=\"fcs-query-builder-input-enhanced-button\"\n                    value=\"enhance-query\" // just a dummy value\n                    type=\"checkbox\"\n                    checked={queryInputEnhanced}\n                    onChange={() => setQueryInputEnhanced((isChecked) => !isChecked)}\n                    variant=\"outline-secondary\"\n                    aria-label={t('search.searchInput.buttonEnhanceQueryAriaLabel', {\n                      ns: 'app',\n                      context: queryInputEnhanced ? 'enabled' : 'disabled',\n                    })}\n                    className=\"d-flex align-items-center\"\n                  >\n                    <i dangerouslySetInnerHTML={{ __html: highlightsIcon }} aria-hidden=\"true\" />\n                  </ToggleButton>\n                  <Form.Control.Feedback type=\"invalid\">{queryError}</Form.Control.Feedback>\n                </InputGroup>\n              </Col>\n            </Row>\n          </Container>\n        </Form>\n        {/* resource warning message */}\n        {unavailableResources > 0 && (\n          <Container className=\"px-3\">\n            <Alert variant=\"warning\" className=\"mb-0 mt-3\" dismissible>\n              {t('msgResourcesUnavailable', {\n                count: unavailableResources,\n                total: queryTypeAvailableResources,\n                context: queryTypeAvailableResources === unavailableResources ? 'nothing' : null,\n              })}\n              {unavailableResourcesByValue && (\n                <ul className=\"mb-0\">\n                  {[...unavailableResourcesByValue.keys()].map((name) => (\n                    <li key={name}>\n                      <Trans\n                        i18nKey=\"msgNumUnsupportedResources\"\n                        count={unavailableResourcesByValue.get(name)?.length}\n                        values={{ name }}\n                        ns=\"querybuilder\"\n                      />\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </Alert>\n          </Container>\n        )}\n        {/* query builder */}\n        <Container className=\"px-3 pt-3\">{renderQueryBuilder()}</Container>\n      </Modal.Body>\n      <Modal.Footer className=\"py-2\">\n        <Button variant=\"secondary\" onClick={() => handleClose('abort')}>\n          {t('buttonCancel')}\n        </Button>\n        <Button variant=\"primary\" onClick={() => handleClose('confirm')}>\n          {t('buttonUseQueryAndClose')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default QueryBuilderModal\n","import QueryBuilderModal from './QueryBuilderModal'\n\nexport default QueryBuilderModal\n\n// --------------------------------------------------------------------------\n\nimport { i18n } from '@/i18n'\n\ni18n.loadNamespaces('querybuilder')\n"],"names":["useDebouncedState","initialValue","delay","value","setValue","useState","timeoutId","useRef","setValueDebounced","useCallback","FCSParser","Parser","predicate","message","FailedPredicateException","input","ParserATNSimulator","PredictionContextCache","localContext","QueryContext","_la","re","RecognitionException","Main_queryContext","Query_disjunctionContext","Query_sequenceContext","NoViableAltException","Query_groupContext","Query_simpleContext","QuantifierContext","Query_implicitContext","Query_segmentContext","Within_partContext","Within_part_simpleContext","ExpressionContext","Expression_orContext","alternative","ATN","Expression_andContext","Expression_groupContext","Expression_notContext","Expression_basicContext","AttributeContext","QualifierContext","IdentifierContext","RegexpContext","Regexp_patternContext","Regexp_flagContext","ATNDeserializer","Vocabulary","ds","index","DFA","ParserRuleContext","parent","invokingState","listener","visitor","i","QuerySyntaxErrorListener","BaseErrorListener","_recognizer","_offendingSymbol","_line","charPositionInLine","msg","_e","isCursorOnContext","ctx","cursorPos","cursorStart","cursorEnd","ctxStart","ctxEnd","ADVANCED_LAYERS","ADVANCED_LAYERS_MAP","item","LAYER_VALUE_OPTIONS","LAYER_VALUE_OPTIONS_MAP","EXPRESSION_OPERATORS","EXPRESSION_OPERATORS_MAP","DEFAULT_NEW_QUANTIFIER","DEFAULT_NEW_EXPRESSION","WITHIN_CHOICES","QUANTIFIER_CHOICES","QUANTIFIER_CHOICES_MAP","NEW_QUERY_SEGMENTS","NEW_QUERY_SEGMENTS_MAP","NEW_EXPRESSIONS","NEW_EXPRESSIONS_MAP","CHANGE_TO_EXPRESSION_LIST","CHANGE_TO_EXPRESSION_LIST_MAP","WRAP_EXPRESSION","WRAP_EXPRESSION_MAP","FCSParserLexerContext","createContext","FCSParserLexerProvider","parser","lexer","children","data","useFCSParserLexer","useContext","FCSQueryBuilderConfigContext","FCSQueryBuilderConfigProvider","enableWithin","enableWrapGroup","enableWrapNegation","enableImplicitQuery","enableMultipleQuerySegments","enableQuantifiers","enableRegexpFlags","showBasicLayer","showAllAdvancedLayers","showCustomLayers","showLayerQualifiers","showResourceCountForLayer","useFCSQueryBuilderConfig","FCSQueryUpdaterContext","FCSQueryUpdaterProvider","rewriter","useFCSQueryUpdater","FCSResourceLayerInfoContext","FCSResourceLayerInfoProvider","resources","layerInfo","useFCSResourceLayerInfo","FCSLexer","Lexer","LexerATNSimulator","FCSParserVisitor","AbstractParseTreeVisitor","parseQuery","inputStream","CharStream","tokenStream","CommonTokenStream","TokenStreamRewriter","errorListener","CollectLayersVisitor","getLayersUsedInQuery","layerCollector","usedLayers","getResourcesLayerSupportInfo","layers","layersRequired","layer","layersInQuery","resourcesWithLayer","resource","notAvailableLayers","layerId","qualifierId","validResources","invalidResources","invalidResourcesByLayer","map","REGEXP_ESCAPES","REGEXP_ESCAPES_ESCAPED","REGEXP_CONTAINS_REGEXP","REGEXP_UNESCAPED_QUOTE","REGEXP_ESCAPED_QUOTE","escapeRegexValue","escaped","unescapeRegexValue","unescaped","checkIfContainsRegex","escapeQuotes","unescapeQuotes","FCSQueryBuilder","queryProp","resourcesProp","onChange","props","query","setQuery","useEffect","useMemo","filtered","dataview","resourcesDiff","layerTypeToID","layerType","layerIDs","qualifier","parsed","handleQueryChange","newQuery","handleAddQuery","type","text","jsx","Query","AddQuerySegmentButton","flattenQueryChildren","strict","childCtx","removeExpressionChild","parentCtx","childIdx","nextCtx","prevCtx","parentParentCtx","otherSiblingCtx","onClick","handleAddSelection","eventKey","Fragment","jsxs","Dropdown","plusCircleIcon","AddExpressionButton","allowedIds","ChangeToExpressionListButton","className","WrapExpressionButton","handleWrapSelection","bracesIcon","RemoveButton","Button","xCircleIcon","AddQuantifierButton","repeatIcon","tree","queryCtx","queryChildCtx","queryChildrenCtx","withinCtx","withinValue","within","setWithin","handleAddWithinClause","newWithin","tokenIndex","handleWithinChange","event","withinPartCtx","token","handleDeleteWithinClause","QuerySequence","Form","handleAddFirst","handleAddAfterQuery","QuerySimple","ImplicitQueryInput","valueProp","BasicExpressionInput","showChangeToExpressionListButton","isCursorOnMe","basicLayer","advancedLayers","standardLayers","customLayers","hasBasicLayer","hasAdvancedLayers","hasCustomLayers","attributeCtx","operatorNode","regexpNode","setLayer","operator","setOperator","oldOperatorRef","identifierCtx","qualifierCtx","newLayer","isOpEq","valueUnquoted","processedInput","getInputParsed","newOperator","newValue","unescapeValue","option","allowedWrapIds","id","layerValueInputInfo","startsWithAnything","endsWithAnything","valueWithoutAnythingMatcher","escapeValue","handleLayerChange","handleOperatorChange","oldOperator","opSybmol","newOpInfo","oldOpInfo","handleRegexpChange","escapedValue","opInfo","handleChangeToExpressionList","isBefore","change","handleWrap","handleRemove","renderLayerItem","description","renderLayerResourceCount","countLayer","countQualifier","count","renderLayerQualifiers","qualifiers","renderRegexpInput","layerData","QuantifierInput","isZeroOrMore","isOneOrMore","isZeroOrOne","isRange","numChildren","hasCommaRange","nodeN","nodeM","valueN","valueM","valueSelection","quantifierSelection","setQuantifierSelection","quantifierN","setQuantifierN","quantifierM","setQuantifierM","isInvalidRange","handleQuantifierSelectionChange","newQuantifierSelection","handleQuantifierNChange","handleQuantifierMChange","queryImplicitCtx","querySegmentCtx","quantifierCtx","isImplicit","handleAddQuantifier","renderQuery","handleValueChange","valueQuoted","expressionCtx","handleAddExpressionList","Expression","ExpressionWrap","ExpressionList","isNegation","isGroup","innerCtx","isAndExpression","isOrExpression","newExpressionOp","textMaybeWrapped","handleAddAfterExpression","renderChild","_","LexParser","Boolean_queryContext","SubqueryContext","Search_clauseContext","Search_termContext","IndexContext","Relation_modifiedContext","RelationContext","Relation_nameContext","Relation_symbolContext","Boolean_modifiedContext","R_booleanContext","Modifier_listContext","ModifierContext","Modifier_nameContext","Modifier_relationContext","Modifier_valueContext","Prefix_nameContext","PrefixContext","Simple_nameContext","FIELDS","FIELDS_MAP","FIELD_GROUPS","RELATIONS","RELATION_MODIFIERS","RELATION_MODIFIERS_MUTUALLY_EXCLUSIVE","BOOLEANS","DEFAULT_NEW_RELATION","DEFAULT_NEW_SEARCHCLAUSE","DEFAULT_NEW_BOOLEAN","NEW_SEARCH_CLAUSE_CHOICES","NEW_SEARCH_CLAUSE_CHOICES_MAP","LexCQLParserLexerContext","LexCQLParserLexerProvider","useLexCQLParserLexer","LexCQLQueryBuilderConfigContext","LexCQLQueryBuilderConfigProvider","enableRelationModifiers","forceSearchTermQuoting","showAllFields","showResourceCountForField","useLexCQLQueryBuilderConfig","LexCQLQueryUpdaterContext","LexCQLQueryUpdaterProvider","useLexCQLQueryUpdater","LexCQLResourceFieldInfoContext","LexCQLResourceFieldInfoProvider","fieldInfo","useLexCQLResourceFieldInfo","LexLexer","LexParserVisitor","CollectFieldsVisitor","getFieldsUsedInQuery","fieldCollector","usedFields","getResourcesFieldSupportInfo","fields","resourcesWithField","notAvailableFields","field","lexField","invalidResourcesByField","REGEXP_REQUIRE_QUOTING","REGEXP_ESCAPE_QUOTING","REGEXP_UNESCAPED_QUOTING","maybeUnquoteSearchTerm","unquoted","maybeQuoteSearchTerm","forceQuotes","LexCQLQueryBuilder","fieldTypes","fieldType","handleAddSearchClauseClick","AddSearchClauseButton","booleanQueryCtx","BooleanQuerySequence","hasMultipleChildren","handleDelete","subqueryCtx","booleanModifiedCtx","handleAddSearchClauseBefore","handleAddSearchClauseAfter","SubQuery","Boolean","onDelete","searchClauseCtx","hasBooleanQuery","hasSearchClause","shouldShowRemoveButton","SearchClause","handleSelect","newBoolean","boolean","extractRelationModifierIDsFromQuery","relationModifiedCtx","modifierListCtxNames","modifierCtx","relMod","modifier","getRelationModifierByName","name","extractRelationModifierLangValueFromQuery","modifierLangCtx","modifierValueCtx","quotedValue","simpleValue","newLanguageValue","foundFields","indexCtx","searchTermCtx","setIndex","relation","setRelation","relationModifiers","setRelationModifiers","relationModifierLang","setRelationModifierLang","searchTerm","setSearchTerm","newIndex","newRelation","quotedSearchTerm","simpleSearchTerm","newSearchTerm","showRelationModifiers","updateRelationModifiersList","modifiers","modifierToToggle","modifierToToggleLc","v","oldModifier","modifierExclusions","modifierExclusionsLc","modifiersToRemove","modifierExclusion","updateRelationModifierQuery","tokenIndexEnd","modifierListCtx","relationModifiersLc","relationModifiersCtxNames","changed","modifierName","newModifier","handleIndexChange","handleRelationChange","relationCtx","relationModifiersCtx","handleSearchTermChange","handleRelationModifierLanguageChange","newRelationModifierLanguage","handleToggleRelationModifier","newRelationModifiers","renderSearchTermInput","renderRelationModifierLanguageInput","isInvalid","InputGroup","renderFieldItem","renderFieldResourceCount","group","QueryBuilderModal","show","queryType","selectedResources","onModalClose","t","useTranslation","setCursorPos","queryDebounced","useDebounce","queryInputEnhanced","setQueryInputEnhanced","queryError","setQueryError","setQueryErrorImmediate","resourcesValidForQueryType","flattenResources","resourcesForQueryBuilder","parseFCSQuery","parseLexCQLQuery","queryTypeAvailableResources","setQueryTypeAvailableResources","unavailableResources","setUnavailableResources","unavailableResourcesByValue","setUnavailableResourcesByValue","layersUsedInQuery","resourcesWithMissingLayers","newUnavailable","newLayers","oldLayers","fieldsUsedInQuery","resourcesWithMissingFields","newFields","oldFields","handleClose","action","unavailableResourceIDs","handleQueryInputChange","handleQueryInputCursorChange","start","end","handleQueryBuilderQueryChange","setEnableWithin","setEnableWrapGroup","setEnableWrapNegation","setEnableImplicitQuery","setEnableMultipleQuerySegments","setEnableQuantifiers","setEnableRegexpFlags","setShowBasicLayer","setShowAllAdvancedLayers","setShowCustomLayers","setShowLayerQualifiers","setShowResourceCountForLayer","setForceSearchTermQuoting","setEnableRelationModifiers","setShowAllFields","setShowResourceCountForField","renderFCSQueryBuilder","renderLexCQLQueryBuilder","renderQueryBuilder","Modal","Container","Row","Col","ContentEditable","ToggleButton","isChecked","highlightsIcon","Alert","Trans","i18n"],"mappings":"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AAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAC9F,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7F,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC9F,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,IAC3F,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC5F,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC9F,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GACzF,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC9F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC7F,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7F,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC9F,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAC9F,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAC1F,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAC5F,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAC1F,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAC9F,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC7F,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAC3F,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3F,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAC9F,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAC5F,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAC9F,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAC7F,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAC7F,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAC5F,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC9F,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC9F,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAC5F,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAC7F,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC7F,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAC7F,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAC5F,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IACzF,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC7F,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAC3F,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IACxF,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAC1F,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAC3F,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAC5F,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAC5F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAC5F,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAC3F,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAC9F,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC9F,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAC1F,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC7F,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAC7F,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAC1F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAC5F,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAC5F,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAC9F,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAC1F,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAC3F,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAC1F,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAC7F,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC9F,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAC5F,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC5F,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAC3F,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAC7F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IACzF,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAC7F,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAC5F,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAC3F,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACzF,IAAK,IAAK,IAAK,IAAK,IAAK,GAAA,EAG3B,OAAe,MACf,WAAkB,MAAY,CAC5B,OAAKR,EAAU,QACbA,EAAU,MAAQ,IAAIsC,GAAA,EAAkB,YAAYtC,EAAU,cAAc,GAGvEA,EAAU,KACnB,CAEA,OAAwB,WAAa,IAAIuC,GACvCvC,EAAU,aACVA,EAAU,cACV,CAAA,CAAC,EAGH,IAAoB,YAAyB,CAC3C,OAAOA,EAAU,UACnB,CAEA,OAAwB,eAAiBA,EAAU,KAAK,gBAAgB,IACtE,CAACwC,EAAmBC,IAAkB,IAAIC,GAAIF,EAAIC,CAAK,CAAA,CAE3D,QAEO,cAA2BE,CAAkB,CAC3C,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,YAAgC,CACrC,OAAO,KAAK,eAAe,EAAGhC,EAAiB,CACjD,CACO,KAAoB,CACzB,OAAO,KAAK,SAASb,EAAU,IAAK,CAAC,CACvC,CACO,QAA8B,CACnC,OAAO,KAAK,SAASA,EAAU,OAAQ,CAAC,CAC1C,CACO,aAAyC,CAC9C,OAAO,KAAK,eAAe,EAAGsB,EAAkB,CAClD,CACA,IAAoB,WAAoB,CACtC,OAAOtB,EAAU,UACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,YACXA,EAAS,WAAW,IAAI,CAE5B,CACgB,SAASA,EAAmC,CACtDA,EAAS,WACXA,EAAS,UAAU,IAAI,CAE3B,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,WACHA,EAAQ,WAAW,IAAI,EAEvBA,EAAQ,cAAc,IAAI,CAErC,CACF,EAEO,MAAMlC,WAA0B8B,CAAkB,CAChD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,cAA2C,CAChD,OAAO,KAAK,eAAe,EAAG3B,EAAmB,CACnD,CACO,aAAyC,CAC9C,OAAO,KAAK,eAAe,EAAGD,EAAkB,CAClD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGF,EAAqB,CACrD,CACO,mBAAqD,CAC1D,OAAO,KAAK,eAAe,EAAGD,EAAwB,CACxD,CACA,IAAoB,WAAoB,CACtC,OAAOd,EAAU,eACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,SAASA,EAAmC,CACtDA,EAAS,gBACXA,EAAS,eAAe,IAAI,CAEhC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,gBACHA,EAAQ,gBAAgB,IAAI,EAE5BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMjC,WAAiC6B,CAAkB,CACvD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CAGO,aAAaG,EAAgE,CAClF,OAAIA,IAAM,OACD,KAAK,gBAAgB9B,EAAmB,EAG1C,KAAK,eAAe8B,EAAG9B,EAAmB,CACnD,CAGO,eAAe8B,EAAoE,CACxF,OAAIA,IAAM,OACD,KAAK,gBAAgBjC,EAAqB,EAG5C,KAAK,eAAeiC,EAAGjC,EAAqB,CACrD,CAGO,YAAYiC,EAA8D,CAC/E,OAAIA,IAAM,OACD,KAAK,gBAAgB/B,EAAkB,EAGzC,KAAK,eAAe+B,EAAG/B,EAAkB,CAClD,CAGO,GAAG+B,EAAkD,CAC1D,OAAIA,IAAM,OACD,KAAK,UAAUhD,EAAU,EAAE,EAE3B,KAAK,SAASA,EAAU,GAAIgD,CAAC,CAExC,CACA,IAAoB,WAAoB,CACtC,OAAOhD,EAAU,sBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,wBACXA,EAAS,uBAAuB,IAAI,CAExC,CACgB,SAASA,EAAmC,CACtDA,EAAS,uBACXA,EAAS,sBAAsB,IAAI,CAEvC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,uBACHA,EAAQ,uBAAuB,IAAI,EAEnCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMhC,WAA8B4B,CAAkB,CACpD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CAGO,aAAaG,EAAgE,CAClF,OAAIA,IAAM,OACD,KAAK,gBAAgB9B,EAAmB,EAG1C,KAAK,eAAe8B,EAAG9B,EAAmB,CACnD,CAGO,YAAY8B,EAA8D,CAC/E,OAAIA,IAAM,OACD,KAAK,gBAAgB/B,EAAkB,EAGzC,KAAK,eAAe+B,EAAG/B,EAAkB,CAClD,CACA,IAAoB,WAAoB,CACtC,OAAOjB,EAAU,mBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,qBACXA,EAAS,oBAAoB,IAAI,CAErC,CACgB,SAASA,EAAmC,CACtDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,oBACHA,EAAQ,oBAAoB,IAAI,EAEhCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAM9B,WAA2B0B,CAAkB,CACjD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,SAAwB,CAC7B,OAAO,KAAK,SAAS7C,EAAU,QAAS,CAAC,CAC3C,CACO,SAAwB,CAC7B,OAAO,KAAK,SAASA,EAAU,QAAS,CAAC,CAC3C,CACO,mBAAqD,CAC1D,OAAO,KAAK,eAAe,EAAGc,EAAwB,CACxD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGC,EAAqB,CACrD,CACO,YAAuC,CAC5C,OAAO,KAAK,eAAe,EAAGI,EAAiB,CACjD,CACA,IAAoB,WAAoB,CACtC,OAAOnB,EAAU,gBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,kBACXA,EAAS,iBAAiB,IAAI,CAElC,CACgB,SAASA,EAAmC,CACtDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,iBACHA,EAAQ,iBAAiB,IAAI,EAE7BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAM7B,WAA4ByB,CAAkB,CAClD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGzB,EAAqB,CACrD,CACO,eAA6C,CAClD,OAAO,KAAK,eAAe,EAAGC,EAAoB,CACpD,CACO,YAAuC,CAC5C,OAAO,KAAK,eAAe,EAAGF,EAAiB,CACjD,CACA,IAAoB,WAAoB,CACtC,OAAOnB,EAAU,iBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,mBACXA,EAAS,kBAAkB,IAAI,CAEnC,CACgB,SAASA,EAAmC,CACtDA,EAAS,kBACXA,EAAS,iBAAiB,IAAI,CAElC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,kBACHA,EAAQ,kBAAkB,IAAI,EAE9BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAM5B,WAA0BwB,CAAkB,CAChD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,eAAqC,CAC1C,OAAO,KAAK,SAAS7C,EAAU,cAAe,CAAC,CACjD,CACO,gBAAsC,CAC3C,OAAO,KAAK,SAASA,EAAU,eAAgB,CAAC,CAClD,CACO,eAAqC,CAC1C,OAAO,KAAK,SAASA,EAAU,cAAe,CAAC,CACjD,CACO,iBAAuC,CAC5C,OAAO,KAAK,SAASA,EAAU,gBAAiB,CAAC,CACnD,CACO,iBAAuC,CAC5C,OAAO,KAAK,SAASA,EAAU,gBAAiB,CAAC,CACnD,CAGO,QAAQgD,EAAkD,CAC/D,OAAIA,IAAM,OACD,KAAK,UAAUhD,EAAU,OAAO,EAEhC,KAAK,SAASA,EAAU,QAASgD,CAAC,CAE7C,CACO,SAA+B,CACpC,OAAO,KAAK,SAAShD,EAAU,QAAS,CAAC,CAC3C,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,eACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,SAASA,EAAmC,CACtDA,EAAS,gBACXA,EAAS,eAAe,IAAI,CAEhC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,gBACHA,EAAQ,gBAAgB,IAAI,EAE5BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAM3B,WAA8BuB,CAAkB,CACpD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,QAAwB,CAC7B,OAAO,KAAK,eAAe,EAAGV,EAAa,CAC7C,CACA,IAAoB,WAAoB,CACtC,OAAOnC,EAAU,mBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,qBACXA,EAAS,oBAAoB,IAAI,CAErC,CACgB,SAASA,EAAmC,CACtDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,oBACHA,EAAQ,oBAAoB,IAAI,EAEhCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAM1B,WAA6BsB,CAAkB,CACnD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,kBAAiC,CACtC,OAAO,KAAK,SAAS7C,EAAU,iBAAkB,CAAC,CACpD,CACO,kBAAiC,CACtC,OAAO,KAAK,SAASA,EAAU,iBAAkB,CAAC,CACpD,CACO,YAAuC,CAC5C,OAAO,KAAK,eAAe,EAAGwB,EAAiB,CACjD,CACA,IAAoB,WAAoB,CACtC,OAAOxB,EAAU,kBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,SAASA,EAAmC,CACtDA,EAAS,mBACXA,EAAS,kBAAkB,IAAI,CAEnC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,mBACHA,EAAQ,mBAAmB,IAAI,EAE/BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMzB,WAA2BqB,CAAkB,CACjD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,oBAAgD,CACrD,OAAO,KAAK,eAAe,EAAGtB,EAAyB,CACzD,CACA,IAAoB,WAAoB,CACtC,OAAOvB,EAAU,gBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,kBACXA,EAAS,iBAAiB,IAAI,CAElC,CACgB,SAASA,EAAmC,CACtDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,iBACHA,EAAQ,iBAAiB,IAAI,EAE7BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMxB,WAAkCoB,CAAkB,CACxD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,qBAAoC,CACzC,OAAO,KAAK,SAAS7C,EAAU,oBAAqB,CAAC,CACvD,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,uBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,yBACXA,EAAS,wBAAwB,IAAI,CAEzC,CACgB,SAASA,EAAmC,CACtDA,EAAS,wBACXA,EAAS,uBAAuB,IAAI,CAExC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,wBACHA,EAAQ,wBAAwB,IAAI,EAEpCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMvB,WAA0BmB,CAAkB,CAChD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,kBAAmD,CACxD,OAAO,KAAK,eAAe,EAAGd,EAAuB,CACvD,CACO,kBAAmD,CACxD,OAAO,KAAK,eAAe,EAAGF,CAAuB,CACvD,CACO,eAA6C,CAClD,OAAO,KAAK,eAAe,EAAGJ,EAAoB,CACpD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGG,EAAqB,CACrD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGE,CAAqB,CACrD,CACA,IAAoB,WAAoB,CACtC,OAAO9B,EAAU,eACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,SAASA,EAAmC,CACtDA,EAAS,gBACXA,EAAS,eAAe,IAAI,CAEhC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,gBACHA,EAAQ,gBAAgB,IAAI,EAE5BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMtB,WAA6BkB,CAAkB,CACnD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CAGO,iBAAiBG,EAAwE,CAC9F,OAAIA,IAAM,OACD,KAAK,gBAAgBjB,EAAuB,EAG9C,KAAK,eAAeiB,EAAGjB,EAAuB,CACvD,CAGO,iBAAiBiB,EAAwE,CAC9F,OAAIA,IAAM,OACD,KAAK,gBAAgBnB,CAAuB,EAG9C,KAAK,eAAemB,EAAGnB,CAAuB,CACvD,CAGO,eAAemB,EAAoE,CACxF,OAAIA,IAAM,OACD,KAAK,gBAAgBpB,EAAqB,EAG5C,KAAK,eAAeoB,EAAGpB,EAAqB,CACrD,CAGO,eAAeoB,EAAoE,CACxF,OAAIA,IAAM,OACD,KAAK,gBAAgBlB,CAAqB,EAG5C,KAAK,eAAekB,EAAGlB,CAAqB,CACrD,CAGO,GAAGkB,EAAkD,CAC1D,OAAIA,IAAM,OACD,KAAK,UAAUhD,EAAU,EAAE,EAE3B,KAAK,SAASA,EAAU,GAAIgD,CAAC,CAExC,CACA,IAAoB,WAAoB,CACtC,OAAOhD,EAAU,kBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,SAASA,EAAmC,CACtDA,EAAS,mBACXA,EAAS,kBAAkB,IAAI,CAEnC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,mBACHA,EAAQ,mBAAmB,IAAI,EAE/BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMnB,WAA8Be,CAAkB,CACpD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CAGO,iBAAiBG,EAAwE,CAC9F,OAAIA,IAAM,OACD,KAAK,gBAAgBjB,EAAuB,EAG9C,KAAK,eAAeiB,EAAGjB,EAAuB,CACvD,CAGO,iBAAiBiB,EAAwE,CAC9F,OAAIA,IAAM,OACD,KAAK,gBAAgBnB,CAAuB,EAG9C,KAAK,eAAemB,EAAGnB,CAAuB,CACvD,CAGO,eAAemB,EAAoE,CACxF,OAAIA,IAAM,OACD,KAAK,gBAAgBlB,CAAqB,EAG5C,KAAK,eAAekB,EAAGlB,CAAqB,CACrD,CAGO,IAAIkB,EAAkD,CAC3D,OAAIA,IAAM,OACD,KAAK,UAAUhD,EAAU,GAAG,EAE5B,KAAK,SAASA,EAAU,IAAKgD,CAAC,CAEzC,CAGO,cAAcA,EAAkE,CACrF,OAAIA,IAAM,OACD,KAAK,gBAAgBvB,EAAoB,EAG3C,KAAK,eAAeuB,EAAGvB,EAAoB,CACpD,CACA,IAAoB,WAAoB,CACtC,OAAOzB,EAAU,mBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,qBACXA,EAAS,oBAAoB,IAAI,CAErC,CACgB,SAASA,EAAmC,CACtDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,oBACHA,EAAQ,oBAAoB,IAAI,EAEhCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMlB,UAAgCc,CAAkB,CACtD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,SAAwB,CAC7B,OAAO,KAAK,SAAS7C,EAAU,QAAS,CAAC,CAC3C,CACO,SAAwB,CAC7B,OAAO,KAAK,SAASA,EAAU,QAAS,CAAC,CAC3C,CACO,kBAAmD,CACxD,OAAO,KAAK,eAAe,EAAG+B,EAAuB,CACvD,CACO,kBAAmD,CACxD,OAAO,KAAK,eAAe,EAAGF,CAAuB,CACvD,CACO,eAA6C,CAClD,OAAO,KAAK,eAAe,EAAGJ,EAAoB,CACpD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGG,EAAqB,CACrD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGE,CAAqB,CACrD,CACA,IAAoB,WAAoB,CACtC,OAAO9B,EAAU,qBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,uBACXA,EAAS,sBAAsB,IAAI,CAEvC,CACgB,SAASA,EAAmC,CACtDA,EAAS,sBACXA,EAAS,qBAAqB,IAAI,CAEtC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,sBACHA,EAAQ,sBAAsB,IAAI,EAElCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMjB,UAA8Ba,CAAkB,CACpD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,KAAoB,CACzB,OAAO,KAAK,SAAS7C,EAAU,IAAK,CAAC,CACvC,CACO,kBAAmD,CACxD,OAAO,KAAK,eAAe,EAAG+B,EAAuB,CACvD,CACO,kBAAmD,CACxD,OAAO,KAAK,eAAe,EAAGF,CAAuB,CACvD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGC,CAAqB,CACrD,CACO,eAA6C,CAClD,OAAO,KAAK,eAAe,EAAGL,EAAoB,CACpD,CACO,gBAA+C,CACpD,OAAO,KAAK,eAAe,EAAGG,EAAqB,CACrD,CACA,IAAoB,WAAoB,CACtC,OAAO5B,EAAU,mBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,qBACXA,EAAS,oBAAoB,IAAI,CAErC,CACgB,SAASA,EAAmC,CACtDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,oBACHA,EAAQ,oBAAoB,IAAI,EAEhCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMhB,WAAgCY,CAAkB,CACtD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,WAA8B,CACnC,OAAO,KAAK,eAAe,EAAGb,EAAgB,CAChD,CACO,QAAwB,CAC7B,OAAO,KAAK,eAAe,EAAGG,EAAa,CAC7C,CACO,aAAmC,CACxC,OAAO,KAAK,SAASnC,EAAU,YAAa,CAAC,CAC/C,CACO,aAAmC,CACxC,OAAO,KAAK,SAASA,EAAU,YAAa,CAAC,CAC/C,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,qBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,uBACXA,EAAS,sBAAsB,IAAI,CAEvC,CACgB,SAASA,EAAmC,CACtDA,EAAS,sBACXA,EAAS,qBAAqB,IAAI,CAEtC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,sBACHA,EAAQ,sBAAsB,IAAI,EAElCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMf,WAAyBW,CAAkB,CAC/C,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,YAAgC,CACrC,OAAO,KAAK,eAAe,EAAGX,EAAiB,CACjD,CACO,WAAqC,CAC1C,OAAO,KAAK,eAAe,EAAGD,EAAgB,CAChD,CACO,OAA6B,CAClC,OAAO,KAAK,SAASjC,EAAU,MAAO,CAAC,CACzC,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,cACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,gBACXA,EAAS,eAAe,IAAI,CAEhC,CACgB,SAASA,EAAmC,CACtDA,EAAS,eACXA,EAAS,cAAc,IAAI,CAE/B,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,eACHA,EAAQ,eAAe,IAAI,EAE3BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMd,WAAyBU,CAAkB,CAC/C,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,YAAkC,CACvC,OAAO,KAAK,SAAS7C,EAAU,WAAY,CAAC,CAC9C,CACO,QAA8B,CACnC,OAAO,KAAK,SAASA,EAAU,OAAQ,CAAC,CAC1C,CACO,qBAA2C,CAChD,OAAO,KAAK,SAASA,EAAU,oBAAqB,CAAC,CACvD,CACO,cAAoC,CACzC,OAAO,KAAK,SAASA,EAAU,aAAc,CAAC,CAChD,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,cACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,gBACXA,EAAS,eAAe,IAAI,CAEhC,CACgB,SAASA,EAAmC,CACtDA,EAAS,eACXA,EAAS,cAAc,IAAI,CAE/B,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,eACHA,EAAQ,eAAe,IAAI,EAE3BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMb,WAA0BS,CAAkB,CAChD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,YAAkC,CACvC,OAAO,KAAK,SAAS7C,EAAU,WAAY,CAAC,CAC9C,CACO,QAA8B,CACnC,OAAO,KAAK,SAASA,EAAU,OAAQ,CAAC,CAC1C,CACO,qBAA2C,CAChD,OAAO,KAAK,SAASA,EAAU,oBAAqB,CAAC,CACvD,CACO,cAAoC,CACzC,OAAO,KAAK,SAASA,EAAU,aAAc,CAAC,CAChD,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,eACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,SAASA,EAAmC,CACtDA,EAAS,gBACXA,EAAS,eAAe,IAAI,CAEhC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,gBACHA,EAAQ,gBAAgB,IAAI,EAE5BA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMZ,WAAsBQ,CAAkB,CAC5C,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,gBAAwC,CAC7C,OAAO,KAAK,eAAe,EAAGT,EAAqB,CACrD,CACO,WAAiC,CACtC,OAAO,KAAK,SAASpC,EAAU,UAAW,CAAC,CAC7C,CACO,aAAyC,CAC9C,OAAO,KAAK,eAAe,EAAGqC,EAAkB,CAClD,CACA,IAAoB,WAAoB,CACtC,OAAOrC,EAAU,WACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,aACXA,EAAS,YAAY,IAAI,CAE7B,CACgB,SAASA,EAAmC,CACtDA,EAAS,YACXA,EAAS,WAAW,IAAI,CAE5B,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,YACHA,EAAQ,YAAY,IAAI,EAExBA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMX,WAA8BO,CAAkB,CACpD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,QAAuB,CAC5B,OAAO,KAAK,SAAS7C,EAAU,OAAQ,CAAC,CAC1C,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,mBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,qBACXA,EAAS,oBAAoB,IAAI,CAErC,CACgB,SAASA,EAAmC,CACtDA,EAAS,oBACXA,EAAS,mBAAmB,IAAI,CAEpC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,oBACHA,EAAQ,oBAAoB,IAAI,EAEhCA,EAAQ,cAAc,IAAI,CAErC,CACF,CAEO,MAAMV,WAA2BM,CAAkB,CACjD,YAAYC,EAAkCC,EAAuB,CAC1E,MAAMD,EAAQC,CAAa,CAC7B,CACO,cAA6B,CAClC,OAAO,KAAK,SAAS7C,EAAU,aAAc,CAAC,CAChD,CACA,IAAoB,WAAoB,CACtC,OAAOA,EAAU,gBACnB,CACgB,UAAU8C,EAAmC,CACvDA,EAAS,kBACXA,EAAS,iBAAiB,IAAI,CAElC,CACgB,SAASA,EAAmC,CACtDA,EAAS,iBACXA,EAAS,gBAAgB,IAAI,CAEjC,CACgB,OAAeC,EAAkD,CAC/E,OAAIA,EAAQ,iBACHA,EAAQ,iBAAiB,IAAI,EAE7BA,EAAQ,cAAc,IAAI,CAErC,CACF,CC1tEO,MAAME,WAAiCC,EAAkB,CACvD,OAAmB,CAAA,EAEV,YACdC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACM,CAEN,KAAK,OAAO,KAAK,iBAAiBD,CAAG,gBAAgBD,CAAkB,EAAE,CAC3E,CACF,CAIO,SAASG,GACdC,EACAC,EACA,CAEA,GADI,CAACD,GACDC,IAAc,OAAW,MAAO,GAEpC,MAAMC,EAAc,MAAM,QAAQD,CAAS,EAAIA,EAAU,CAAC,EAAIA,EACxDE,EAAY,MAAM,QAAQF,CAAS,EAAIA,EAAU,CAAC,EAAIA,EAE5D,GAAID,aAAef,GAAqBe,EAAI,QAAU,MAAQA,EAAI,OAAS,KAAM,CAC/E,MAAMI,EAAWJ,EAAI,MAAM,MACrBK,EAASL,EAAI,KAAK,KAAO,EAQ/B,GALII,EAAWF,GAAeA,EAAcG,GACxCD,EAAWD,GAAaA,EAAYE,GAEpCH,IAAgBC,IAAcC,IAAaD,GAAaA,IAAcE,IAEtEH,GAAeE,GAAYC,GAAUF,EAAW,MAAO,EAC7D,CAEA,MAAO,EACT,CCjBO,MAAMG,GAAkB,CAC7B,CAAE,GAAI,OAAQ,MAAO,wBAAA,EACrB,CAAE,GAAI,QAAS,MAAO,yBAAA,EACtB,CAAE,GAAI,MAAO,MAAO,+BAAA,EACpB,CAAE,GAAI,OAAQ,MAAO,4BAAA,EACrB,CAAE,GAAI,OAAQ,MAAO,4BAAA,EACrB,CAAE,GAAI,WAAY,MAAO,8BAAA,CAC3B,EACaC,GAAsB,OAAO,YACxCD,GAAgB,IAAKE,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CAC/C,EAEaC,GAAsB,CACjC,CACE,GAAI,MACJ,UAAW,CAAC,KAAM,QAAQ,EAC1B,QAAS,CACP,CAAE,MAAO,MAAO,MAAO,WAAA,EACvB,CAAE,MAAO,MAAO,MAAO,QAAA,EACvB,CAAE,MAAO,OAAQ,MAAO,cAAA,EACxB,CAAE,MAAO,OAAQ,MAAO,MAAA,EACxB,CAAE,MAAO,QAAS,MAAO,aAAA,EACzB,CAAE,MAAO,OAAQ,MAAO,MAAA,EACxB,CAAE,MAAO,MAAO,MAAO,YAAA,EACvB,CAAE,MAAO,MAAO,MAAO,WAAA,EACvB,CAAE,MAAO,QAAS,MAAO,0BAAA,EACzB,CAAE,MAAO,MAAO,MAAO,YAAA,EACvB,CAAE,MAAO,MAAO,MAAO,SAAA,EACvB,CAAE,MAAO,OAAQ,MAAO,UAAA,EACxB,CAAE,MAAO,OAAQ,MAAO,SAAA,EACxB,CAAE,MAAO,QAAS,MAAO,2BAAA,EACzB,CAAE,MAAO,QAAS,MAAO,aAAA,EACzB,CAAE,MAAO,MAAO,MAAO,QAAA,EACvB,CAAE,MAAO,IAAK,MAAO,OAAA,CAAQ,CAC/B,CAEJ,EACaC,GAA0B,OAAO,YAC5CD,GAAoB,IAAKD,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CACnD,EAEaG,GAAuB,CAClC,CACE,GAAI,KACJ,MAAO,KACP,SAAU,IACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,EAEV,CACE,GAAI,SACJ,MAAO,SACP,SAAU,KACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,EAEV,CACE,GAAI,WACJ,MAAO,WACP,SAAU,IACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,EAEV,CACE,GAAI,cACJ,MAAO,cACP,SAAU,IACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,EAEV,CACE,GAAI,YACJ,MAAO,YACP,SAAU,IACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,EAEV,CACE,GAAI,QACJ,MAAO,QACP,SAAU,IACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,EAEV,CACE,GAAI,YACJ,MAAO,YACP,SAAU,KACV,WAAY,KACZ,YAAa,KACb,OAAQ,EAAA,CAEZ,EACaC,GAA2B,OAAO,YAC7CD,GAAqB,IAAKH,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CACpD,EAIaK,GAAyB,IACzBC,GAAyB,YAMzBC,GAAiB,CAC5B,WACA,IACA,YACA,IACA,YACA,IACA,OACA,IACA,OACA,SACF,EAEaC,GAAqB,CAChC,CAAE,GAAI,IAAK,MAAO,eAAgB,KAAM,SAAU,IAAK,GAAA,EACvD,CAAE,GAAI,IAAK,MAAO,cAAe,KAAM,SAAU,IAAK,GAAA,EACtD,CAAE,GAAI,IAAK,MAAO,cAAe,KAAM,SAAU,IAAK,GAAA,EACtD,CAAE,GAAI,MAAO,MAAO,YAAa,KAAM,QAAS,IAAK,KAAA,EACrD,CAAE,GAAI,MAAO,MAAO,SAAU,KAAM,QAAS,IAAK,OAAA,EAClD,CAAE,GAAI,KAAM,MAAO,aAAc,KAAM,QAAS,IAAK,MAAA,EACrD,CAAE,GAAI,KAAM,MAAO,YAAa,KAAM,QAAS,IAAK,MAAA,CACtD,EACaC,GAAyB,OAAO,YAC3CD,GAAmB,IAAKR,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CAClD,EAEaU,GAAqB,CAChC,CAAE,GAAI,QAAS,MAAO,eAAgB,IAAK,KAAKJ,EAAsB,IAAA,EACtE,CAAE,GAAI,mBAAoB,MAAO,mBAAoB,IAAK,IAAA,EAC1D,CAAE,GAAI,SAAU,MAAO,eAAgB,IAAK,IAAA,CAC9C,EACaK,GAAyB,OAAO,YAC3CD,GAAmB,IAAKV,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CAClD,EAEaY,GAAkB,CAC7B,CAAE,GAAI,QAAS,MAAO,aAAc,IAAK,GAAGN,EAAsB,EAAA,EAClE,CAAE,GAAI,KAAM,MAAO,KAAM,IAAK,GAAGA,EAAsB,MAAMA,EAAsB,EAAA,EACnF,CAAE,GAAI,MAAO,MAAO,MAAO,IAAK,GAAGA,EAAsB,MAAMA,EAAsB,EAAA,CACvF,EACaO,GAAsB,OAAO,YACxCD,GAAgB,IAAKZ,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CAC/C,EAEac,GAA4B,CACvC,CACE,GAAI,KACJ,MAAO,KACP,UAAW,GAAGR,EAAsB,KACpC,SAAU,KAAKA,EAAsB,EAAA,EAEvC,CACE,GAAI,MACJ,MAAO,MACP,UAAW,GAAGA,EAAsB,KACpC,SAAU,KAAKA,EAAsB,EAAA,CAEzC,EACaS,GAAgC,OAAO,YAClDD,GAA0B,IAAKd,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CACzD,EAEagB,GAAkB,CAC7B,CAAE,GAAI,QAAS,MAAO,QAAS,UAAW,IAAK,SAAU,GAAA,EACzD,CAAE,GAAI,MAAO,MAAO,WAAY,UAAW,IAAK,SAAU,IAAA,CAC5D,EACaC,GAAsB,OAAO,YACxCD,GAAgB,IAAKhB,GAAS,CAACA,EAAK,GAAIA,CAAI,CAAC,CAC/C,EC5MMkB,GAAwBC,EAAAA,cAA0C,MAAS,EACjFD,GAAsB,YAAc,wBAIpC,SAASE,GAAuB,CAC9B,OAAAC,EACA,MAAAC,EACA,UAAA7B,EACA,SAAA8B,CACF,EAAgC,CAC9B,MAAMC,EAAO,CAAE,OAAAH,EAAQ,MAAAC,EAAO,UAAA7B,CAAA,EAC9B,aAAQyB,GAAsB,SAAtB,CAA+B,MAAOM,EAAO,SAAAD,EAAS,CAChE,CAIA,SAASE,IAAoB,CAC3B,MAAMD,EAAOE,EAAAA,WAAWR,EAAqB,EAE7C,GAAI,CAACM,EAAM,MAAM,IAAI,MAAM,mEAAmE,EAE9F,OAAOA,CACT,CCjBA,MAAMG,GAA+BR,EAAAA,cAAiD,MAAS,EAC/FQ,GAA6B,YAAc,+BAI3C,SAASC,GAA8B,CACrC,aAAAC,EAAe,GACf,gBAAAC,EAAkB,GAClB,mBAAAC,EAAqB,GACrB,oBAAAC,EAAsB,GACtB,4BAAAC,EAA8B,GAC9B,kBAAAC,EAAoB,GACpB,kBAAAC,EAAoB,GACpB,eAAAC,EAAiB,GACjB,sBAAAC,EAAwB,GACxB,iBAAAC,EAAmB,GACnB,oBAAAC,EAAsB,GACtB,0BAAAC,EAA4B,GAC5B,SAAAjB,CACF,EAAuC,CACrC,MAAMC,EAAO,CACX,aAAAK,EACA,gBAAAC,EACA,mBAAAC,EACA,oBAAAC,EACA,4BAAAC,EACA,kBAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,sBAAAC,EACA,iBAAAC,EACA,oBAAAC,EACA,0BAAAC,CAAA,EAGF,aACGb,GAA6B,SAA7B,CAAsC,MAAOH,EAC3C,SAAAD,EACH,CAEJ,CAIA,SAASkB,IAA2B,CAClC,MAAMjB,EAAOE,EAAAA,WAAWC,EAA4B,EAGpD,GAAI,CAACH,EAAM,MAAM,IAAI,MAAM,+DAA+D,EAE1F,OAAOA,CACT,CC7DA,MAAMkB,GAAyBvB,EAAAA,cAA2C,MAAS,EACnFuB,GAAuB,YAAc,yBAIrC,SAASC,GAAwB,CAAE,SAAAC,EAAU,SAAArB,GAA0C,CACrF,MAAMC,EAAO,CAAE,SAAAoB,CAAA,EACf,aAAQF,GAAuB,SAAvB,CAAgC,MAAOlB,EAAO,SAAAD,EAAS,CACjE,CAIA,SAASsB,IAAqB,CAC5B,MAAMrB,EAAOE,EAAAA,WAAWgB,EAAsB,EAE9C,GAAI,CAAClB,EAAM,MAAM,IAAI,MAAM,4DAA4D,EAEvF,OAAOA,CACT,CCfA,MAAMsB,GAA8B3B,EAAAA,cAAgD,MAAS,EAC7F2B,GAA4B,YAAc,8BAI1C,SAASC,GAA6B,CACpC,UAAAC,EACA,UAAAC,EACA,SAAA1B,CACF,EAAsC,CACpC,MAAMC,EAAO,CAAE,UAAAwB,EAAW,UAAAC,CAAA,EAC1B,aACGH,GAA4B,SAA5B,CAAqC,MAAOtB,EAC1C,SAAAD,EACH,CAEJ,CAIA,SAAS2B,IAA0B,CACjC,MAAM1B,EAAOE,EAAAA,WAAWoB,EAA2B,EAEnD,GAAI,CAACtB,EACH,MAAM,IAAI,MACR,iFAAA,EAGJ,OAAOA,CACT,CCnCO,MAAM2B,UAAiBC,EAAM,CAClC,OAAuB,QAAU,EACjC,OAAuB,QAAU,EACjC,OAAuB,iBAAmB,EAC1C,OAAuB,iBAAmB,EAC1C,OAAuB,GAAK,EAC5B,OAAuB,IAAM,EAC7B,OAAuB,IAAM,EAC7B,OAAuB,UAAY,EACnC,OAAuB,gBAAkB,EACzC,OAAuB,gBAAkB,GACzC,OAAuB,cAAgB,GACvC,OAAuB,eAAiB,GACxC,OAAuB,cAAgB,GACvC,OAAuB,QAAU,GACjC,OAAuB,YAAc,GACrC,OAAuB,YAAc,GACrC,OAAuB,MAAQ,GAC/B,OAAuB,OAAS,GAChC,OAAuB,oBAAsB,GAC7C,OAAuB,aAAe,GACtC,OAAuB,WAAa,GACpC,OAAuB,QAAU,GACjC,OAAuB,OAAS,GAChC,OAAuB,cAAgB,GACvC,OAAuB,MAAQ,GAE/B,OAAuB,aAAe,CAAC,wBAAyB,QAAQ,EAExE,OAAuB,aAAe,CACpC,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,UAAA,EAGF,OAAuB,cAAgB,CACrC,KACA,UACA,UACA,mBACA,mBACA,KACA,MACA,MACA,YACA,kBACA,kBACA,gBACA,iBACA,gBACA,UACA,cACA,cACA,QACA,SACA,sBACA,eACA,aACA,UACA,SACA,gBACA,OAAA,EAGF,OAAuB,UAAY,CAAC,cAAc,EAElD,OAAuB,UAAY,CACjC,UACA,UACA,mBACA,mBACA,KACA,MACA,MACA,YACA,kBACA,kBACA,gBACA,iBACA,gBACA,UACA,cACA,cACA,QACA,SACA,sBACA,eACA,wBACA,uBACA,kBACA,aACA,UACA,SACA,gBACA,OACA,KACA,eACA,MACA,OAAA,EAGK,YAAYjH,EAAmB,CACpC,MAAMA,CAAK,EACX,KAAK,YAAc,IAAIkH,GACrB,KACAF,EAAS,KACTA,EAAS,eACT,IAAI9G,EAAuB,CAE/B,CAEA,IAAW,iBAA0B,CACnC,MAAO,aACT,CAEA,IAAW,cAAkC,CAC3C,OAAO8G,EAAS,YAClB,CACA,IAAW,eAAmC,CAC5C,OAAOA,EAAS,aAClB,CACA,IAAW,WAAsB,CAC/B,OAAOA,EAAS,SAClB,CAEA,IAAW,eAA0B,CACnC,OAAOA,EAAS,cAClB,CAEA,IAAW,cAAyB,CAClC,OAAOA,EAAS,YAClB,CAEA,IAAW,WAAsB,CAC/B,OAAOA,EAAS,SAClB,CAEA,OAAuB,eAA2B,CAChD,EAAG,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9F,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC9F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC3F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC3F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9F,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC3F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC3F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC3F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC3F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,E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AG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC5F,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC5F,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAC7F,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAC9F,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAC1F,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAC5F,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAC1F,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAC5F,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAC9F,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,EAAG,EAAG,GAC3F,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC5F,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAC9F,IAAK,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAC7F,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC5F,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAC9F,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAC5F,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAC7F,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC7F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAC5F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC7F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAC5F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC5F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAC3F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC5F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC7F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC7F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC7F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAC7F,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAC5F,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC7F,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAC7F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IACxF,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAC9F,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC3F,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAC1F,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAC1F,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAC7F,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAC1F,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAC5F,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAC9F,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAC5F,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAC3F,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAC9F,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAC5F,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC9F,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAC7F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC3F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC3F,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAC1F,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC7F,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,GAAI,GAAI,EAC7F,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IACxF,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAC3F,GAAI,GAAI,EAAG,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,IACzF,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,CAAA,EAG7D,OAAe,MACf,WAAkB,MAAY,CAC5B,OAAKA,EAAS,QACZA,EAAS,MAAQ,IAAI/E,GAAA,EAAkB,YAAY+E,EAAS,cAAc,GAGrEA,EAAS,KAClB,CAEA,OAAwB,WAAa,IAAI9E,GACvC8E,EAAS,aACTA,EAAS,cACT,CAAA,CAAC,EAGH,IAAoB,YAAyB,CAC3C,OAAOA,EAAS,UAClB,CAEA,OAAwB,eAAiBA,EAAS,KAAK,gBAAgB,IACrE,CAAC7E,EAAmBC,IAAkB,IAAIC,GAAIF,EAAIC,CAAK,CAAA,CAE3D,CC/OO,MAAM+E,WAAiCC,EAAiC,CAM7E,WAMA,gBAMA,uBAMA,oBAMA,iBAMA,kBAMA,gBAMA,oBAMA,mBAMA,iBAMA,wBAMA,gBAMA,mBAMA,oBAMA,sBAMA,oBAMA,sBAMA,eAMA,eAMA,gBAMA,YAMA,oBAMA,gBACF,CCpKO,SAASC,GAAWrH,EAAgB,CAEzC,GADI,CAACA,GACD,CAACA,EAAM,KAAA,EAAQ,OAAO,KAG1B,MAAMsH,EAAcC,GAAW,WAAWvH,CAAK,EACzCmF,EAAQ,IAAI6B,EAASM,CAAW,EAChCE,EAAc,IAAIC,GAAkBtC,CAAK,EACzCsB,EAAW,IAAIiB,GAAoBF,CAAW,EAC9CtC,EAAS,IAAIvF,EAAU6H,CAAW,EAElCG,EAAgB,IAAI/E,GAC1B,OAAAuC,EAAM,qBAAA,EACNA,EAAM,iBAAiBwC,CAAa,EACpCzC,EAAO,qBAAA,EACPA,EAAO,iBAAiByC,CAAa,EAY9B,CAAE,KAVIzC,EAAO,MAAA,EAUL,MAAAC,EAAO,OAAAD,EAAQ,SAAAuB,EAAU,OAAQkB,EAAc,MAAA,CAChE,CAIA,MAAMC,WAA6BT,EAAuB,CACjD,OAAmB,CAAA,EAEnB,eAAkB9D,GAA0B,CACjD,KAAK,OAAO,KAAKA,EAAI,QAAA,CAAS,CAChC,CAKF,CAEO,SAASwE,GAAqBxE,EAAgC,CAEnE,MAAMyE,EAAiB,IAAIF,GACvBvE,GACFyE,EAAe,MAAMzE,CAAG,EAG1B,MAAM0E,EAAaD,EAAe,OAGlC,MAAO,CAAC,GAFW,IAAI,IAAIC,CAAU,CAEhB,CACvB,CAQO,SAASC,GACdnB,EACAoB,EACwB,CAGxB,MAAMC,EAAiBD,EACpB,OAAQE,GAAUA,IAAU,MAAM,EAClC,OAAQA,GAAUA,IAAU,MAAM,EAErC,GAAID,EAAe,SAAW,GAAKrB,EAAU,SAAW,EACtD,MAAO,CACL,UAAWA,EACX,YAAa,CAAA,EACb,uBAAwB,GAAwB,EAIpD,MAAMuB,EAAgBF,EAAe,IAAKC,GAAUA,EAAM,MAAM,GAAG,EAAE,YAAY,EAI3EE,EAAqBxB,EAAU,IAAKyB,GAAa,CACrD,MAAMC,EAA+B,CAAA,EAErC,OAAAH,EAAc,QAAQ,CAAC,CAACI,EAASC,CAAW,IAAM,CAC3CA,EAMAH,EAAS,iBAAiB,KACxBH,GAAUA,EAAM,YAAcK,GAAWL,EAAM,YAAcM,CAAA,GAGhEF,EAAmB,KAAK,GAAGE,CAAW,IAAID,CAAO,EAAE,EAThDF,EAAS,iBAAiB,KAAMH,GAAUA,EAAM,YAAcK,CAAO,GACxED,EAAmB,KAAKC,CAAO,CAWrC,CAAC,EAEM,CAACF,EAAUC,CAAkB,CACtC,CAAC,EAEKG,EAAiBL,EACpB,OAAO,CAAC,CAAA,CAAGJ,CAAM,IAAMA,EAAO,SAAW,CAAC,EAC1C,IAAI,CAAC,CAACK,CAAQ,IAAMA,CAAQ,EACzBK,EAAmBN,EAAmB,OAAO,CAAC,CAAA,CAAGJ,CAAM,IAAMA,EAAO,SAAW,CAAC,EAChFW,EAA0BD,EAC7B,IAAI,CAAC,CAACL,EAAUL,CAAM,IAAMA,EAAO,IAAKE,GAAU,CAACA,EAAOG,CAAQ,CAAU,CAAC,EAC7E,KAAK,CAAC,EACN,OAAO,CAACO,EAAK,CAACV,EAAOG,CAAQ,KACvBO,EAAI,IAAIV,CAAK,GAChBU,EAAI,IAAIV,EAAO,EAAE,EAEnBU,EAAI,IAAIV,CAAK,EAAG,KAAKG,CAAQ,EACtBO,GACN,IAAI,GAAyB,EAElC,MAAO,CACL,UAAWH,EACX,YAAaC,EACb,mBAAoBC,CAAA,CAExB,CAoBA,MAAME,GAAiB,0BACjBC,GAAyB,4BAEzBC,GAAyB,iCAMzBC,GAAyB,6BAEzBC,GAAuB,+BAStB,SAASC,GAAiB/J,EAA2B,CAE1D,GAAI,CAACA,EAAO,OAAOA,EAQnB,IAAIgK,EAAUhK,EACd,OAAAgK,EAAUA,EAAQ,QAAQN,GAAgB,MAAM,EAEhDM,EAAUA,EAAQ,QAAQH,GAAwB,QAAQ,EACnDG,CACT,CAEO,SAASC,GAAmBjK,EAA2B,CAC5D,GAAI,CAACA,EAAO,OAAOA,EAEnB,IAAIkK,EAAYlK,EAShB,OAAAkK,EAAYA,EAAU,QAAQJ,GAAsB,MAAM,EAC1DI,EAAYA,EAAU,QAAQP,GAAwB,IAAI,EACnDO,CACT,CAEO,SAASC,GAAqBnK,EAA2B,CAC9D,OAAKA,EAEgBA,EAAM,QAAQ4J,GAAwB,QAAQ,IAE3C5J,EAJL,EAKrB,CAEO,SAASoK,GAAapK,EAA2B,CACtD,OAAKA,GACEA,EAAM,WAAW,KAAM,MAAM,EAAE,QAAQ6J,GAAwB,QAAQ,CAChF,CAEO,SAASQ,GAAerK,EAA2B,CACxD,OAAKA,GACEA,EAAM,QAAQ8J,GAAsB,MAAM,EAAE,WAAW,OAAQ,IAAI,CAC5E,CC1IO,SAASQ,GAAgB,CAC9B,MAAOC,EACP,UAAArG,EACA,UAAWsG,EACX,SAAAC,EACA,GAAGC,CACL,EAA0D,CACxD,KAAM,CAACC,EAAOC,CAAQ,EAAI1K,EAAAA,SAASqK,GAAa,EAAE,EAClDM,EAAAA,UAAU,IAAMD,EAASL,GAAa,EAAE,EAAG,CAACA,CAAS,CAAC,EAGtD,MAAM9C,EAAYqD,EAAAA,QAAQ,IAAM,CAC9B,MAAMC,EACJP,GAAe,OACZtB,IACEA,EAAS,oBAAoB,KAC3B8B,GAAaA,EAAS,WAAa,kCAAA,IAChC,QACJ9B,EAAS,2BAA2B,SAAS,iBAAiB,IAChEA,EAAS,kBAAoB,MAC7BA,EAAS,gBAAgB,OAAS,CAAA,GACjC,CAAA,EAEP,GAAIsB,GAAiBA,EAAc,SAAWO,EAAS,OAAQ,CAC7D,MAAME,EAAgBT,EAAc,OAAQtB,GAAa,CAAC6B,EAAS,SAAS7B,CAAQ,CAAC,EACrF,QAAQ,KACN,6EACA+B,CAAA,CAEJ,CAEA,OAAOF,CACT,EAAG,CAACP,CAAa,CAAC,EAGZ9C,EAAYoD,EAAAA,QAAQ,IACjBrD,EACJ,IAAKyB,GAAa,CACjB,MAAMgC,MAAoB,IAC1B,OAAAhC,EAAS,gBAAiB,QAASH,GAAU,CACtCmC,EAAc,IAAInC,EAAM,SAAS,GACpCmC,EAAc,IAAInC,EAAM,UAAW,CAAE,UAAW,CAAA,EAAI,WAAY,CAAA,EAAI,EAEtE,MAAM9C,EAAOiF,EAAc,IAAInC,EAAM,SAAS,EAC9C9C,EAAK,UAAU,KAAK8C,EAAM,QAAQ,EAC9BA,EAAM,YAAc,MAAQA,EAAM,YAAc,QAClD9C,EAAK,WAAW,KAAK8C,EAAM,SAAS,CAExC,CAAC,EACM,CAAC,GAAGmC,EAAc,QAAA,CAAS,EAAE,IAAI,CAAC,CAACC,EAAWC,CAAQ,KAAO,CAClE,UAAAD,EACA,SAAAjC,EACA,SAAAkC,CAAA,EACA,CACJ,CAAC,EACA,OAAO,CAAC3B,EAAKhF,KACZA,EAAK,QAAQ,CAAC,CAAE,UAAA0G,EAAW,SAAAjC,EAAU,SAAAkC,KAAe,CAC7C3B,EAAI,IAAI0B,CAAS,GACpB1B,EAAI,IAAI0B,EAAW,CAAE,UAAW,CAAA,EAAI,WAAY,IAAI,IAAO,EAE7D,MAAMlF,EAAOwD,EAAI,IAAI0B,CAAS,EAC9BlF,EAAK,UAAU,KAAK,CAAE,SAAAiD,EAAU,SAAAkC,EAAU,EACtCA,EAAS,WAAW,OAAS,GAC/BA,EAAS,WAAW,QAASC,GAAc,CACpCpF,EAAK,WAAW,IAAIoF,CAAS,GAChCpF,EAAK,WAAW,IAAIoF,EAAW,CAAA,CAAE,EAEnCpF,EAAK,WAAW,IAAIoF,CAAS,EAAG,KAAKnC,CAAQ,CAC/C,CAAC,CAEL,CAAC,EACMO,GACN,IAAI,GAAwB,EAChC,CAAChC,CAAS,CAAC,EAIR6D,EAASR,EAAAA,QAAQ,IAAM7C,GAAW0C,CAAK,EAAG,CAACA,CAAK,CAAC,EAKvD,SAASY,GAAoB,CAC3B,GAAID,EAAQ,CACV,KAAM,CAAE,SAAAjE,GAAaiE,EAMfE,EAAWnE,EAAS,QAAA,EAC1BuD,EAASY,CAAQ,EACjBf,IAAWe,CAAQ,CACrB,MACE,QAAQ,KAAK,mDAAoDF,CAAM,CAE3E,CAEA,SAASG,EAAeC,EAA2B,CAEjD,MAAMC,EAAOvG,GAAuBsG,CAAI,EAAE,IAC1Cd,EAASe,CAAI,EACblB,IAAWkB,CAAI,CACjB,CAKA,OACEC,EAAAA,IAAC,MAAA,CAAI,GAAG,gBAAgB,UAAU,0CAChC,SAAAA,EAAAA,IAACvF,GAAA,CACC,aAAcqE,EAAM,cAAgB,GACpC,gBAAiBA,EAAM,iBAAmB,GAC1C,mBAAoBA,EAAM,oBAAsB,GAChD,oBAAqBA,EAAM,qBAAuB,GAClD,4BAA6BA,EAAM,6BAA+B,GAClE,kBAAmBA,EAAM,mBAAqB,GAC9C,kBAAmBA,EAAM,mBAAqB,GAC9C,eAAgBA,EAAM,gBAAkB,GACxC,sBAAuBA,EAAM,uBAAyB,GACtD,iBAAkBA,EAAM,kBAAoB,GAC5C,oBAAqBA,EAAM,qBAAuB,GAClD,0BAA2BA,EAAM,2BAA6B,GAE9D,SAAAkB,EAAAA,IAACpE,GAAA,CAA6B,UAAAC,EAAsB,UAAAC,EACjD,SAAA4D,EACCM,EAAAA,IAAC/F,GAAA,CACC,OAAQyF,EAAO,OACf,MAAOA,EAAO,MACd,UAAApH,EAEA,SAAA0H,EAAAA,IAACxE,GAAA,CAAwB,SAAUkE,EAAO,SACxC,SAAAM,EAAAA,IAACC,GAAA,CAAM,KAAMP,EAAO,KAAM,SAAUC,CAAA,CAAmB,CAAA,CACzD,CAAA,CAAA,EAGFK,EAAAA,IAACE,GAAA,CAAsB,QAASL,EAAgB,CAAA,CAEpD,CAAA,CAAA,EAEJ,CAEJ,CAIA,SAASM,GAAqB9H,EAAgB+H,EAAkB,GAA6B,CAC3F,GAAI/H,aAAe5C,GAA0B,CAC3C,GAAI2K,EAAQ,MAAM,MAAM,uCAAuC,EAC/D,MAAO,CAAA,CACT,CACA,GAAI/H,aAAezC,GAAoB,CACrC,GAAIwK,EAAQ,MAAM,MAAM,iCAAiC,EACzD,MAAO,CAAA,CACT,CAEA,GAAI/H,aAAexC,GACjB,MAAO,CAACwC,CAAG,EAEb,GAAIA,aAAe3C,GACjB,OAAO2C,EAAI,SAAS,IAAKgI,GAAaF,GAAqBE,EAAUD,CAAM,CAAC,EAAE,KAAK,CAAC,EAGtF,GAAIA,EACF,MAAM,MACJ,gCAAgC/H,EAAI,kBAAA,EAAoB,UAAU,KAAKA,EAAI,SAAS,EAAA,EAExF,MAAO,CAAA,CACT,CAEA,SAASiI,GAAsBjI,EAAsBoD,EAA+B,CAClFA,EAAS,OAAOpD,EAAI,MAAQA,EAAI,IAAK,EAKrC,MAAMkI,EAAYlI,EAAI,OAGtB,GAAIkI,aAAqBhK,IAAyBgK,aAAqBnK,GAAsB,CAG3F,GAAImK,EAAU,SAAS,SAAW,EAAG,CACnCD,GAAsBC,EAAW9E,CAAQ,EACzC,MACF,CAGA,MAAM+E,EAAWD,EAAU,SAAS,UAAWF,GAAaA,IAAahI,CAAG,EAC5E,GAAImI,IAAa,EAAG,CAClB,MAAMC,EAAUF,EAAU,SAASC,EAAW,CAAC,EAC/C/E,EAAS,OAAOgF,EAAQ,MAAM,CAChC,KAAO,CACL,MAAMC,EAAUH,EAAU,SAASC,EAAW,CAAC,EAC/C/E,EAAS,OAAOiF,EAAQ,MAAM,CAChC,CAGA,GAAIH,EAAU,SAAS,SAAW,EAAG,CACnC,MAAMI,EAAkBJ,EAAU,OAC5BK,EAAkBL,EAAU,SAASC,GAAYA,IAAa,EAAI,EAAK,GAAG,EAE9EG,aAA2BnK,GAC3BoK,aAA2BpK,IAG3BiF,EAAS,OAAOmF,EAAgB,QAAA,EAAU,MAAM,EAChDnF,EAAS,OAAOmF,EAAgB,QAAA,EAAU,MAAM,EAEpD,CAEA,MACF,CAGA,GAAIL,aAAqB/J,EAAyB,CAChD8J,GAAsBC,EAAW9E,CAAQ,EACzC,MACF,CAGA,GAAI8E,aAAqB9J,EAAuB,CAC9C6J,GAAsBC,EAAW9E,CAAQ,EACzC,MACF,CAEA,QAAQ,KAAK,qCAAsC,CAAE,UAAA8E,EAAW,IAAAlI,EAAK,CACvE,CAKA,SAAS6H,GAAsB,CAAE,QAAAW,GAA8D,CAC7F,KAAM,CAAE,oBAAAhG,CAAA,EAAwBS,GAAA,EAEhC,SAASwF,EAAmBC,EAAyB,CAC9CA,GACLF,IAAUE,CAA+B,CAC3C,CAEA,OACEf,MAAAgB,EAAAA,SAAA,CACE,SAAAC,EAAAA,KAACC,EAAA,CACC,UAAU,iBACV,SAAUJ,EACV,aAAW,oBAEX,SAAA,CAAAd,MAACkB,EAAS,OAAT,CAAgB,QAAQ,OAAO,UAAU,4CACxC,SAAAlB,EAAAA,IAAC,IAAA,CAAE,wBAAyB,CAAE,OAAQmB,EAAA,EAAkB,cAAY,OAAO,EAC7E,EACAnB,EAAAA,IAACkB,EAAS,KAAT,CACE,SAAA3H,GAAmB,OACjBsB,EAAuD,IAAM,GAAtChC,GAASA,EAAK,KAAO,QAAiB,EAC9D,IAAKA,GACLmH,EAAAA,IAACkB,EAAS,KAAT,CACC,SAAUrI,EAAK,GAKd,SAAAA,EAAK,KAAA,EAJDA,EAAK,EAAA,CAMb,CAAA,CACH,CAAA,CAAA,CAAA,EAEJ,CAEJ,CAEA,SAASuI,GAAoB,CAC3B,WAAAC,EACA,QAAAR,CACF,EAGG,CACD,SAASC,EAAmBC,EAAyB,CAC9CA,GACLF,IAAUE,CAA6B,CACzC,CAEA,OACEf,MAAAgB,EAAAA,SAAA,CACE,SAAAC,EAAAA,KAACC,EAAA,CACC,UAAU,iBACV,SAAUJ,EACV,aAAW,iBAEX,SAAA,CAAAd,MAACkB,EAAS,OAAT,CAAgB,QAAQ,OAAO,UAAU,yCACxC,SAAAlB,EAAAA,IAAC,IAAA,CAAE,wBAAyB,CAAE,OAAQmB,EAAA,EAAkB,cAAY,OAAO,EAC7E,EACAnB,EAAAA,IAACkB,EAAS,KAAT,CACE,SAAAzH,GAAgB,OACf4H,GAAcA,EAAW,OAAS,EAC7BxI,GAASwI,EAAW,SAASxI,EAAK,EAAE,EACrC,IAAM,EAAA,EACV,IAAKA,GACLmH,EAAAA,IAACkB,EAAS,KAAT,CAAc,SAAUrI,EAAK,GAC3B,SAAAA,EAAK,KAAA,EAD+BA,EAAK,EAE5C,CACD,CAAA,CACH,CAAA,CAAA,CAAA,EAEJ,CAEJ,CAEA,SAASyI,GAA6B,CACpC,UAAAC,EACA,QAAAV,CACF,EAGG,CACD,SAASC,EAAmBC,EAAyB,CAC9CA,GACLF,IAAUE,CAAsC,CAClD,CAEA,OACEf,MAAAgB,EAAAA,SAAA,CACE,SAAAC,EAAAA,KAACC,EAAA,CACC,UAAW,CAAC,gBAAgB,EAAE,OAAOK,GAAa,EAAE,EAAE,KAAK,GAAG,EAC9D,SAAUT,EACV,aAAW,6BAEX,SAAA,CAAAd,EAAAA,IAACkB,EAAS,OAAT,CACC,QAAQ,OACR,UAAU,oDAEV,SAAAlB,EAAAA,IAAC,KAAE,wBAAyB,CAAE,OAAQmB,EAAA,EAAkB,cAAY,MAAA,CAAO,CAAA,CAAA,QAE5ED,EAAS,KAAT,CACE,SAAAvH,GAA0B,IAAKd,GAC9BmH,EAAAA,IAACkB,EAAS,KAAT,CACC,SAAUrI,EAAK,GAKd,SAAAA,EAAK,KAAA,EAJDA,EAAK,EAAA,CAMb,CAAA,CACH,CAAA,CAAA,CAAA,EAEJ,CAEJ,CAEA,SAAS2I,GAAqB,CAC5B,WAAAH,EACA,UAAAE,EACA,QAAAV,CACF,EAIG,CACD,KAAM,CAAE,gBAAAlG,EAAiB,mBAAAC,CAAA,EAAuBU,GAAA,EAEhD,SAASmG,EAAoBV,EAAyB,CAC/CA,GACLF,IAAUE,CAA8B,CAC1C,CAEA,OAAMpG,GAAmBC,EAGvBoF,MAAAgB,EAAAA,SAAA,CACE,SAAAC,EAAAA,KAACC,EAAA,CACC,UAAW,CAAC,gBAAgB,EAAE,OAAOK,GAAa,EAAE,EAAE,KAAK,GAAG,EAC9D,SAAUE,EACV,aAAW,kBAEX,SAAA,CAAAzB,EAAAA,IAACkB,EAAS,OAAT,CACC,QAAQ,OACR,UAAU,6DAEV,SAAAlB,EAAAA,IAAC,KAAE,wBAAyB,CAAE,OAAQ0B,EAAA,EAAc,cAAY,MAAA,CAAO,CAAA,CAAA,EAEzE1B,EAAAA,IAACkB,EAAS,KAAT,CACE,SAAArH,GAAgB,OACfwH,GAAcA,EAAW,OAAS,EAC7BxI,GAASwI,EAAW,SAASxI,EAAK,EAAE,EACrC,IAAM,EAAA,EAET,OAAQ8B,EAAkD,IAAM,GAArC9B,GAASA,EAAK,KAAO,OAAoB,EACpE,OAAQ+B,EAAmD,IAAM,GAAnC/B,GAASA,EAAK,KAAO,KAAkB,EACrE,IAAKA,SACHqI,EAAS,KAAT,CAAc,SAAUrI,EAAK,GAC3B,SAAAA,EAAK,OAD+BA,EAAK,EAE5C,CACD,CAAA,CACL,CAAA,CAAA,CAAA,EAEJ,EA9BmD,IAgCvD,CAEA,SAAS8I,GAAa,CAAE,UAAAJ,EAAW,QAAAV,GAAyD,CAC1F,OACEb,EAAAA,IAAC4B,GAAA,CACC,QAAQ,OACR,UAAW,CAAC,uCAAuC,EAAE,OAAOL,GAAa,EAAE,EAAE,KAAK,GAAG,EACrF,QAAAV,EAEA,SAAAb,EAAAA,IAAC,KAAE,wBAAyB,CAAE,OAAQ6B,EAAA,EAAe,cAAY,MAAA,CAAO,CAAA,CAAA,CAG9E,CAEA,SAASC,GAAoB,CAAE,UAAAP,EAAW,QAAAV,GAAyD,CACjG,OACEb,EAAAA,IAAC4B,GAAA,CACC,QAAQ,OACR,UAAW,CAAC,kDAAkD,EAC3D,OAAOL,GAAa,EAAE,EACtB,KAAK,GAAG,EACX,QAAAV,EAEA,SAAAb,EAAAA,IAAC,KAAE,wBAAyB,CAAE,OAAQ+B,EAAA,EAAc,cAAY,MAAA,CAAO,CAAA,CAAA,CAG7E,CAKA,SAAS9B,GAAM,CAAE,KAAA+B,EAAM,SAAAnD,GAA2D,CAChF,KAAM,CAAE,SAAApD,CAAA,EAAaC,GAAA,EACf,CAAE,aAAAhB,CAAA,EAAiBY,GAAA,EAGnB2G,EAAWD,EAAK,WAAA,EAEhBE,EAAgBD,EAAS,SAAS,CAAC,EACnCE,EAAmBhC,GAAqB+B,EAAgB,EAAK,EAE7DE,EAAY1H,EAAesH,EAAK,YAAA,EAAgB,KAChDK,EAAcD,GAAW,QAAA,GAAa,GAEtC,CAACE,EAAQC,CAAS,EAAIjO,EAAAA,SAAS+N,CAAW,EAChDpD,EAAAA,UAAU,IAAMsD,EAAUF,CAAW,EAAG,CAACA,CAAW,CAAC,EAKrD,SAASG,GAAwB,CAC/B,MAAMC,EAAY,WAClBF,EAAUE,CAAS,EAEnB,MAAMC,EAAaT,EAAS,MAAM,WAC9BS,IAAe,QACjBjH,EAAS,YAAYiH,EAAY,WAAWD,CAAS,EAAE,EACvD5D,IAAA,GAGA,QAAQ,KAAK,wDAAyD,CAAE,SAAAoD,CAAA,CAAU,CAEtF,CAEA,SAASU,EAAmBC,EAA6C,CACvE,MAAMH,EAAYG,EAAM,OAAO,MAG/B,GAFAL,EAAUE,CAAS,EAEfL,EAAW,CACb,MAAMS,EAAgBT,EAAU,mBAAA,EAC1BU,EAAQD,GAAe,oBAAA,EACzBC,GACFrH,EAAS,cAAcqH,EAAM,OAAQL,CAAS,EAC9C5D,IAAA,GAEA,QAAQ,KAAK,uDAAwD,CACnE,UAAAuD,EACA,cAAAS,EACA,MAAAC,CAAA,CACD,CAEL,MACE,QAAQ,KAAK,yDAA0D,CAAE,KAAAd,EAAM,UAAAI,EAAW,CAE9F,CAEA,SAASW,GAA2B,CAC9BX,GACFG,EAAU,EAAE,EAEZ9G,EAAS,OAAOuG,EAAK,OAAA,EAAU,OAAQI,EAAU,IAAK,EACtDvD,IAAA,GAEA,QAAQ,KAAK,yDAA0D,CAAE,KAAAmD,EAAM,UAAAI,EAAW,CAE9F,CAKA,OACEnB,EAAAA,KAAC,MAAA,CAAI,UAAU,4GACb,SAAA,CAAAjB,EAAAA,IAACgD,GAAA,CAAc,SAAUb,EAAkB,SAAAtD,CAAA,CAAoB,EAC9DnE,IACE4H,EACCrB,OAAC,MAAA,CAAI,UAAU,kGACb,SAAA,CAAAjB,EAAAA,IAAC,OAAA,CAAK,UAAU,UAAU,SAAA,SAAM,EAChCA,EAAAA,IAACiD,EAAK,OAAL,CAAY,UAAU,SAAS,MAAOX,EAAQ,SAAUK,EACtD,YAAe,IAAKvO,GACnB4L,MAAC,SAAA,CAAO,MAAA5L,EACL,SAAAA,CAAA,EADwBA,CAE3B,CACD,EACH,EACA4L,EAAAA,IAAC2B,GAAA,CACC,UAAU,2EACV,QAASoB,CAAA,CAAA,CACX,CAAA,CACF,EAEA/C,EAAAA,IAAC4B,GAAA,CAAO,KAAK,KAAK,QAASY,EAAuB,MAAO,CAAE,UAAW,QAAA,EAAY,SAAA,mBAAA,CAElF,EAAA,EAEN,CAEJ,CAEA,SAASQ,GAAc,CACrB,SAAA5I,EACA,SAAAyE,CACF,EAGG,CACD,KAAM,CAAE,SAAApD,CAAA,EAAaC,GAAA,EACf,CAAE,4BAAAZ,CAAA,EAAgCQ,GAAA,EAOlC4H,EAAiBxO,EAAAA,YACpBoL,GAA8B,CAC7B,MAAM4C,EAAatI,GAAYA,EAAS,OAAS,EAAIA,EAAS,CAAC,EAAE,MAAO,WAAa,EAC/E2F,EAAOvG,GAAuBsG,CAAI,EAAE,IAC1CrE,EAAS,aAAaiH,EAAY,GAAG3C,CAAI,GAAG,EAC5ClB,IAAA,CACF,EACA,CAACpD,EAAUrB,EAAUyE,CAAQ,CAAA,EAEzBsE,EAAsBzO,EAAAA,YAC1B,CAACoL,EAA2BzH,IAA6B,CACvD,MAAMqK,EAAarK,EAAI,KAAM,WACvB0H,EAAOvG,GAAuBsG,CAAI,EAAE,IAC1CrE,EAAS,YAAYiH,EAAY,IAAI3C,CAAI,EAAE,EAC3ClB,IAAA,CACF,EACA,CAACpD,EAAUoD,CAAQ,CAAA,EAMrB,OACEoC,EAAAA,KAAC,MAAA,CAAI,UAAU,qHACZ,SAAA,CAAAnG,GACCkF,EAAAA,IAACE,GAAA,CAAoC,QAASgD,CAAA,EAAlB,OAAkC,EAE/D9I,EAAS,IAAK/B,GACb4I,EAAAA,KAACD,EAAAA,SAAA,CACC,SAAA,CAAAhB,EAAAA,IAACoD,GAAA,CAAY,IAAA/K,EAAU,SAAAwG,CAAA,CAAoB,EAC1C/D,SACEoF,GAAA,CAAsB,QAAUJ,GAASqD,EAAoBrD,EAAMzH,CAAG,CAAA,CAAG,CAAA,CAAA,EAH/D,SAASA,EAAI,kBAAA,EAAoB,SAAA,CAAU,EAK1D,CACD,CAAA,EACH,CAEJ,CAKA,SAASgL,GAAmB,CAC1B,MAAOC,EACP,SAAAzE,CACF,EAGG,CACD,KAAM,CAACzK,EAAOC,CAAQ,EAAIC,EAAAA,SAASgP,CAAS,EAC5CrE,OAAAA,EAAAA,UAAU,IAAM5K,EAASiP,CAAS,EAAG,CAACA,CAAS,CAAC,EAG9CtD,EAAAA,IAACiD,EAAK,QAAL,CACC,UAAU,WACV,MAAO,CAAE,MAAO,MAAA,EAChB,MAAA7O,EACA,SAAWwO,GAAUvO,EAASuO,EAAM,OAAO,KAAK,EAChD,OAAQ,IAAM/D,IAAWzK,CAAK,CAAA,CAAA,CAGpC,CAEA,SAASmP,GAAqB,CAC5B,IAAAlL,EACA,iCAAAmL,EAAmC,GACnC,SAAA3E,CACF,EAIG,CACD,KAAM,CAAE,SAAApD,CAAA,EAAaC,GAAA,EACf,CAAE,UAAAI,CAAA,EAAcC,GAAA,EAChB,CACJ,eAAAd,EACA,sBAAAC,EACA,iBAAAC,EACA,oBAAAC,EACA,0BAAAC,CAAA,EACEC,GAAA,EACE,CAAE,UAAAhD,CAAA,EAAcgC,GAAA,EAEhBmJ,EAAerL,GAAkBC,EAAKC,CAAS,EAE/CoL,EAAa,OACbC,EAAiB,OAAO,KAAK/K,EAAmB,EAChDgL,EAAiB,CAACF,EAAY,GAAGC,CAAc,EAC/CE,EAAe1I,EACjB,CAAC,GAAGW,EAAU,KAAA,CAAM,EAAE,OAAQqB,GAAU,CAACyG,EAAe,SAASzG,CAAK,CAAC,EAAE,SAAA,EACzE,CAAA,EAEE2G,EAAgBhI,EAAU,IAAI4H,CAAU,EACxCK,EACJ,CAAC,GAAGjI,EAAU,KAAA,CAAM,EAAE,OAAQqB,GAAU,OAAO,KAAKvE,EAAmB,EAAE,SAASuE,CAAK,CAAC,EACrF,OAAS,EACR6G,EAAkBH,EAAa,OAAS,EAExCI,EAAe5L,EAAI,UAAA,EACnB6L,EAAe7L,EAAI,SAAS,CAAC,EAC7B8L,EAAa9L,EAAI,OAAA,EAAS,eAAA,EAAiB,OAAA,EAE3C,CAAC8E,EAAOiH,CAAQ,EAAI9P,EAAAA,SAAS,MAAM,EACnC,CAAC+P,EAAUC,CAAW,EAAIhQ,EAAAA,SAAS,IAAI,EACvC,CAACF,EAAOC,CAAQ,EAAIC,EAAAA,SAAS,EAAE,EAC/BiQ,EAAiB/P,EAAAA,OAAO6P,CAAQ,EAGtCpF,EAAAA,UAAU,IAAM,CACd,MAAMuF,EAAgBP,EAAa,WAAA,EAC7BQ,EAAeR,EAAa,UAAA,EAC5BS,EACJD,IAAiB,KACb,GAAGA,EAAa,SAAS,IAAID,EAAc,SAAS,GACpD,GAAGA,EAAc,SAAS,GAE1BG,EAAST,EAAa,OAAO,OAASvP,EAAU,YAGhDiQ,GADcT,EAAW,OAAO,MACH,MAAM,EAAG,EAAE,EAExCU,GAAiBC,GAAeF,IAAiB,GAAID,CAAM,EACjE,IAAII,GAAcF,GAAe,SAC7BG,GAAWC,GAAcJ,GAAe,MAAOE,EAAW,EAM5DR,EAAe,UAAYQ,IAC3B,CAAC,QAAS,WAAW,EAAE,SAASR,EAAe,OAAO,IAIpCA,EAAe,QAEjCQ,GAAcR,EAAe,SAI/B,MAAMzI,GAAY/C,GAAwB2L,CAAQ,EAEhD5I,IACAA,GAAU,SACVA,GAAU,QAAQ,OAAS,IAE1B,CAACA,GAAU,QAAQ,IAAKoJ,IAAWA,GAAO,KAAK,EAAE,SAASF,EAAQ,GAAK,CAACA,MAEzEA,GAAWlJ,GAAU,QAAQ,CAAC,GAAG,OAAS,GAC1CiJ,GAAc,MAMhBX,EAASM,GAAY,EAAE,EACvBJ,EAAYS,EAAW,EACvB1Q,EAAS2Q,EAAQ,EACjBT,EAAe,QAAUQ,EAC3B,EAAG,CAACd,EAAcC,EAAcC,CAAU,CAAC,EAE3C,MAAM5D,GAAYlI,EAAI,OAChB8M,GAAkB,OAAO,KAAKrL,EAAmB,EACpD,OAAOyG,cAAqB/J,EAA2B4O,GAAOA,IAAO,QAAU,IAAM,EAAI,EACzF,OAAO7E,cAAqB9J,EAAyB2O,GAAOA,IAAO,QAAU,IAAM,EAAI,EAEpFC,GAAsBtM,GAAwBoE,CAAK,EAKzD,SAAS2H,GAAe1Q,EAAeuQ,EAAiB,CACtD,MAAMW,EAAqBlR,EAAM,WAAW,IAAI,EAC1CmR,EAAmBnR,EAAM,SAAS,IAAI,EAEtCoR,EACJF,GAAsBC,EAClBnR,EAAM,MAAM,EAAG,EAAE,EACjBkR,EACAlR,EAAM,MAAM,CAAC,EACbmR,EACAnR,EAAM,MAAM,EAAG,EAAE,EACjBA,EAIN,OAFiCmK,GAAqBiH,CAA2B,EAoB1E,CAAE,SAAUb,EAAS,QAAU,YAAa,MAAOvQ,CAAAA,EAjBpDuQ,EACEW,GAAsBC,EACjB,CAAE,SAAU,WAAY,MAAOC,CAAA,EAEpCF,EACK,CAAE,SAAU,YAAa,MAAOlR,EAAM,MAAM,CAAC,CAAA,EAElDmR,EACK,CAAE,SAAU,cAAe,MAAOnR,EAAM,MAAM,EAAG,EAAE,CAAA,EAErD,CAAE,SAAU,KAAM,MAAOA,CAAAA,EAE9BkR,GAAsBC,EACjB,CAAE,SAAU,YAAa,MAAOnR,CAAAA,EAElC,CAAE,SAAU,SAAU,MAAOA,CAAAA,CAGxC,CAEA,SAAS6Q,GAAc7Q,EAA2BiQ,EAAkB,CAClE,MAAO,CAAC,QAAS,WAAW,EAAE,SAASA,CAAQ,EAC3C5F,GAAerK,CAAK,EACpBiK,GAAmBjK,CAAK,CAC9B,CAEA,SAASqR,GAAYrR,EAA2BiQ,EAAkB,CAChE,MAAO,CAAC,QAAS,WAAW,EAAE,SAASA,CAAQ,EAAI7F,GAAapK,CAAK,EAAI+J,GAAiB/J,CAAK,CACjG,CAKA,SAASsR,GAAkB3E,EAAyB,CAClD,MAAM2D,EAAW3D,EACZ2D,GACDA,IAAavH,IAKjBiH,EAASM,CAAQ,EACjBjJ,EAAS,QAAQwI,EAAa,MAAQA,EAAa,KAAOS,CAAQ,EAClE7F,IAAA,EACF,CAEA,SAAS8G,GAAqB/C,EAA6C,CACzE,MAAMmC,EAAcnC,EAAM,OAAO,MAC3BgD,EAAcvB,EACpBC,EAAYS,CAAW,EACvBR,EAAe,QAAUQ,EAEzB,MAAMc,EAAW,CAAC,SAAU,WAAW,EAAE,SAASd,CAAW,EAAI,KAAO,IACxEtJ,EAAS,cAAcyI,EAAa,OAAQ2B,CAAQ,EAEpD,IAAIb,EAAW5Q,GAAS,GAExB,MAAM0R,GAAY7M,GAAyB8L,CAAW,EAChDgB,GAAY9M,GAAyB2M,CAAW,EAEtD,GAAI,CAACE,GAAW,CACd,QAAQ,KAAK,uDAAwD,CACnE,UAAAA,GACA,UAAAC,GACA,YAAAhB,EACA,YAAAa,CAAA,CACD,EACD,MACF,CAEAZ,EAAWS,GAAYT,EAAUD,CAAW,EAO5CtJ,EAAS,cACP0I,EAAW,OACX,IAAI2B,GAAU,aAAe,EAAE,GAAGd,CAAQ,GAAGc,GAAU,YAAc,EAAE,GAAA,EAGzEjH,IAAA,CACF,CAEA,SAASmH,IAAqB,CAE5B,MAAMC,EAAe,CAAC,QAAS,WAAW,EAAE,SAAS5B,CAAQ,EACzD7F,GAAapK,CAAK,EAClB+J,GAAiB/J,CAAK,EAEpB8R,EAASjN,GAAyBoL,CAAQ,EAEhD5I,EAAS,cACP0I,EAAW,OACX,IAAI+B,GAAQ,aAAe,EAAE,GAAGD,CAAY,GAAGC,GAAQ,YAAc,EAAE,GAAA,EAGzErH,IAAA,CACF,CAEA,SAASsH,EAA6BrG,EAAkCsG,EAAmB,CACzF,MAAMC,EAASzM,GAA8BkG,CAAI,EAE7CsG,EACF3K,EAAS,aAAapD,EAAI,MAAQ,GAAGgO,EAAO,SAAS,GAAG,EAExD5K,EAAS,YAAYpD,EAAI,KAAO,IAAIgO,EAAO,QAAQ,EAAE,EAYvDxH,IAAA,CACF,CAEA,SAASyH,EAAWxG,EAA0B,CAC5C,MAAMuG,EAASvM,GAAoBgG,CAAI,EAEnCuG,EAAO,WAAW5K,EAAS,aAAapD,EAAI,MAAQgO,EAAO,SAAS,EACpEA,EAAO,UAAU5K,EAAS,YAAYpD,EAAI,KAAOgO,EAAO,QAAQ,EAEpExH,IAAA,CACF,CAEA,SAAS0H,GAAe,CACtBjG,GAAsBjI,EAAKoD,CAAQ,EACnCoD,IAAA,CACF,CAKA,SAAS2H,EAAgBhJ,EAAiBiJ,EAAkC,OAAW,CACrF,OAAKA,EAUHxF,EAAAA,KAAAD,WAAA,CACE,SAAA,CAAAhB,EAAAA,IAAC,UAAQ,SAAAxC,CAAA,CAAQ,EAAS,KAAGiJ,EAC5BC,EAAyBlJ,CAAO,CAAA,EACnC,EAXEyD,EAAAA,KAAAD,WAAA,CACE,SAAA,CAAAhB,EAAAA,IAAC,UAAQ,SAAAxC,CAAA,CAAQ,EAChBkJ,EAAyBlJ,CAAO,CAAA,EACnC,CAUN,CAEA,SAASkJ,EAAyBvJ,EAAesC,EAAgC,OAAW,CAC1F,GAAI,CAACpE,EAA2B,OAAO,KAEvC,MAAMsL,EAAa7K,EAAU,IAAIqB,CAAK,GAAG,UAAU,QAAU,EACvDyJ,EAAiBnH,EACnB3D,EAAU,IAAIqB,CAAK,GAAG,YAAY,IAAIsC,CAAS,GAAG,QAAU,EAC5D,OAGJ,GAAIA,GAAakH,IAAeC,EAAgB,OAAO,KAEvD,MAAMC,EAAQpH,EAAYmH,EAAiBD,EAE3C,OACE1F,EAAAA,KAAAD,WAAA,CACE,SAAA,CAAAhB,EAAAA,IAAC,KAAA,EAAG,EACJiB,EAAAA,KAAC,QAAA,CAAM,UAAU,sBAAsB,SAAA,CAAA,gBAAc4F,EAAM,aAAA,CAAA,CAAW,CAAA,EACxE,CAEJ,CAEA,SAASC,GAAsBtJ,EAAiB,CAC9C,GAAI,CAACpC,EAAqB,OAAO,KAEjC,MAAM2L,EAAajL,EAAU,IAAI0B,CAAO,GAAG,WAC3C,MAAI,CAACuJ,GAAcA,EAAW,OAAS,EAAU,KAE3B,CAAC,GAAGA,EAAW,MAAM,EAEtB,IAAKtJ,GAAgB,CACxC,MAAM2H,EAAK,GAAG3H,CAAW,IAAID,CAAO,GAEpC,OACEwC,EAAAA,IAACkB,EAAS,KAAT,CAAc,SAAUkE,EAAI,OAAQjI,IAAUiI,EAC7C,SAAAnE,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAjB,EAAAA,IAAC,UAAQ,SAAAvC,CAAA,CAAY,EAAS,IAAED,EAC/BkJ,EAAyBlJ,EAASC,CAAW,CAAA,CAAA,CAChD,GAJsD2H,CAKxD,CAEJ,CAAC,CACH,CAEA,SAAS4B,GAAoB,CAC3B,OAAI3B,IAAuBA,GAAoB,SAAS,OAAS,EAE7DpE,EAAAA,KAACC,EAAA,CACC,SAAWH,GAAa1M,EAAS0M,GAAY,EAAE,EAE/C,OAAQiF,GAER,SAAA,CAAAhG,EAAAA,IAACkB,EAAS,OAAT,CAAgB,UAAU,cAAe,SAAA9M,EAAM,EAChD4L,MAACkB,EAAS,KAAT,CACE,YAAoB,QAAQ,IAAKgE,GAChClF,EAAAA,IAACkB,EAAS,KAAT,CACC,SAAUgE,EAAO,MAEjB,OAAQ9Q,IAAU8Q,EAAO,MAExB,SAAAA,EAAO,KAAA,EAHHA,EAAO,KAAA,CAKf,CAAA,CACH,CAAA,CAAA,CAAA,EAMJlF,EAAAA,IAACiD,EAAK,QAAL,CACC,UAAU,WACV,MAAO,CAAE,MAAO,MAAA,EAChB,MAAA7O,EACA,SAAWwO,GAAUvO,EAASuO,EAAM,OAAO,KAAK,EAChD,OAAQoD,EAAA,CAAA,CAGd,CAEA,OACE/E,EAAAA,KAAC,MAAA,CACC,UAAW,CACT,8GAAA,EAEC,OAAO,CAACwC,EAAe,eAAiB,EAAE,CAAC,EAC3C,KAAK,GAAG,EAEV,SAAA,CAAAD,GACCxD,EAAAA,IAACsB,GAAA,CACC,UAAU,uEACV,QAAUxB,GAASqG,EAA6BrG,EAAM,EAAI,CAAA,CAAA,EAI9DmB,EAAAA,KAAC,MAAA,CAAI,UAAU,6CAEb,SAAA,CAAAA,EAAAA,KAACC,EAAA,CAAS,SAAUwE,GAClB,SAAA,CAAA1F,EAAAA,IAACkB,EAAS,OAAT,CAAgB,UAAU,cAAe,SAAA/D,EAAM,QAC/C+D,EAAS,KAAT,CACC,SAAAD,OAAC,MAAA,CAAI,UAAU,SACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CACC,UAAY,CAAA,EACT,OAAO9F,GAAoB6I,EAAkB,CAAC,iBAAiB,EAAI,CAAA,CAAE,EACrE,KAAK,GAAG,EAGV,SAAA,CAAA/I,GACCgG,EAAAA,KAAAD,WAAA,CACE,SAAA,CAAAhB,EAAAA,IAACkB,EAAS,OAAT,CAAgB,SAAA,oBAAA,CAAkB,EACnClB,EAAAA,IAACkB,EAAS,KAAT,CAAc,SAAUwC,EAAY,OAAQvG,IAAUuG,EACpD,SAAA8C,EAAgB9C,CAAU,CAAA,CAC7B,EACA1D,MAACkB,EAAS,QAAT,CAAA,CAAiB,CAAA,EACpB,GAEAjG,GAAmBE,GAAoB0I,EAAa,OAAS,IAC7D7D,MAACkB,EAAS,OAAT,CAAgB,SAAA,wBAAA,CAAsB,EAExCvI,GAAgB,OACduC,EAAqE,IAAM,GAAlD+L,GAAcnL,EAAU,IAAImL,EAAU,EAAE,CAAU,EAC5E,IAAKA,GACLhG,EAAAA,KAACD,EAAAA,SAAA,CACC,SAAA,CAAAC,EAAAA,KAACC,EAAS,KAAT,CAAc,SAAU+F,EAAU,GAAI,OAAQ9J,IAAU8J,EAAU,GACjE,SAAA,CAAAjH,EAAAA,IAAC,SAAA,CAAQ,WAAU,EAAA,CAAG,EAAS,KAAGiH,EAAU,MAC3CP,EAAyBO,EAAU,EAAE,CAAA,EACxC,EACCH,GAAsBG,EAAU,EAAE,CAAA,GALtBA,EAAU,EAMzB,CACD,EACA,CAAChM,GAAkB,CAACC,GAAyB2I,EAAa,SAAW,GAGpE5C,OAACC,EAAS,SAAT,CAAkB,MAAO,CAAE,MAAO,eACjC,SAAA,CAAAlB,EAAAA,IAAC,KAAA,CAAG,UAAU,wBAAwB,SAAA,kCAA+B,QACpE,KAAA,EAAG,EACJA,EAAAA,IAAC,KAAA,CAAG,UAAU,iBAAiB,SAAA,oCAAA,CAAkC,CAAA,CAAA,CACnE,CAAA,CAAA,CAAA,EAGJA,EAAAA,IAAC,MAAA,CACC,UAAY,CAAA,EACT,OAAQ/E,GAAkB6I,GAAkBC,EAAoB,CAAC,MAAM,EAAI,CAAA,CAAE,EAC7E,KAAK,GAAG,EAEV,SAAA5I,GAAoB0I,EAAa,OAAS,GACzC5C,OAAAD,EAAAA,SAAA,CACE,SAAA,CAAAhB,EAAAA,IAACkB,EAAS,OAAT,CAAgB,SAAA,eAAA,CAAa,EAC7B2C,EAAa,IAAKrG,GACjByD,EAAAA,KAACD,EAAAA,SAAA,CACC,SAAA,CAAAC,OAACC,EAAS,KAAT,CAAc,SAAU1D,EAAS,OAAQL,IAAUK,EAClD,SAAA,CAAAwC,EAAAA,IAAC,UAAQ,SAAAxC,CAAA,CAAQ,EAChBkJ,EAAyBlJ,CAAO,CAAA,EACnC,EACCsJ,GAAsBtJ,CAAO,CAAA,CAAA,EALjBA,CAMf,CACD,CAAA,CAAA,CACH,CAAA,CAAA,CAEJ,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAEAwC,EAAAA,IAACiD,EAAK,OAAL,CACC,MAAO,CAAE,MAAO,aAAA,EAChB,MAAOoB,EACP,SAAUsB,GAET,SAAA3M,GAAqB,IAAKqL,SACxB,SAAA,CAAyB,MAAOA,EAAS,GACvC,SAAAA,EAAS,KAAA,EADCA,EAAS,EAEtB,CACD,CAAA,CAAA,EAGF2C,EAAA,CAAkB,EACrB,EAECxD,GACCxD,EAAAA,IAACsB,GAAA,CACC,UAAU,yEACV,QAAUxB,GAASqG,EAA6BrG,EAAM,EAAK,CAAA,CAAA,EAI/DmB,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAjB,EAAAA,IAACwB,GAAA,CAAqB,WAAY2D,GAAgB,QAASmB,EAAY,EACvEtG,EAAAA,IAAC2B,GAAA,CAAa,QAAS4E,CAAA,CAAc,CAAA,CAAA,CACvC,CAAA,CAAA,CAAA,CAGN,CAEA,SAASW,GAAgB,CAAE,IAAA7O,EAAK,SAAAwG,GAA+D,CAC7F,KAAM,CAAE,SAAApD,CAAA,EAAaC,GAAA,EAGfyL,EAAe9O,EAAI,eAAA,IAAqB,KACxC+O,EAAc/O,EAAI,cAAA,IAAoB,KACtCgP,EAAchP,EAAI,cAAA,IAAoB,KACtCiP,EAAU,EAAEH,GAAgBC,GAAeC,GAC3CE,EAAclP,EAAI,cAAA,EAClBmP,EAAgBD,GAAe,EAG/BE,EACJH,IAAYC,IAAgB,GAAKlP,EAAI,YAAcA,EAAI,SAAS,CAAC,GAC5DA,EAAI,SAAS,CAAC,EAAmB,OAClC,KAEAqP,EACJJ,GAAWC,GAAe,GAAKlP,EAAI,YAAcA,EAAI,SAASkP,EAAc,CAAC,EACxElP,EAAI,SAASkP,EAAc,CAAC,EAAmB,OAChD,KAEAI,EAASF,IAAU,KAAO,OAAO,SAASA,EAAM,IAAK,EAAI,KACzDG,EAASF,IAAU,KAAO,OAAO,SAASA,EAAM,IAAK,EAAI,KAEzDG,EAAiBP,EACnBK,IAAW,MAAQC,IAAW,KAC5B,MACAD,IAAW,KACXH,EACE,KACA,MACFI,IAAW,KACX,KACA,KACFT,EACA,IACAE,EACA,IACAD,EACA,IACA,KAEE,CAACU,EAAqBC,CAAsB,EAAIzT,EAAAA,SACpDuT,GAAkB,GAAA,EAEd,CAACG,EAAaC,CAAc,EAAI3T,EAAAA,SAAwBqT,CAAM,EAC9D,CAACO,EAAaC,CAAc,EAAI7T,EAAAA,SAAwBsT,CAAM,EACpE3I,EAAAA,UAAU,IAAM,CACdgJ,EAAeN,CAAM,EACrBQ,EAAeP,CAAM,CACvB,EAAG,CAACD,EAAQC,CAAM,CAAC,EAEnB,MAAMQ,EACHJ,IAAgB,MAAQE,IAAgB,MAAQF,EAAcE,GAC9DF,IAAgB,MAAQA,EAAc,GACtCE,IAAgB,MAAQA,EAAc,EAKzC,SAASG,EAAgCzF,EAA6C,CACpF,MAAM0F,EAAyB1F,EAAM,OAAO,MAC5CmF,EAAuBO,CAA+C,EAItE,MAAMvI,EAAOzG,GAAuBgP,CAAsB,EAAE,KAAO,IACnE7M,EAAS,QAAQpD,EAAI,MAAQA,EAAI,KAAO0H,CAAI,EAC5ClB,IAAA,CACF,CAEA,SAAS0J,EAAwB3F,EAA4C,CAC3E,MAAMxO,EAAQ,OAAO,SAASwO,EAAM,OAAO,KAAK,EAChDqF,EAAgB,OAAO,MAAM7T,CAAK,EAAY,KAARA,CAAY,EAE9CqT,IAAU,MAAQ,CAAC,OAAO,MAAMrT,CAAK,IACvCqH,EAAS,cAAcgM,EAAOrT,EAAM,SAAA,CAAU,EAC9CyK,IAAA,EAEJ,CAEA,SAAS2J,EAAwB5F,EAA4C,CAC3E,MAAMxO,EAAQ,OAAO,SAASwO,EAAM,OAAO,KAAK,EAChDuF,EAAgB,OAAO,MAAM/T,CAAK,EAAY,KAARA,CAAY,EAE9CsT,IAAU,MAAQ,CAAC,OAAO,MAAMtT,CAAK,IACvCqH,EAAS,cAAciM,EAAOtT,EAAM,SAAA,CAAU,EAC9CyK,IAAA,EAEJ,CAEA,SAAS0H,GAAe,CACtB9K,EAAS,OAAOpD,EAAI,MAAQA,EAAI,IAAK,EACrCwG,IAAA,CACF,CAKA,OACEoC,EAAAA,KAAC,MAAA,CACC,UAAW,CACT,2FAAA,EAEC,OAAOmH,EAAiB,CAAC,eAAe,EAAI,EAAE,EAC9C,KAAK,GAAG,EAEX,SAAA,CAAAnH,EAAAA,KAAC,MAAA,CAAI,UAAU,kDACb,SAAA,CAAAjB,EAAAA,IAACiD,EAAK,OAAL,CACC,KAAK,KACL,MAAO,CAAE,MAAO,aAAA,EAChB,MAAO6E,EACP,SAAUO,EAGT,SAAAhP,GAAmB,IAAKR,GACvBmH,EAAAA,IAAC,SAAA,CAAO,MAAOnH,EAAK,GACjB,SAAAA,EAAK,KAAA,EADqBA,EAAK,EAElC,CACD,CAAA,CAAA,QAEF,MAAA,CAAI,UAAU,2CACZ,SAAA,CAAC,IAAK,IAAK,GAAG,EAAE,SAASiP,CAAmB,EAC3C9H,EAAAA,IAAC,OAAA,CAAK,UAAU,UAAW,SAAA8H,CAAA,CAAoB,EAE/C7G,EAAAA,KAAAD,EAAAA,SAAA,CACE,SAAA,CAAAhB,EAAAA,IAAC,OAAA,CAAK,UAAU,UAAW,SAAA,IAAI,EAC/BA,EAAAA,IAACiD,EAAK,KAAL,CAAU,SAAA,QAAA,CAAM,EAChB,CAAC,MAAO,KAAM,KAAK,EAAE,SAAS6E,CAAmB,GAChD9H,EAAAA,IAACiD,EAAK,QAAL,CACC,KAAK,KACL,MAAO,CAAE,MAAO,KAAA,EAChB,KAAK,SACL,IAAK6E,IAAwB,MAAQ,EAAI,EACzC,IAAKA,IAAwB,MAAQI,GAAe,OAAY,OAChE,MAAOF,GAAe,EACtB,SAAUO,CAAA,CAAA,EAGbT,IAAwB,OAAS9H,MAACiD,EAAK,KAAL,CAAU,SAAA,KAAE,EAC9C,CAAC,MAAO,IAAI,EAAE,SAAS6E,CAAmB,GACzC9H,EAAAA,IAACiD,EAAK,QAAL,CACC,KAAK,KACL,MAAO,CAAE,MAAO,KAAA,EAChB,KAAK,SACL,IAAK6E,IAAwB,OAAQE,GAAe,EACpD,MAAOE,GAAeF,GAAe,EACrC,SAAUQ,CAAA,CAAA,EAGdxI,EAAAA,IAAC,OAAA,CAAK,UAAU,UAAW,SAAA,GAAA,CAAI,CAAA,CAAA,CACjC,CAAA,CAEJ,CAAA,EACF,EAEAA,EAAAA,IAAC2B,GAAA,CACC,UAAU,wEACV,QAAS4E,CAAA,CAAA,CACX,CAAA,CAAA,CAGN,CAKA,SAASnD,GAAY,CAAE,IAAA/K,EAAK,SAAAwG,GAAiE,CAC3F,KAAM,CAAE,SAAApD,CAAA,EAAaC,GAAA,EACf,CAAE,kBAAAX,CAAA,EAAsBO,GAAA,EACxB,CAAE,UAAAhD,CAAA,EAAcgC,GAAA,EAEhBmO,EAAmBpQ,EAAI,eAAA,EACvBqQ,EAAkBrQ,EAAI,cAAA,EACtBsQ,EAAgBtQ,EAAI,WAAA,EAEpBuQ,EAAaH,IAAqB,KAElChF,EACFrL,GADiBwQ,EACCH,EACAC,EADkBpQ,CAAS,EAMjD,SAASiO,GAAe,CAEtB9K,EAAS,OAAOpD,EAAI,MAAQA,EAAI,IAAK,EACrCwG,IAAA,CACF,CAEA,SAASgK,GAAsB,CAC7BpN,EAAS,YAAYpD,EAAI,KAAO,IAAIa,EAAsB,EAAE,EAC5D2F,IAAA,CACF,CAKA,SAASiK,GAAc,CACrB,GAAIL,IAAqB,KAAM,CAM7B,IAASM,EAAT,SAA2B3U,EAAe,CACxCqH,EAAS,cAAc0I,EAAW,OAAQ,IAAI3F,GAAapK,CAAK,CAAC,GAAG,EACpEyK,IAAA,CACF,EARA,MAAMsF,EAAasE,EAAiB,OAAA,EAAS,eAAA,EAAiB,OAAA,EACxDO,EAAc7E,EAAW,OAAO,KAEhC/P,EAAQqK,GAAeuK,GAAa,MAAM,EAAG,EAAE,CAAC,EAOtD,aAAQ3F,GAAA,CAAmB,MAAOjP,GAAS,GAAI,SAAU2U,EAAmB,CAC9E,CAEA,GAAIL,IAAoB,KAAM,CAC5B,MAAMO,EAAgBP,EAAgB,WAAA,EAGtC,GAAI,CAACO,EAAe,CAClB,IAASC,EAAT,SAAiCpJ,EAAyB,CACxD,MAAMC,EAAOrG,GAAoBoG,CAAI,EAAE,IACvCrE,EAAS,YAAYpD,EAAI,MAAQ,IAAI0H,CAAI,GAAG,EAC5ClB,IAAA,CACF,EAEA,aAAQuC,GAAA,CAAoB,QAAUtB,GAASoJ,EAAwBpJ,CAAI,EAAG,CAChF,CAEA,OAAOE,EAAAA,IAACmJ,GAAA,CAAW,IAAKF,EAAe,SAAApK,CAAA,CAAoB,CAC7D,CAEA,MAAM,MAAM,uDAAuD,CACrE,CAEA,OACEoC,EAAAA,KAAC,MAAA,CACC,UAAW,CACT,wGAAA,EAEC,OAAOwC,EAAe,eAAiB,EAAE,EACzC,KAAK,GAAG,EAEV,SAAA,CAAAmF,EAAa5I,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,GAAA,CAAC,EAAUA,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,IAAC,EAC3E8I,EAAA,EACAF,EAAa5I,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,GAAA,CAAC,EAAUA,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,IAAC,EAC3EjF,GAAqB4N,IAAkB,YACrCzB,GAAA,CAAgB,IAAKyB,EAAe,SAAA9J,EAAoB,EAE3DmB,EAAAA,IAAC2B,GAAA,CACC,UAAU,2EACV,QAAS4E,CAAA,CAAA,EAEVxL,GAAqB4N,IAAkB,MACtC3I,EAAAA,IAAC8B,GAAA,CACC,UAAU,uDACV,QAAS+G,CAAA,CAAA,CACX,CAAA,CAAA,CAIR,CAGA,SAASM,GAAW,CAAE,IAAA9Q,EAAK,SAAAwG,GAA+D,CACxF,MAAMoK,EAAgB5Q,EAAI,SAAS,CAAC,EAGpC,OAAI4Q,aAAyBvS,GAEzBsJ,EAAAA,IAACuD,GAAA,CACC,IAAK0F,EACL,iCAAkC,GAClC,SAAApK,CAAA,CAAA,EAOJoK,aAAyBxS,GACzBwS,aAAyBzS,EAElBwJ,EAAAA,IAACoJ,GAAA,CAAe,IAAKH,EAAe,SAAApK,CAAA,CAAoB,EAI1DmB,EAAAA,IAACqJ,GAAA,CAAe,IAAKJ,EAAe,SAAApK,CAAA,CAAoB,CACjE,CAEA,SAASuK,GAAe,CACtB,IAAA/Q,EACA,SAAAwG,CACF,EAGG,CACD,MAAMyK,EAAajR,aAAe5B,EAC5B8S,EAAUlR,aAAe7B,EAEzBgT,EAAWnR,EAAI,SAAS,CAAC,EAE/B,OACE4I,EAAAA,KAAC,MAAA,CACC,UAAW,CAAC,gEAAgE,EACzE,OAAOqI,EAAa,CAAC,+CAA+C,EAAI,CAAA,CAAE,EAC1E,OAAOC,EAAU,CAAC,4CAA4C,EAAI,CAAA,CAAE,EACpE,KAAK,GAAG,EAEV,SAAA,CAAAD,GAActJ,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,IAAC,EACxCuJ,GAAWvJ,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,IAAC,EACrCwJ,aAAoB9S,GACnBsJ,EAAAA,IAACuD,GAAA,CACC,IAAKiG,EACL,iCAAkC,CAACF,EACnC,SAAAzK,CAAA,CAAA,EAEA2K,aAAoB/S,GACtB+S,aAAoBhT,EACpBwJ,EAAAA,IAACoJ,GAAA,CAAe,IAAKI,EAAU,SAAA3K,EAAoB,EAEnDmB,MAACqJ,GAAA,CAAe,IAAKG,EAAU,SAAA3K,EAAoB,EAEpD0K,GAAWvJ,EAAAA,IAAC,OAAA,CAAK,UAAU,SAAS,SAAA,GAAA,CAAC,CAAA,CAAA,CAAA,CAG5C,CAEA,SAASqJ,GAAe,CACtB,IAAAhR,EACA,SAAAwG,CACF,EAGG,CACD,KAAM,CAAE,SAAApD,CAAA,EAAaC,GAAA,EAEf+N,EAAkBpR,aAAe9B,GACjCmT,EAAiBrR,aAAejC,GAEhCiL,EAAc,OAAO,KAAK3H,EAAmB,EAChD,OAAO+P,EAAmBrE,GAAOA,IAAO,MAAQ,IAAM,EAAI,EAC1D,OAAOsE,EAAkBtE,GAAOA,IAAO,KAAO,IAAM,EAAI,EACrDuE,EAAkBF,EAAkB,IAAM,IAKhD,SAASvG,EAAepD,EAAyB,CAC/C,MAAM4C,EACJrK,EAAI,SAAS,OAAS,EAAKA,EAAI,SAA+B,CAAC,EAAE,MAAO,WAAa,EACjF0H,EAAOrG,GAAoBoG,CAAI,EAAE,IAEjC8J,EAAmB9J,IAAS,QAAUC,EAAO,KAAKA,CAAI,KAC5DtE,EAAS,aAAaiH,EAAY,GAAGkH,CAAgB,IAAID,CAAe,GAAG,EAC3E9K,IAAA,CACF,CAEA,SAASgL,EAAyB/J,EAAyBzH,EAAsB,CAC/E,MAAMqK,EAAarK,EAAI,KAAM,WACvB0H,EAAOrG,GAAoBoG,CAAI,EAAE,IAEjC8J,EAAmB9J,IAAS,QAAUC,EAAO,KAAKA,CAAI,KAC5DtE,EAAS,YAAYiH,EAAY,IAAIiH,CAAe,IAAIC,CAAgB,EAAE,EAC1E/K,IAAA,CACF,CAKA,SAASiL,EAAYzJ,EAA2B,CAC9C,OAAIA,aAAoB3J,GAEpBsJ,EAAAA,IAACuD,GAAA,CACC,IAAKlD,EACL,iCAAkC,GAClC,SAAAxB,CAAA,CAAA,EAKFwB,aAAoB5J,GAAyB4J,aAAoB7J,EAC5DwJ,EAAAA,IAACoJ,GAAA,CAAe,IAAK/I,EAAU,SAAAxB,CAAA,CAAoB,EAGrDmB,EAAAA,IAACqJ,GAAA,CAAe,IAAKhJ,EAAU,SAAAxB,CAAA,CAAoB,CAC5D,CAEA,OACEoC,EAAAA,KAAC,MAAA,CACC,UAAW,CAAC,gEAAgE,EACzE,OAAOyI,EAAiB,CAAC,eAAe,EAAI,CAAA,CAAE,EAC9C,OAAOD,EAAkB,CAAC,gBAAgB,EAAI,CAAA,CAAE,EAChD,KAAK,GAAG,EAEV,SAAA,CAAAC,GAAkB1J,EAAAA,IAAC,OAAA,CAAK,UAAU,gCAAgC,SAAA,KAAE,EACpEyJ,GAAmBzJ,EAAAA,IAAC,OAAA,CAAK,UAAU,gCAAgC,SAAA,MAAG,EACvEiB,EAAAA,KAAC,MAAA,CAAI,UAAU,6CACb,SAAA,CAAAjB,EAAAA,IAACoB,GAAA,CAAoB,WAAAC,EAAwB,QAAS6B,CAAA,CAAgB,EACpE7K,EAAI,SAAS,OAAO,CAAC0R,EAAGpS,IAAMA,EAAI,IAAM,CAAC,EAAwB,IAAK0I,GACtEY,EAAAA,KAACD,EAAAA,SAAA,CACE,SAAA,CAAA8I,EAAYzJ,CAAQ,EACrBL,EAAAA,IAACoB,GAAA,CACC,WAAAC,EACA,QAAUvB,GAAS+J,EAAyB/J,EAAMO,CAAQ,CAAA,CAAA,CAC5D,CAAA,EALa,cAAcA,EAAS,kBAAA,EAAoB,SAAA,CAAU,EAMpE,CACD,CAAA,CAAA,CACH,CAAA,CAAA,CAAA,CAGN,CCphDO,MAAM2J,UAAkBpV,EAAO,CACpC,OAAuB,QAAU,EACjC,OAAuB,QAAU,EACjC,OAAuB,MAAQ,EAC/B,OAAuB,QAAU,EACjC,OAAuB,OAAS,EAChC,OAAuB,cAAgB,EACvC,OAAuB,aAAe,EACtC,OAAuB,UAAY,EACnC,OAAuB,YAAc,EACrC,OAAuB,MAAQ,GAC/B,OAAuB,IAAM,GAC7B,OAAuB,GAAK,GAC5B,OAAuB,IAAM,GAC7B,OAAuB,IAAM,GAC7B,OAAuB,cAAgB,GACvC,OAAuB,cAAgB,GACvC,OAAuB,GAAK,GAC5B,OAAuB,WAAa,EACpC,OAAuB,mBAAqB,EAC5C,OAAuB,cAAgB,EACvC,OAAuB,mBAAqB,EAC5C,OAAuB,iBAAmB,EAC1C,OAAuB,WAAa,EACpC,OAAuB,uBAAyB,EAChD,OAAuB,cAAgB,EACvC,OAAuB,mBAAqB,EAC5C,OAAuB,qBAAuB,EAC9C,OAAuB,sBAAwB,GAC/C,OAAuB,eAAiB,GACxC,OAAuB,mBAAqB,GAC5C,OAAuB,cAAgB,GACvC,OAAuB,mBAAqB,GAC5C,OAAuB,uBAAyB,GAChD,OAAuB,oBAAsB,GAC7C,OAAuB,iBAAmB,GAC1C,OAAuB,YAAc,GACrC,OAAuB,iBAAmB,GAE1C,OAAuB,aAAe,CACpC,KACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,KACA,KACA,KACA,KAAA,EAGF,OAAuB,cAAgB,CACrC,KACA,UACA,UACA,QACA,UACA,SACA,gBACA,eACA,YACA,cACA,QACA,MACA,KACA,MACA,MACA,gBACA,gBACA,IAAA,EAEF,OAAuB,UAAY,CACjC,QACA,gBACA,WACA,gBACA,cACA,QACA,oBACA,WACA,gBACA,kBACA,mBACA,YACA,gBACA,WACA,gBACA,oBACA,iBACA,cACA,SACA,aAAA,EAGF,IAAW,iBAA0B,CACnC,MAAO,cACT,CACA,IAAW,cAAkC,CAC3C,OAAOoV,EAAU,YACnB,CACA,IAAW,eAAmC,CAC5C,OAAOA,EAAU,aACnB,CACA,IAAW,WAAsB,CAC/B,OAAOA,EAAU,SACnB,CACA,IAAW,eAA0B,CACnC,OAAOA,EAAU,cACnB,CAEU,+BACRnV,EACAC,EAC0B,CAC1B,OAAO,IAAIC,GAAyB,KAAMF,EAAWC,CAAO,CAC9D,CAEO,YAAYE,EAAoB,CACrC,MAAMA,CAAK,EACX,KAAK,YAAc,IAAIC,GACrB,KACA+U,EAAU,KACVA,EAAU,eACV,IAAI9U,EAAuB,CAE/B,CACO,OAAsB,CAC3B,MAAMC,EAAe,IAAIC,GAAa,KAAK,QAAS,KAAK,KAAK,EAC9D,KAAK,UAAUD,EAAc,EAAG6U,EAAU,UAAU,EACpD,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,cAAA,EACL,KAAK,MAAQ,GACb,KAAK,MAAM6U,EAAU,GAAG,CAE5B,OAAS1U,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,eAAsC,CAC3C,MAAMA,EAAe,IAAI8U,GAAqB,KAAK,QAAS,KAAK,KAAK,EACtE,KAAK,UAAU9U,EAAc,EAAG6U,EAAU,kBAAkB,EAC5D,IAAI3U,EACJ,GAAI,CAQA,IAPF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,SAAA,EACL,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EAC3BE,EAAM,KAAK,YAAY,GAAG,CAAC,GACnBA,EAAM,OAAW,IAAO,GAAKA,EAAO,SAAW,GAGjD,KAAK,MAAQ,GACb,KAAK,iBAAA,EACL,KAAK,MAAQ,GACb,KAAK,SAAA,EAGT,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EAC3BA,EAAM,KAAK,YAAY,GAAG,CAAC,CAGjC,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,UAA4B,CACjC,MAAMA,EAAe,IAAI+U,GAAgB,KAAK,QAAS,KAAK,KAAK,EACjE,KAAK,UAAU/U,EAAc,EAAG6U,EAAU,aAAa,EACvD,GAAI,CAGF,OAFA,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EACnB,KAAK,YAAY,GAAG,CAAC,EAAA,CAC3B,KAAKA,EAAU,QACb,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,MAAM6U,EAAU,OAAO,EAC5B,KAAK,MAAQ,GACb,KAAK,cAAA,EACL,KAAK,MAAQ,GACb,KAAK,MAAMA,EAAU,OAAO,EAE9B,MACF,KAAKA,EAAU,cACf,KAAKA,EAAU,cACb,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,cAAA,EAEP,MACF,QACE,MAAM,IAAIQ,GAAqB,IAAI,CAAA,CAEzC,OAASL,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,eAAsC,CAC3C,MAAMA,EAAe,IAAIgV,GAAqB,KAAK,QAAS,KAAK,KAAK,EACtE,KAAK,UAAUhV,EAAc,EAAG6U,EAAU,kBAAkB,EAC5D,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAClC,CAGE,OAFA,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EACnB,KAAK,YAAY,gBAAgB,KAAK,YAAa,EAAG,KAAK,OAAO,EAAA,CACxE,IAAK,GAED,KAAK,MAAQ,GACb,KAAK,MAAA,EACL,KAAK,MAAQ,GACb,KAAK,kBAAA,EAEP,KAAA,CAEJ,KAAK,MAAQ,GACb,KAAK,YAAA,CACP,CACF,OAASG,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,aAAkC,CACvC,MAAMA,EAAe,IAAIiV,GAAmB,KAAK,QAAS,KAAK,KAAK,EACpE,KAAK,UAAUjV,EAAc,EAAG6U,EAAU,gBAAgB,EAC1D,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACbE,EAAM,KAAK,YAAY,GAAG,CAAC,EACrBA,IAAQ,IAAMA,IAAQ,IAG1B,KAAK,aAAa,YAAY,IAAI,EAClC,KAAK,QAAA,GAHL,KAAK,aAAa,cAAc,IAAI,CAM1C,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,OAAsB,CAC3B,MAAMA,EAAe,IAAIkV,GAAa,KAAK,QAAS,KAAK,KAAK,EAC9D,KAAK,UAAUlV,EAAc,GAAI6U,EAAU,UAAU,EACrD,GAAI,CAGF,OAFA,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EACnB,KAAK,YAAY,gBAAgB,KAAK,YAAa,EAAG,KAAK,OAAO,EAAA,CACxE,IAAK,GACH,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,YAAA,EAEP,MACF,IAAK,GACH,KAAK,cAAcA,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,YAAA,EAEP,KAAA,CAEN,OAASG,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,mBAA8C,CACnD,MAAMA,EAAe,IAAImV,GAAyB,KAAK,QAAS,KAAK,KAAK,EAC1E,KAAK,UAAUnV,EAAc,GAAI6U,EAAU,sBAAsB,EACjE,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,SAAA,EACL,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EAC3BE,EAAM,KAAK,YAAY,GAAG,CAAC,EACvBA,IAAQ,KAER,KAAK,MAAQ,GACb,KAAK,cAAA,EAIb,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,UAA4B,CACjC,MAAMA,EAAe,IAAIoV,GAAgB,KAAK,QAAS,KAAK,KAAK,EACjE,KAAK,UAAUpV,EAAc,GAAI6U,EAAU,aAAa,EACxD,GAAI,CAGF,OAFA,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EACnB,KAAK,YAAY,GAAG,CAAC,EAAA,CAC3B,KAAKA,EAAU,cACb,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,cAAA,EAEP,MACF,KAAK6U,EAAU,MACf,KAAKA,EAAU,QACf,KAAKA,EAAU,OACf,KAAKA,EAAU,cACf,KAAKA,EAAU,aACf,KAAKA,EAAU,UACf,KAAKA,EAAU,YACb,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,gBAAA,EAEP,MACF,QACE,MAAM,IAAIQ,GAAqB,IAAI,CAAA,CAEzC,OAASL,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,eAAsC,CAC3C,MAAMA,EAAe,IAAIqV,GAAqB,KAAK,QAAS,KAAK,KAAK,EACtE,KAAK,UAAUrV,EAAc,GAAI6U,EAAU,kBAAkB,EAC7D,GAAI,CAGF,OAFA,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EACnB,KAAK,YAAY,gBAAgB,KAAK,YAAa,EAAG,KAAK,OAAO,EAAA,CACxE,IAAK,GACH,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,YAAA,EAEP,MACF,IAAK,GACH,KAAK,cAAcA,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,YAAA,EAEP,KAAA,CAEN,OAASG,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,iBAA0C,CAC/C,MAAMA,EAAe,IAAIsV,GAAuB,KAAK,QAAS,KAAK,KAAK,EACxE,KAAK,UAAUtV,EAAc,GAAI6U,EAAU,oBAAoB,EAC/D,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACbE,EAAM,KAAK,YAAY,GAAG,CAAC,GACpBA,EAAM,OAAW,IAAO,GAAKA,EAAO,QAAU,GAGnD,KAAK,aAAa,YAAY,IAAI,EAClC,KAAK,QAAA,GAHL,KAAK,aAAa,cAAc,IAAI,CAM1C,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,kBAA4C,CACjD,MAAMA,EAAe,IAAIuV,GAAwB,KAAK,QAAS,KAAK,KAAK,EACzE,KAAK,UAAUvV,EAAc,GAAI6U,EAAU,qBAAqB,EAChE,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,UAAA,EACL,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EAC3BE,EAAM,KAAK,YAAY,GAAG,CAAC,EACvBA,IAAQ,KAER,KAAK,MAAQ,GACb,KAAK,cAAA,EAIb,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,WAA8B,CACnC,MAAMA,EAAe,IAAIwV,GAAiB,KAAK,QAAS,KAAK,KAAK,EAClE,KAAK,UAAUxV,EAAc,GAAI6U,EAAU,cAAc,EACzD,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACbE,EAAM,KAAK,YAAY,GAAG,CAAC,GACpBA,EAAM,OAAW,IAAO,GAAKA,EAAO,SAAW,GAGpD,KAAK,aAAa,YAAY,IAAI,EAClC,KAAK,QAAA,GAHL,KAAK,aAAa,cAAc,IAAI,CAM1C,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,eAAsC,CAC3C,MAAMA,EAAe,IAAIyV,GAAqB,KAAK,QAAS,KAAK,KAAK,EACtE,KAAK,UAAUzV,EAAc,GAAI6U,EAAU,kBAAkB,EAC7D,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAClC,CACE,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EAC3BE,EAAM,KAAK,YAAY,GAAG,CAAC,EAC3B,GAGM,KAAK,MAAQ,GACb,KAAK,SAAA,EAGT,KAAK,MAAQ,GACb,KAAK,aAAa,KAAK,IAAI,EAC3BA,EAAM,KAAK,YAAY,GAAG,CAAC,QACpBA,IAAQ,GACnB,CACF,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,UAA4B,CACjC,MAAMA,EAAe,IAAI0V,GAAgB,KAAK,QAAS,KAAK,KAAK,EACjE,KAAK,UAAU1V,EAAc,GAAI6U,EAAU,aAAa,EACxD,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,GACb,KAAK,MAAM6U,EAAU,KAAK,EAC1B,KAAK,MAAQ,GACb,KAAK,cAAA,EACL,KAAK,MAAQ,IACb,KAAK,aAAa,KAAK,IAAI,EAC3B3U,EAAM,KAAK,YAAY,GAAG,CAAC,GACtBA,EAAM,OAAW,IAAO,GAAKA,EAAO,QAAU,IAE/C,KAAK,MAAQ,GACb,KAAK,kBAAA,EAIb,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,eAAsC,CAC3C,MAAMA,EAAe,IAAI2V,GAAqB,KAAK,QAAS,KAAK,KAAK,EACtE,KAAK,UAAU3V,EAAc,GAAI6U,EAAU,kBAAkB,EAC7D,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,IACb,KAAK,YAAA,CAET,OAASG,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,mBAA8C,CACnD,MAAMA,EAAe,IAAI4V,GAAyB,KAAK,QAAS,KAAK,KAAK,EAC1E,KAAK,UAAU5V,EAAc,GAAI6U,EAAU,sBAAsB,EACjE,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,IACb,KAAK,gBAAA,EACL,KAAK,MAAQ,IACb,KAAK,eAAA,CAET,OAASG,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,gBAAwC,CAC7C,MAAMA,EAAe,IAAI6V,GAAsB,KAAK,QAAS,KAAK,KAAK,EACvE,KAAK,UAAU7V,EAAc,GAAI6U,EAAU,mBAAmB,EAC9D,IAAI3U,EACJ,GAAI,CACF,KAAK,cAAcF,EAAc,CAAC,EAEhC,KAAK,MAAQ,IACbE,EAAM,KAAK,YAAY,GAAG,CAAC,EACrBA,IAAQ,IAAMA,IAAQ,IAG1B,KAAK,aAAa,YAAY,IAAI,EAClC,KAAK,QAAA,GAHL,KAAK,aAAa,cAAc,IAAI,CAM1C,OAASC,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,aAAkC,CACvC,MAAMA,EAAe,IAAI8V,GAAmB,KAAK,QAAS,KAAK,KAAK,EACpE,KAAK,UAAU9V,EAAc,GAAI6U,EAAU,gBAAgB,EAC3D,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,IACb,KAAK,OAAA,EACL,KAAK,MAAQ,IACb,KAAK,MAAM6U,EAAU,GAAG,EACxB,KAAK,MAAQ,IACb,KAAK,YAAA,CAET,OAAS1U,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,QAAwB,CAC7B,MAAMA,EAAe,IAAI+V,GAAc,KAAK,QAAS,KAAK,KAAK,EAC/D,KAAK,UAAU/V,EAAc,GAAI6U,EAAU,WAAW,EACtD,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,IACb,KAAK,YAAA,CAET,OAASG,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CACO,aAAkC,CACvC,MAAMA,EAAe,IAAIgW,GAAmB,KAAK,QAAS,KAAK,KAAK,EACpE,KAAK,UAAUhW,EAAc,GAAI6U,EAAU,gBAAgB,EAC3D,GAAI,CACF,KAAK,cAAc7U,EAAc,CAAC,EAEhC,KAAK,MAAQ,IACb,KAAK,MAAM6U,EAAU,aAAa,CAEtC,OAAS1U,EAAI,CACX,GAAIA,aAAcC,EAChB,KAAK,aAAa,YAAY,KAAMD,CAAE,EACtC,KAAK,aAAa,QAAQ,KAAMA,CAAE,MAElC,OAAMA,CAEV,QAAA,CACE,KAAK,SAAA,CACP,CACA,OAAOH,CACT,CAEA,OAAuB,eAA2B,CAChD,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7F,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC3F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAC7F,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9F,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5F,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC9F,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAC5F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAC7F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAC7F,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAC1F,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC9F,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAC9F,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,IAC1F,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAC7F,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC9F,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAC7F,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAC5F,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAC5F,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAC9F,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC9F,EAAG,GAAI,EAAG,EAAG,EAAG,EAA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AG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9F,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7F,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC3F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAC1F,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7F,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3F,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,IAAK,IAAK,EAAG,EAAG,GAAI,GAAI,IAAK,IAAK,EAAG,EAAG,GAAI,GACzF,IAAK,IAAK,EAAG,EAAG,GAAI,GAAI,IAAK,IAAK,EAAG,EAAG,GAAI,GAAI,IAAK,IAAK,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAC7F,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAC9F,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAC9F,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAC5F,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAC5F,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAC5F,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC7F,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAC9F,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAC9F,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAC7F,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAC3F,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAC9F,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAC7F,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAC3F,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAC9F,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAC9F,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAC7F,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAC5F,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EA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"}